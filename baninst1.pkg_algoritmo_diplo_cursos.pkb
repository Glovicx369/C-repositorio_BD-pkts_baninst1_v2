DROP PACKAGE BODY BANINST1.PKG_ALGORITMO_DIPLO_CURSOS;

CREATE OR REPLACE PACKAGE BODY BANINST1.PKG_ALGORITMO_DIPLO_CURSOS AS
/******************************************************************************
 NAME: BANINST1.PKG_ALGORITMO_DIPLO_CURSOS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
      1.0        31/01/2023      FLOPEZLO      1. Created this package.
*******************************************************************************/

FUNCTION p_st_job_ni (p_regla number) return varchar2 IS
    lc_st varchar2(800);
    lc_fecha    varchar2(100);
BEGIN
    BEGIN
        Select a.Msg , to_char(fec_act,'dd/mm/yyyy HH24:MI:SS')
        INTO lc_st, lc_fecha
        from track_prono a
        where a.regla=P_REGLA
        and a.MSG like 'NI:%'
        and a.sec = (Select Max(Sec)
                        from track_prono b
                        where b.regla = a.regla);
    exception WHEN others THEN
        lc_st:='Terminado';
    END;

    if lc_st like 'NI:Termina%' then
        lc_st:='Terminado'||' '||lc_fecha;
    elsif lc_st <> 'Terminado' Then
        lc_st:='Corriendo: '||lc_fecha;
    end if;


    return lc_st;
END;

--Jpg@Create@Ene23
--Corre Nuevos ingresos de forma background -job-
--Optimización en la ejecución
PROCEDURE p_run_ni (p_regla number, p_fecha_inicio varchar2) IS

BEGIN

  DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE
    ( job_name             => 'BANINST1.Job_Run_NI'
     ,argument_name        => 'P_REGLA'
     ,argument_value       => p_regla);
  DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE
    ( job_name             => 'BANINST1.Job_Run_NI'
     ,argument_name        => 'P_FECHA_INICIO'
     ,argument_value       => p_fecha_inicio);

    dbms_scheduler.run_job(JOB_NAME => 'BANINST1.Job_Run_NI', use_current_session=> FALSE);

END;



--Jpg@Create@Abr22
--Function Return Status Job
--Optimización en la ejecución
FUNCTION p_st_job (p_regla number) return varchar2 IS
    lc_st varchar2(800);
    lc_fecha    varchar2(100);
BEGIN
    BEGIN
        Select a.Msg , to_char(fec_act,'dd/mm/yyyy HH24:MI:SS')
        INTO lc_st, lc_fecha
        from track_prono a
        where a.regla=P_REGLA
        and a.sec = (Select Max(Sec)
                        from track_prono b
                        where b.regla = a.regla);
    exception WHEN others THEN
        lc_st:='Terminada';
    END;

    if lc_st = 'Termina P_ALUMNOS_X_ASIGNAR' then
        lc_st:='Terminada'||' '||lc_fecha;
    elsif lc_st <> 'Terminada' Then
        lc_st:='Corriendo: '||lc_fecha;
    end if;


    return lc_st;
END;

--Jpg@Create@Abr22
--Corre Pronostico en forma background -job-
--Optimización en la ejecución
PROCEDURE p_run_prono (p_regla number) IS

BEGIN

  DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE
    ( job_name             => 'UMD.Job_Run_Prono'
     ,argument_name        => 'P_REGLA'
     ,argument_value       => p_regla);

    dbms_scheduler.run_job(JOB_NAME => 'UMD.Job_Run_Prono', use_current_session=> FALSE);

END;


--Jpg@Create@Mar22
--Corre estadisticas para tablas masivas por los cambios masivos que sufren las tablas
--Optimización en la ejecución
PROCEDURE p_run_estadisticas(p_table varchar2 ) IS
l_owner varchar2(100):='BANINST1';

BEGIN
  SYS.DBMS_STATS.GATHER_TABLE_STATS (
     OwnName           => l_owner
    ,TabName           => p_table
    ,Estimate_Percent  => 10
    ,Method_Opt        => 'FOR ALL COLUMNS SIZE 1'
    ,Degree            => 4
    ,Cascade           => TRUE
    ,No_Invalidate  => FALSE);
END;


--Jpg@Create@Feb22 Procedimiento masivo del dashboard para pronosticar a nivel regla
--Sustituye al dashbord por pidm o por alumno,
PROCEDURE p_materias_x_cursar (p_regla number) IS

type array_object_o is table of avance_o%rowtype
    index by binary_integer;
type array_object_m is table of avance_m%rowtype
    index by binary_integer;
type array_object_p is table of tmp_pob_calif%rowtype
    index by binary_integer;


  la_avance_o array_object_o;
  la_avance_m array_object_m;
  la_tmp_calif array_object_p;

Cursor c_tmp_calif is
    select /*+Parallel(8)*/ Distinct
                p.pidm, p.prog programa,
             w.shrtckn_subj_code subj, w.shrtckn_crse_numb code,
             shrtckg_grde_code_final CALIF, decode (shrgrde_passed_ind,'Y','AP','N','NA') ST_MAT,
             trunc(shrtckg_final_grde_chg_date) fecha
             ,p.regla
            from shrtckn w,shrtckg, shrgrde, smrprle,
            (Select distinct sgbstdn_pidm pidm, programa prog, REL_PROGRAMAXALUMNO_no_regla regla
                from REL_PROGRAMAXALUMNO
                where REL_PROGRAMAXALUMNO_no_regla=p_regla) p
            where shrtckn_pidm=p.pidm
             and  shrtckg_pidm=w.shrtckn_pidm
             and  SHRTCKN_SUBJ_CODE||SHRTCKN_CRSE_NUMB not in ('L1HB401','L1HB402','L1HB403','L1HB404','L1HB405','L1HP401','UTEL001')
             and  shrtckg_tckn_seq_no=w.shrtckn_seq_no
             and  shrtckg_term_code=w.shrtckn_term_code
             and  smrprle_program=prog
             and  shrgrde_levl_code=smrprle_levl_code  -------------------
             and shrgrde_term_code_effective=(select zstpara_param_desc from zstpara where zstpara_mapa_id='ESC_SHAGRD'
             and substr((select f_getspridenid(p.pidm) from dual),1,2)=zstpara_param_id and zstpara_param_valor=smrprle_levl_code)
             and  shrgrde_code=shrtckg_grde_code_final
             and  decode(shrtckg_grde_code_final,'NA',4,'NP',4,'AC',6,to_number(shrtckg_grde_code_final))   -- anadido para sacar la calificacion mayor  OLC
                              in (select max(decode(shrtckg_grde_code_final,'NA',4,'NP',4,'AC',6,to_number(shrtckg_grde_code_final))) from shrtckn ww, shrtckg zz
                                   where w.shrtckn_pidm=ww.shrtckn_pidm
                                     and  w.shrtckn_subj_code=ww.shrtckn_subj_code  and w.shrtckn_crse_numb=ww.shrtckn_crse_numb
                                     and  ww.shrtckn_pidm=zz.shrtckg_pidm and ww.shrtckn_seq_no=zz.shrtckg_tckn_seq_no and ww.shrtckn_term_code=zz.shrtckg_term_code)
            and   SHRTCKN_SUBJ_CODE||SHRTCKN_CRSE_NUMB not in (select ZSTPARA_PARAM_VALOR from ZSTPARA
                                                                where ZSTPARA_MAPA_ID='NOVER_MAT_DASHB'
                                                                  and shrtckn_pidm in (select spriden_pidm from spriden where spriden_id=ZSTPARA_PARAM_ID))
            and p.regla = p_regla
-- and p.pidm = 97879
            union
            select  /*+Parallel(8)*/ Distinct p.pidm, p.prog,
                    shrtrce_subj_code subj, shrtrce_crse_numb code,
                   shrtrce_grde_code  CALIF, 'EQ'  ST_MAT, trunc(shrtrce_activity_date) fecha
             ,p.regla
              from shrtrce,
            (Select distinct sgbstdn_pidm pidm, programa prog, REL_PROGRAMAXALUMNO_no_regla regla
                from REL_PROGRAMAXALUMNO
                where REL_PROGRAMAXALUMNO_no_regla=p_regla) p
             where shrtrce_pidm=p.pidm
               and SHRTRCE_SUBJ_CODE||SHRTRCE_CRSE_NUMB not in ('L1HB401','L1HB402','L1HB403','L1HB404','L1HB405','L1HP401','UTEL001')
               and p.regla = p_regla
--and p.pidm = 97879
            union
             select  Distinct p.pidm, p.prog,
                    SHRTRTK_SUBJ_CODE_INST subj, SHRTRTK_CRSE_NUMB_INST code,
                    '0' CALIF, 'EQ'  ST_MAT, trunc(SHRTRTK_ACTIVITY_DATE) fecha
             ,p.regla
               from  SHRTRTK,
                     (Select distinct sgbstdn_pidm pidm, programa prog, REL_PROGRAMAXALUMNO_no_regla regla
                        from REL_PROGRAMAXALUMNO) p
              where  SHRTRTK_PIDM=p.pidm
              and p.regla = p_regla
--and p.pidm = 97879
            union
             select  /*+Parallel(8)*/ p.pidm, p.prog,
                    ssbsect_subj_code subj, ssbsect_crse_numb code, '101' CALIF, 'EC'  ST_MAT,
                    trunc(sfrstcr_rsts_date)+120 fecha
             ,p.regla
               from sfrstcr, smrprle, ssbsect, spriden,
                    (Select distinct sgbstdn_pidm pidm, programa prog, REL_PROGRAMAXALUMNO_no_regla regla, STUDY_PATH Sp
                        from REL_PROGRAMAXALUMNO
                        where REL_PROGRAMAXALUMNO_no_regla=p_regla) p
              where smrprle_program=p.prog
                and sfrstcr_pidm=p.pidm  and sfrstcr_grde_code is null and sfrstcr_rsts_code='RE' and SFRSTCR_STSP_KEY_SEQUENCE = p.sp
                and SSBSECT_SUBJ_CODE||SSBSECT_CRSE_NUMB not in ('L1HB401','L1HB402','L1HB403','L1HB404','L1HB405','L1HP401','UTEL001')
                and spriden_pidm=sfrstcr_pidm and spriden_change_ind is null
    --                                              and    sfrstcr_term_code=fget_periodo(substr(spriden_id,1,2),sfrstcr_pidm)
                and ssbsect_term_code=sfrstcr_term_code
                and ssbsect_crn=sfrstcr_crn
                and p.regla = p_regla
--and p.pidm = 97879
            union
             select /*+Parallel(8)*/
                    p.pidm, p.prog,
                    ssbsect_subj_code subj, ssbsect_crse_numb code,
                    sfrstcr_grde_code CALIF,  decode (shrgrde_passed_ind,'Y','AP','N','NA') ST_MAT,
                    trunc(sfrstcr_rsts_date)  fecha
             ,p.regla
               from sfrstcr, smrprle, ssbsect, spriden, shrgrde,
                    (Select distinct sgbstdn_pidm pidm, programa prog, REL_PROGRAMAXALUMNO_no_regla regla, STUDY_PATH Sp,  PERIODO_CATALOGO
                        from REL_PROGRAMAXALUMNO
                        where REL_PROGRAMAXALUMNO_no_regla=p_regla) p
              where smrprle_program=p.prog
--and p.pidm = 97879
               and  sfrstcr_pidm=p.pidm  and sfrstcr_grde_code is not null and SFRSTCR_STSP_KEY_SEQUENCE = p.sp
               and  sfrstcr_pidm not in (select shrtckn_pidm from shrtckn where sfrstcr_term_code=shrtckn_term_code and shrtckn_crn=sfrstcr_crn)
               and  SFRSTCR_RSTS_CODE!='DD'  --- agregado
               and  spriden_pidm=sfrstcr_pidm and spriden_change_ind is null
    --                                             and   sfrstcr_term_code=fget_periodo(substr(spriden_id,1,2),sfrstcr_pidm)
               and  SSBSECT_SUBJ_CODE||SSBSECT_CRSE_NUMB not in ('L1HB401','L1HB402','L1HB403','L1HB404','L1HB405','L1HP401','UTEL001')
               and  SSBSECT_SUBJ_CODE||SSBSECT_CRSE_NUMB not in (select ZSTPARA_PARAM_VALOR from ZSTPARA
                                                                  where ZSTPARA_MAPA_ID='NOVER_MAT_DASHB'
                                                                    and sfrstcr_pidm in (select spriden_pidm from spriden where spriden_id=ZSTPARA_PARAM_ID))
               and  ssbsect_term_code=sfrstcr_term_code
               and  ssbsect_crn=sfrstcr_crn
               and  shrgrde_levl_code=smrprle_levl_code   -------------------
               and shrgrde_term_code_effective=(select zstpara_param_desc from zstpara where zstpara_mapa_id='ESC_SHAGRD' and substr((select f_getspridenid(p.pidm) from dual),1,2)=zstpara_param_id and zstpara_param_valor=smrprle_levl_code)
               and  shrgrde_code=sfrstcr_grde_code
               and p.regla = p_regla;

Cursor c_avance_o is
            Select   /*+Parallel(8)*/ DISTINCT
                        case
                            when smralib_area_desc like 'Servicio%' then TO_NUMBER (SUBSTR (smralib_area,9,2))+1
                            when (smralib_area_desc like ('Taller%') OR smralib_area_desc like ('CERTIFICATION%')) then TO_NUMBER (SUBSTR (smralib_area,9,2))+1
                            else TO_NUMBER (SUBSTR (smrarul_area, 9, 2))
                        end  per,  ----
                        smrpaap_area area,   ----
                         null nombre_area,  ---
                        p_regla,
                        smrarul_subj_code||smrarul_crse_numb_low materia, ----
                        scrsyln_long_course_title nombre_mat, ----
                         case when k.calif in ('NA','NP','AC') then '1'
                                when k.st_mat='EC' then '101'
                         else  k.calif
                         end calif, ---
                         nvl(k.st_mat,'PC'),  ---
                         smracaa_rule regla,   ---
                         case when k.st_mat='EC' then null
                           else k.calif
                         end  origen,
                         k.fecha, ---
                         k.pidm ,
                         k.programa
        from smrarul
        join smralib on smralib_area = smrarul_area
        join smracaa on smracaa_area = smralib_area
                and smracaa_rule = smrarul_key_rule
                and SMRACAA_TERM_CODE_EFF=SMRARUL_TERM_CODE_EFF
        join sorlcur on SORLCUR_TERM_CODE_CTLG = SMRACAA_TERM_CODE_EFF
-- and sorlcur_pidm = 97879
        join spriden on spriden_pidm = sorlcur_pidm and spriden_change_ind is null
        join tmp_pob_calif k on k.pidm = sorlcur_pidm and
                                k.subj=smrarul_subj_code and
                                k.code=smrarul_crse_numb_low and
                                k.regla=p_regla
        join smrpaap on   smrpaap_area = smracaa_area
                and  smrpaap_term_code_eff = SORLCUR_TERM_CODE_CTLG
                and  smrpaap_program = k.programa
        join sgbstdn s on s.sgbstdn_pidm = spriden_pidm and
                s.sgbstdn_program_1=smrpaap_program
        join scrsyln on scrsyln_subj_code=smrarul_subj_code and
                scrsyln_crse_numb=smrarul_crse_numb_low
        left join zstpara on zstpara_mapa_id='MAESTRIAS_BIM' and
                zstpara_param_id=sgbstdn_program_1 and
                zstpara_param_desc=SORLCUR_TERM_CODE_CTLG
        Where Exists(Select 1 from smbagen  --solo areas activas  OLC
                        where smrpaap_area          = smbagen_area and
                            SMBAGEN_TERM_CODE_EFF   = SMRPAAP_TERM_CODE_EFF and
                            SMBAGEN_ACTIVE_IND='Y'
                     )
        and    Exists(SElect 1 from stvstst where stvstst_code=sgbstdn_stst_code)
       -- and k.pidm = 145809
        ---
        UNION
        ----
        select /*+Parallel(8)*/ distinct
                case
                        when smralib_area_desc like 'Servicio%' then TO_NUMBER (SUBSTR (smralib_area,9,2))+1
                        when (smralib_area_desc like ('Taller%') OR smralib_area_desc like ('CERTIFICATION%')) then TO_NUMBER (SUBSTR (smralib_area,9,2))+1
                       else TO_NUMBER (SUBSTR (smrarul_area, 9, 2))
                end  per,  ---
                smrpaap_area area, ---
                    null nombre_area, ---
                    p_regla,
                    smrarul_subj_code||smrarul_crse_numb_low materia, ---
                     scrsyln_long_course_title nombre_mat, ---
                     null calif,  ---
                     'PC' ,  ---
                     smracaa_rule regla, ---
                     null origen, ---
                     null fecha, --
                     k.pidm ,
                     K.PROGRAMA
        from smrarul
        join smralib on smralib_area = smrarul_area
        join smracaa on smracaa_area = smralib_area
                and smracaa_rule = smrarul_key_rule
                and SMRACAA_TERM_CODE_EFF=SMRARUL_TERM_CODE_EFF
        join sorlcur on SORLCUR_TERM_CODE_CTLG = SMRACAA_TERM_CODE_EFF
-- and sorlcur_pidm = 97879
        join spriden on spriden_pidm = sorlcur_pidm and spriden_change_ind is null
        join (Select distinct sgbstdn_pidm pidm, programa , REL_PROGRAMAXALUMNO_no_regla regla, PERIODO_CATALOGO
                 from REL_PROGRAMAXALUMNO
                 Where REL_PROGRAMAXALUMNO_no_Regla = p_regla
            ) k on k.pidm = sorlcur_pidm  and k.regla = p_regla and k.programa = sorlcur_program And SORLCUR_TERM_CODE_CTLG = k.PERIODO_CATALOGO
        join smrpaap on   smrpaap_area = smracaa_area and
                smrpaap_term_code_eff = k.periodo_catalogo
                and smrpaap_program = k.programa
        join sgbstdn s on s.sgbstdn_pidm = spriden_pidm and
                s.sgbstdn_program_1=smrpaap_program
        join scrsyln on scrsyln_subj_code=smrarul_subj_code and
                scrsyln_crse_numb=smrarul_crse_numb_low
        left join zstpara on zstpara_mapa_id='MAESTRIAS_BIM' and
                zstpara_param_id=sgbstdn_program_1 and
                zstpara_param_desc=k.periodo_catalogo
        Where Exists(Select 1 from smbagen  --solo areas activas  OLC
                        where smrpaap_area          = smbagen_area and
                            SMBAGEN_TERM_CODE_EFF   = SMRPAAP_TERM_CODE_EFF and
                            SMBAGEN_ACTIVE_IND='Y'
                     )
                     ------------
           -- and k.pidm = 145809
          and SMRACAA_TERM_CODE_EFF = k.periodo_catalogo
        and    Exists(SElect 1 from stvstst where stvstst_code=sgbstdn_stst_code)
        and    SMRARUL_SUBJ_CODE||SMRARUL_CRSE_NUMB_LOW not in ('L1HB401','L1HB402','L1HB403','L1HB404','L1HB405','L1HP401','UTEL001')
        and   SMRARUL_SUBJ_CODE||SMRARUL_CRSE_NUMB_LOW not in
                    (select ZSTPARA_PARAM_VALOR from ZSTPARA where ZSTPARA_MAPA_ID='NOVER_MAT_DASHB'
                          and spriden_pidm in (select spriden_pidm from spriden where spriden_id=ZSTPARA_PARAM_ID))
        and (SMRARUL_SUBJ_CODE, SMRARUL_CRSE_NUMB_LOW) not in (select ssbsect_subj_code, ssbsect_crse_numb
                                                    from  sfrstcr, smrprle, ssbsect, spriden  --agregado para materias EC y aprobadas sin rolar
                                                   where  smrprle_program=k.programa
                                                     and  sfrstcr_pidm=k.pidm  and (sfrstcr_grde_code is null or sfrstcr_grde_code is not null)  and sfrstcr_rsts_code='RE'
                                                     and  spriden_pidm=sfrstcr_pidm and spriden_change_ind is null
                                                     and  ssbsect_term_code=sfrstcr_term_code
                                                     and  ssbsect_crn=sfrstcr_crn);

Cursor c_avance_m    is
            Select * from avance_O t
            where prono_regla=p_regla
                and    (  (area not in (select smriecc_area from smriecc) and area not in (select smriemj_area from smriemj)) or
                                   (area in (select smriemj_area from smriemj
                                           where smriemj_majr_code= ( select distinct SORLFOS_MAJR_CODE
                                                                         from  sorlcur cu, sorlfos ss
                                                                        where cu.sorlcur_pidm= Ss.SORLfos_PIDM
                                                                          and   cu.SORLCUR_SEQNO  = ss.SORLFOS_LCUR_SEQNO
                                                                          and   cu.sorlcur_pidm=t.pidm_alu
                                                                          and   SORLCUR_LMOD_CODE = 'LEARNER'
                                                                          and   SORLFOS_LFST_CODE = 'MAJOR'
                                                                          and   cu.SORLCUR_SEQNO in (select max(SORLCUR_SEQNO) from sorlcur ss
                                                                                                      where cu.SORLCUR_PIDM=ss.sorlcur_pidm
                                                                                                        and cu.sorlcur_lmod_code=ss.sorlcur_lmod_code
                                                                                                        and ss.sorlcur_program =t.programa)
                                                                            and   cu.SORLCUR_TERM_CODE in (select max(SORLCUR_TERM_CODE) from sorlcur ss
                                                                                                            where cu.SORLCUR_PIDM=ss.sorlcur_pidm
                                                                                                              and cu.sorlcur_lmod_code=ss.sorlcur_lmod_code
                                                                                                              and ss.sorlcur_program =t.programa)
                                                                            and  SORLCUR_CACT_CODE=SORLFOS_CACT_CODE
                                                                            and   sorlcur_program   =t.programa
                                                                       )    )
                and area not in (select smriecc_area from smriecc)) or
                 (area in (select smriecc_area from smriecc where smriecc_majr_code_conc in
                                                     ( select distinct SORLFOS_MAJR_CODE
                                                         from  sorlcur cu, sorlfos ss
                                                          where cu.sorlcur_pidm= Ss.SORLfos_PIDM
                                                            and   cu.SORLCUR_SEQNO  = ss.SORLFOS_LCUR_SEQNO
                                                            and   cu.SORLCUR_SEQNO in (select max(SORLCUR_SEQNO) from sorlcur ss
                                                                                        where cu.SORLCUR_PIDM=ss.sorlcur_pidm
                                                                                          and cu.sorlcur_lmod_code=ss.sorlcur_lmod_code
                                                                                          and ss.sorlcur_program =t.programa )
                                                            and   cu.sorlcur_pidm=t.pidm_alu
                                                            and   SORLCUR_LMOD_CODE = 'LEARNER'
                                                            and   SORLFOS_LFST_CODE = 'CONCENTRATION'
                                                            and  SORLCUR_CACT_CODE=SORLFOS_CACT_CODE
                                                            and   sorlcur_program   =t.programa
                                                             ) )) )
--                    and (materia) not in (select SHRTCKN_SUBJ_CODE||SHRTCKN_CRSE_NUMB  from shrtckn where shrtckn_pidm=t.pidm_alu )
                    and (materia) not in (select SHRTRCE_SUBJ_CODE||SHRTRCE_CRSE_NUMB  from SHRTRCE where SHRTRCE_pidm=t.pidm_alu )
                    and (materia) not in (select SHRTRTK_SUBJ_CODE_INST||SHRTRTK_CRSE_NUMB_INST  from SHRTRTK where SHRTRTK_pidm=t.pidm_alu ) ;

BEGIN

    p_track_prono(p_regla,'Inicia p_materias_x_cursar avance_O');
    begin
        Delete from avance_O where prono_regla=p_regla;
        commit;
        Delete from tmp_pob_calif where regla=p_regla;
        commit;
    end;
    p_track_prono(p_regla,'Termine delete avanace_O');
    p_run_estadisticas('avance_o');
    p_run_estadisticas('tmp_pob_calif');
    p_track_prono(p_regla,'Termina estadistic avance_o');

    Begin
        Open c_tmp_calif;
        Loop
            FETCH c_tmp_calif BULK COLLECT into la_tmp_calif limit 10000;
            begin
                FORALL i in 1..la_tmp_calif.count save EXCEPTIONS
                    insert into tmp_pob_calif VALUES la_tmp_calif(i);
                Commit;
            EXCEPTION WHEN Others Then
                p_track_prono(p_regla,'Error For All Insert avanace_O'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
            end;
            Exit WHEN c_tmp_calif%NotFound;
        end loop;
        Commit;
        CLOSE c_tmp_calif;
--        p_track_prono(p_regla,'Termina BULK Collect tmp_pob_calif');

    exception WHEN others THEN
        dbms_output.put_line('Error en  Insert tmp_pob_calif:'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
        p_track_prono(p_regla,'Error en  Insert tmp_pob_calif:'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
    End;
    p_track_prono(p_regla,'Termina BULK Collect tmp_pob_calif, inicia avance_O');



    Begin
        Open c_avance_o;
        Loop
            FETCH c_avance_o BULK COLLECT into la_avance_o limit 10000;
            begin
                FORALL i in 1..la_avance_o.count save EXCEPTIONS
                    insert into avance_O VALUES la_avance_o(i);
                Commit;
            EXCEPTION WHEN Others Then
                p_track_prono(p_regla,'Error For All Insert avanace_O'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
            end;
            Exit WHEN c_avance_o%NotFound;
        end loop;
        Commit;
        CLOSE c_avance_o;
--        p_track_prono(p_regla,'Termina BULK Collect avance_O');

    exception WHEN others THEN
        dbms_output.put_line('Error en  Insert avance_O:'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
        p_track_prono(p_regla,'Error en  Insert avance_O:'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
    End;
    p_track_prono(p_regla,'Termina BULK Collect avance_O, inicia avance_m');

--    p_track_prono(p_regla,'Inicia  avance_m');
    begin
        Delete from avance_M where prono_regla=p_regla;
        commit;
    end;
    p_track_prono(p_regla,'Termine delete avanace_m');
    p_run_estadisticas('avance_m');
    p_track_prono(p_regla,'Termina estadistic avance_m');

    BEGIN
        Open c_avance_m;
        Loop
            FETCH c_avance_m BULK COLLECT into la_avance_m limit 10000;
            begin
                FORALL i in 1..la_avance_m.count save EXCEPTIONS
                    insert into avance_m VALUES la_avance_m(i);
                Commit;
            EXCEPTION WHEN Others Then
                p_track_prono(p_regla,'Error For All Insert avanace_m'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
            end;
            Exit WHEN c_avance_m%NotFound;
        end loop;
        Commit;
        CLOSE c_avance_m;
        p_track_prono(p_regla,'Termina BULK Collect avance_m');

    exception WHEN others THEN
        dbms_output.put_line('Error en  Insert avance_M:'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
        p_track_prono(p_regla,'Error en  Insert avance_M:'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
    END;
    p_run_estadisticas('avance_m');

    p_track_prono(p_regla,'Termina p_materias_x_cursar avance_m');

end;

--Jpg@Create@Feb22 Procedimiento Masivo para pronosticar a nivel regla
--Sustituye al pkg_valida_prono materias faltantes
PROCEDURE p_materias_faltantes (p_regla number) IS
type array_object is table of tmp_faltantes%rowtype
    index by binary_integer;

type array_object_q is table of tmp_prog_mat%rowtype
    index by binary_integer;

  la_tmp_faltantes array_object;
  la_tmp_prog_mat array_object_q;

Cursor c_tmp_prog_mat is
    select  /*+Parallel(8)*/ Distinct pidm_alu, programa, per, area, x.nombre_area, materia, nombre_mat,
                       case when calif='1' then cal_origen
                                when apr='EC' then null
                        else calif
                        end calif, apr, regla, null n_area,
                       case when substr(materia,1,2)='L3' then 5
                        else 1
                       end ord,fecha
                       ,x.prono_regla
                 from  sgbstdn y, avance_m x
                   where  y.sgbstdn_pidm=x.pidm_alu
                    and    y.sgbstdn_program_1=x.programa
                    and     x.prono_regla = p_Regla
                    and    y.sgbstdn_term_code_eff in (select max(x.sgbstdn_term_code_eff) from sgbstdn x
                                                      where x.sgbstdn_pidm=y.sgbstdn_pidm
                                                        and x.sgbstdn_program_1=y.sgbstdn_program_1)
                    and     x.area not in (select smriecc_area from smriecc)
                    and   area not in (select smriemj_area from smriemj)
                   and    (to_number(x.calif) in (select max(to_number(xx.calif)) from avance_m xx
                              where x.materia=xx.materia
                              -- and  x.pidm_alu=sgbstdn_pidm  ----cambio
                              and  x.pidm_alu=xx.pidm_alu   ---- cambio
                              and x.prono_regla=xx.prono_regla
                          ) or x.calif is null)
        union
        select /*+Parallel(8)*/ distinct pidm_alu, programa, per, area, nombre_area, materia, nombre_mat,    --extraordinarios en curso por aplicarse OLC
        case when calif='1' then cal_origen
                when apr='EC' then null
        else calif
        end calif, apr, regla, null n_area,
        case when substr(materia,1,2)='L3' then 5
        else 1
        end ord, fecha
                       ,x.prono_regla
                    from  sgbstdn y, avance_m x
                   where   x.pidm_alu=y.sgbstdn_pidm
                    and     x.prono_regla = p_Regla
                    and     x.apr='EC'
                    and     y.sgbstdn_program_1=programa
                    and     y.sgbstdn_term_code_eff in (select max(x.sgbstdn_term_code_eff) from sgbstdn x
                                                       where x.sgbstdn_pidm=y.sgbstdn_pidm
                                                         and x.sgbstdn_program_1=y.sgbstdn_program_1)
                   and     x.area not in (select smriecc_area from smriecc)
                   and   x.area not in (select smriemj_area from smriemj);

Cursor c_tmp_prog_mat_2 is
        select /*+Parallel(8)*/ pidm_alu, programa, per, area, nombre_area, materia, nombre_mat,
                    case when calif='1' then cal_origen
                           when apr='EC' then null
                    else calif
                    end calif, apr, regla, stvmajr_desc n_area, 2 ord, fecha
                       ,x.prono_regla
                    from  sgbstdn y, avance_m x, smriemj, stvmajr
                   where   x.prono_regla = p_Regla
                    and     x.pidm_alu=sgbstdn_pidm
                    and     y.sgbstdn_program_1=x.programa
                    and     y.sgbstdn_term_code_eff in (select max(x.sgbstdn_term_code_eff) from sgbstdn x
                                                       where x.sgbstdn_pidm=y.sgbstdn_pidm
                                                         and x.sgbstdn_program_1=y.sgbstdn_program_1)
                   and    x.area=smriemj_area
                   and smriemj_majr_code= (select distinct SORLFOS_MAJR_CODE
                                            from  sorlcur cu, sorlfos ss
                                            where cu.sorlcur_pidm= Ss.SORLfos_PIDM
                                            and   cu.SORLCUR_SEQNO  = ss.SORLFOS_LCUR_SEQNO
                                            and   cu.sorlcur_pidm=x.pidm_alu
                                            and   cu.SORLCUR_LMOD_CODE = 'LEARNER'
                                            and   ss.SORLFOS_LFST_CODE = 'MAJOR'
                                            and   cu.SORLCUR_SEQNO in (select max(SORLCUR_SEQNO) from sorlcur ss
                                                                        where cu.SORLCUR_PIDM=ss.sorlcur_pidm
                                                                          and cu.sorlcur_lmod_code=ss.sorlcur_lmod_code
                                                                          and ss.sorlcur_program =x.programa)
                                            and   cu.SORLCUR_TERM_CODE in (select max(SORLCUR_TERM_CODE) from sorlcur ss
                                                                            where cu.SORLCUR_PIDM=ss.sorlcur_pidm
                                                                              and cu.sorlcur_lmod_code=ss.sorlcur_lmod_code
                                                                              and ss.sorlcur_program =x.programa)
                                            and  cu.SORLCUR_CACT_CODE=ss.SORLFOS_CACT_CODE  --  modifica olc 19.06.2018 cuplicidad
                                            and   cu.sorlcur_program   =x.programa
                                          )
                   and    x.area not in (select smriecc_area from smriecc)
                   and    smriemj_majr_code=stvmajr_code
                   and    (to_number(x.calif) in (select max(to_number(xx.calif)) from avance_m xx
                                                  where x.materia=xx.materia
                                                  and   x.pidm_alu=xx.pidm_alu
                                                    and x.prono_regla=xx.prono_regla
                                                  ) or x.calif is null)
        union
          select /*+Parallel(8)*/ distinct pidm_alu, programa, per, area, nombre_area, materia, nombre_mat,
                case when calif='1' then cal_origen
                         when apr='EC' then null
                 else calif
                end  calif, apr, regla, smralib_area_desc n_area, 3 ord, fecha
                       ,x.prono_regla
                    from sgbstdn y, avance_m x ,smralib, smriecc a
                   where  x.prono_regla = p_Regla
                    -- and sgbstdn_pidm=x.pidm_alu
                    and   x.pidm_alu=sgbstdn_pidm
                    and   Y.sgbstdn_program_1=x.programa
                    and   Y.sgbstdn_term_code_eff in (select max(sgbstdn_term_code_eff) from sgbstdn x
                                                     where x.sgbstdn_pidm=y.sgbstdn_pidm
                                                       and x.sgbstdn_program_1=y.sgbstdn_program_1)
                   and    x.area=smralib_area
                   and    x.area=smriecc_area
                   and     smriecc_majr_code_conc in (select unique SORLFOS_MAJR_CODE
                                                     from  sorlcur cu, sorlfos ss
                                                      where cu.sorlcur_pidm= Ss.SORLfos_PIDM
                                                        and   cu.SORLCUR_SEQNO  = ss.SORLFOS_LCUR_SEQNO
                                                        and   cu.sorlcur_pidm=x.pidm_alu
                                                        and   SORLCUR_LMOD_CODE = 'LEARNER'
                                                        and   SORLFOS_LFST_CODE = 'CONCENTRATION'--CONCENTRATION
                                                        and  SORLCUR_CACT_CODE=SORLFOS_CACT_CODE --  modifica olc 19.06.2018 duplicidad
                                                        and   sorlcur_program   =x.programa
                                                         )
                   and    (to_number(x.calif) in (select max(to_number(xx.calif)) from avance_m xx
                                  where x.materia=xx.materia
                                  and   x.pidm_alu=xx.pidm_alu
                                  and x.prono_regla=xx.prono_regla
                          ) or x.calif is null)
--                                                                          or calif='1')   -----------------
                   and    (x.fecha in (select distinct xx.fecha from avance_m xx
                              where x.materia=xx.materia
                              and   x.pidm_alu=xx.pidm_alu
                          ) or x.fecha is null);

Cursor c_tmp_faltantes is
        select /*+Parallel(8)*/
                spriden_id matricula,
                -- spriden_first_name||' '||replace(spriden_last_name,'/',' ') nombres ,
                so.sorlcur_program programa,
                stvstst_desc estatus,
                  avance1.per,
                  avance1.area,
                  -- case when substr(spriden_id,1,2)='08' then ' '
                  -- else
                      -- case when substr(avance1.materia,1,4)='L1HB' then 'MATERIAS INTRODUCTORIAS'
                      -- else upper(avance1.nombre_area)
                      -- end
                  -- end   "nombre_area",
                  avance1.materia,
                  avance1.nombre_mat,
                   avance1.calif,
                   avance1.ord,
                 case when avance1.apr='AP' then null
                     else apr
                     end tipo,
                     case when sztdtec_incorporante='SEGEM' then null
                     else n_area
                     end n_area,
                 -- case when avance1.per < 7 then 1
                       -- else 2
                 -- end hoja,
               ----------------------------------------
               CASE  when  (select  distinct SMBPGEN_REQ_COURSES_I_TRAD  from SMBPGEN
                                                   where SMBPGEN_program=avance1.programa
                                                       and SMBPGEN_TERM_CODE_EFF=(select distinct SORLCUR_TERM_CODE_CTLG from sorlcur s
                                                                                   where s.sorlcur_pidm=avance1.pidm_alu
                                                                                     and s.sorlcur_program=avance1.programa and s.sorlcur_lmod_code='LEARNER'
                                                                                     and s.SORLCUR_SEQNO = (select max(ss.SORLCUR_SEQNO) from sorlcur ss
                                                                                                             where ss.sorlcur_pidm=avance1.pidm_alu
                                                                                                               and ss.sorlcur_program=avance1.programa
                                                                                                               and ss.sorlcur_lmod_code='LEARNER'))) ='40' then
                                                                                                                                     (select count(unique materia)  from avance_m x
                                                                                                                                       where  apr in ('AP','EQ')
                                                                                                                                         and    x.pidm_alu=avance1.pidm_alu and prono_regla=p_regla
                                                                                                                                         and    area not in  (select ZSTPARA_PARAM_VALOR from ZSTPARA where ZSTPARA_MAPA_ID='ORDEN_CUATRIMES')
                                                                                                                                         and     calif  in (select max(to_number(calif)) from avance_m xx
                                                                                                                                                                 where x.materia=xx.materia
                                                                                                                                                                   and x.pidm_alu=xx.pidm_alu
                                                                                                                                                             )
                                                                                                                                          and CALIF!=0
                                and     (  (area not in (select smriecc_area from smriecc) and area not in (select smriemj_area from smriemj)) or   -- VALIDA LA EXITENCIA EN SMAALIB
                                                               (area in (select smriemj_area from smriemj
                                                                       where smriemj_majr_code= ( select distinct SORLFOS_MAJR_CODE
                                                                                                     from  sorlcur cu, sorlfos ss
                                                                                                      where cu.sorlcur_pidm= Ss.SORLfos_PIDM
                                                                                                        and   cu.SORLCUR_SEQNO  = ss.SORLFOS_LCUR_SEQNO
                                                                                                        and   cu.sorlcur_pidm=avance1.pidm_alu
                                                                                                        and   SORLCUR_LMOD_CODE = 'LEARNER'
                                                                                                        and   SORLFOS_LFST_CODE = 'MAJOR'
                                                                                                        and   cu.SORLCUR_SEQNO in (select max(SORLCUR_SEQNO) from sorlcur ss
                                                                                                                                    where cu.SORLCUR_PIDM=ss.sorlcur_pidm
                                                                                                                                      and cu.sorlcur_lmod_code=ss.sorlcur_lmod_code
                                                                                                                                      and ss.sorlcur_program =avance1.programa)
                                                                                                        and   cu.SORLCUR_TERM_CODE in (select max(SORLCUR_TERM_CODE) from sorlcur ss
                                                                                                               where cu.SORLCUR_PIDM=ss.sorlcur_pidm
                                                                                                                  and cu.sorlcur_lmod_code=ss.sorlcur_lmod_code
                                                                                                                  and ss.sorlcur_program =avance1.programa)
                                                                                                        and  SORLCUR_CACT_CODE=SORLFOS_CACT_CODE
                                                                                                        and   sorlcur_program   =avance1.programa
                                                                                                   )    )
                                  and area not in (select smriecc_area from smriecc)) or                   -- VALIDA LA EXITENCIA EN SMAALIB
                                                             (area in (select smriecc_area from smriecc where smriecc_majr_code_conc in
                                                                                                 ( select distinct SORLFOS_MAJR_CODE
                                                                                                     from  sorlcur cu, sorlfos ss
                                                                                                      where cu.sorlcur_pidm= Ss.SORLfos_PIDM
                                                                                                        and   cu.SORLCUR_SEQNO  = ss.SORLFOS_LCUR_SEQNO
                                                                                                        and   cu.SORLCUR_SEQNO in (select max(SORLCUR_SEQNO) from sorlcur ss
                                                                                                                                     where cu.SORLCUR_PIDM=ss.sorlcur_pidm
                                                                                                                                       and cu.sorlcur_lmod_code=ss.sorlcur_lmod_code
                                                                                                                                       and ss.sorlcur_program =avance1.programa )
                                                                                                        and   cu.sorlcur_pidm=avance1.pidm_alu
                                                                                                        and   SORLCUR_LMOD_CODE = 'LEARNER'
                                                                                                        and   SORLFOS_LFST_CODE = 'CONCENTRATION'
                                                                                                        and  SORLCUR_CACT_CODE=SORLFOS_CACT_CODE
                                                                                                        and   sorlcur_program   =avance1.programa
                                                                                                         ) )) )              )
                              when  (select  distinct SMBPGEN_REQ_COURSES_I_TRAD  from SMBPGEN
                                                   where SMBPGEN_program=avance1.programa
                                                       and SMBPGEN_TERM_CODE_EFF=(select distinct SORLCUR_TERM_CODE_CTLG from sorlcur s
                                                                                                             where  s.sorlcur_pidm=avance1.pidm_alu
                                                                                                                  and s.sorlcur_program=avance1.programa and s.sorlcur_lmod_code='LEARNER'
                                                                                                                  and s.SORLCUR_SEQNO = (select max(ss.SORLCUR_SEQNO) from sorlcur ss
                                                                                                                                          where ss.sorlcur_pidm=avance1.pidm_alu
                                                                                                                                            and ss.sorlcur_program=avance1.programa
                                                                                                                                            and ss.sorlcur_lmod_code='LEARNER'))) ='42' then
                                                                                                                                                           (select count(unique materia)  from avance_m x
                                                                                                                                                             where  apr in ('AP','EQ')
                                                                                                                                                               and  x.pidm_alu=avance1.pidm_alu and prono_regla=p_regla
                                                                                                                                                               and  area not in  ((select ZSTPARA_PARAM_VALOR from ZSTPARA where ZSTPARA_MAPA_ID='ORDEN_CUATRIMES' and substr(ZSTPARA_PARAM_VALOR,5,2)<>'TT' ) )
                                                                                                                                                               and  calif  in (select max(to_number(calif)) from avance_m xx
                                                                                                                                                                                where x.materia=xx.materia
                                                                                                                                                                                  and x.pidm_alu=xx.pidm_alu
                                                                                                                                                                               )
                                                                                                                                                               and CALIF!=0
                                and     (  (area not in (select smriecc_area from smriecc) and area not in (select smriemj_area from smriemj)) or   -- VALIDA LA EXITENCIA EN SMAALIB
                                                               (area in (select smriemj_area from smriemj
                                                                       where smriemj_majr_code= ( select distinct SORLFOS_MAJR_CODE
                                                                                                     from  sorlcur cu, sorlfos ss
                                                                                                      where cu.sorlcur_pidm= Ss.SORLfos_PIDM
                                                                                                        and   cu.SORLCUR_SEQNO  = ss.SORLFOS_LCUR_SEQNO
                                                                                                        and   cu.sorlcur_pidm=avance1.pidm_alu
                                                                                                        and   SORLCUR_LMOD_CODE = 'LEARNER'
                                                                                                        and   SORLFOS_LFST_CODE = 'MAJOR'
                                                                                                        and   cu.SORLCUR_SEQNO in (select max(SORLCUR_SEQNO) from sorlcur ss
                                                                                                                                    where cu.SORLCUR_PIDM=ss.sorlcur_pidm
                                                                                                                                      and cu.sorlcur_lmod_code=ss.sorlcur_lmod_code
                                                                                                                                      and ss.sorlcur_program =avance1.programa)
                                                                                                        and   cu.SORLCUR_TERM_CODE in (select max(SORLCUR_TERM_CODE) from sorlcur ss
                                                                                                               where cu.SORLCUR_PIDM=ss.sorlcur_pidm
                                                                                                                  and cu.sorlcur_lmod_code=ss.sorlcur_lmod_code
                                                                                                                  and ss.sorlcur_program =avance1.programa)
                                                                                                        and  SORLCUR_CACT_CODE=SORLFOS_CACT_CODE
                                                                                                        and   sorlcur_program   =avance1.programa
                                                                                                   )    )
                                  and area not in (select smriecc_area from smriecc)) or                   -- VALIDA LA EXITENCIA EN SMAALIB
                                                             (area in (select smriecc_area from smriecc where smriecc_majr_code_conc in
                                                                                                 ( select distinct SORLFOS_MAJR_CODE
                                                                                                     from  sorlcur cu, sorlfos ss
                                                                                                      where cu.sorlcur_pidm= Ss.SORLfos_PIDM
                                                                                                        and   cu.SORLCUR_SEQNO  = ss.SORLFOS_LCUR_SEQNO
                                                                                                        and   cu.SORLCUR_SEQNO in (select max(SORLCUR_SEQNO) from sorlcur ss
                                                                                                                                     where cu.SORLCUR_PIDM=ss.sorlcur_pidm
                                                                                                                                       and cu.sorlcur_lmod_code=ss.sorlcur_lmod_code
                                                                                                                                       and ss.sorlcur_program =avance1.programa )
                                                                                                        and   cu.sorlcur_pidm=avance1.pidm_alu
                                                                                                        and   SORLCUR_LMOD_CODE = 'LEARNER'
                                                                                                        and   SORLFOS_LFST_CODE = 'CONCENTRATION'
                                                                                                        and  SORLCUR_CACT_CODE=SORLFOS_CACT_CODE
                                                                                                        and   sorlcur_program   =avance1.programa
                                                                                                         ) )) )              )
                        ELSE
                              (select count(unique materia)  from avance_m x
                                 where  apr in ('AP','EQ')
                                 and    x.pidm_alu=avance1.pidm_alu and prono_regla=p_regla
                                 and    area not in  (select ZSTPARA_PARAM_VALOR from ZSTPARA where ZSTPARA_MAPA_ID='ORDEN_CUATRIMES')
                                 and     calif  in (select max(to_number(calif)) from avance_m xx
                                                        where x.materia=xx.materia
                                                        and   x.pidm_alu=xx.pidm_alu
                                                      )
                                                        and CALIF!=0
                                 and     (  (area not in (select smriecc_area from smriecc) and area not in (select smriemj_area from smriemj)) or   -- VALIDA LA EXITENCIA EN SMAALIB
                                                               (area in (select smriemj_area from smriemj
                                                                       where smriemj_majr_code= ( select distinct SORLFOS_MAJR_CODE
                                                                                                     from  sorlcur cu, sorlfos ss
                                                                                                      where cu.sorlcur_pidm= Ss.SORLfos_PIDM
                                                                                                        and   cu.SORLCUR_SEQNO  = ss.SORLFOS_LCUR_SEQNO
                                                                                                        and   cu.sorlcur_pidm=avance1.pidm_alu
                                                                                                        and   SORLCUR_LMOD_CODE = 'LEARNER'
                                                                                                        and   SORLFOS_LFST_CODE = 'MAJOR'
                                                                                                        and   cu.SORLCUR_SEQNO in (select max(SORLCUR_SEQNO) from sorlcur ss
                                                                                                                                    where cu.SORLCUR_PIDM=ss.sorlcur_pidm
                                                                                                                                      and cu.sorlcur_lmod_code=ss.sorlcur_lmod_code
                                                                                                                                      and ss.sorlcur_program =avance1.programa)
                                                                                                        and   cu.SORLCUR_TERM_CODE in (select max(SORLCUR_TERM_CODE) from sorlcur ss
                                                                                                               where cu.SORLCUR_PIDM=ss.sorlcur_pidm
                                                                                                                  and cu.sorlcur_lmod_code=ss.sorlcur_lmod_code
                                                                                                                  and ss.sorlcur_program =avance1.programa)
                                                                                                        and  SORLCUR_CACT_CODE=SORLFOS_CACT_CODE
                                                                                                        and   sorlcur_program   =avance1.programa
                                                                                                   )    )
                                  and area not in (select smriecc_area from smriecc)) or                   -- VALIDA LA EXITENCIA EN SMAALIB
                                                             (area in (select smriecc_area from smriecc where smriecc_majr_code_conc in
                                                                                                 ( select distinct SORLFOS_MAJR_CODE
                                                                                                     from  sorlcur cu, sorlfos ss
                                                                                                      where cu.sorlcur_pidm= Ss.SORLfos_PIDM
                                                                                                        and   cu.SORLCUR_SEQNO  = ss.SORLFOS_LCUR_SEQNO
                                                                                                        and   cu.SORLCUR_SEQNO in (select max(SORLCUR_SEQNO) from sorlcur ss
                                                                                                                                     where cu.SORLCUR_PIDM=ss.sorlcur_pidm
                                                                                                                                       and cu.sorlcur_lmod_code=ss.sorlcur_lmod_code
                                                                                                                                       and ss.sorlcur_program =avance1.programa )
                                                                                                        and   cu.sorlcur_pidm=avance1.pidm_alu
                                                                                                        and   SORLCUR_LMOD_CODE = 'LEARNER'
                                                                                                        and   SORLFOS_LFST_CODE = 'CONCENTRATION'
                                                                                                        and  SORLCUR_CACT_CODE=SORLFOS_CACT_CODE
                                                                                                        and   sorlcur_program   =avance1.programa
                                                                                                         ) )) )              )
                  end  aprobadas_curr,
                 (select count(unique materia) from avance_m x
                 where  apr in ('EC')
                 and    x.pidm_alu=avance1.pidm_alu and prono_regla=p_regla
                 and    area not in (select ZSTPARA_PARAM_VALOR from ZSTPARA where ZSTPARA_MAPA_ID='ORDEN_CUATRIMES' and substr(ZSTPARA_PARAM_VALOR,5,2)<>'TT' )
                                              ) curso_curr,
              (select  distinct SMBPGEN_REQ_COURSES_I_TRAD  from SMBPGEN    -- CAMBIO DE  MODO DE EXTRAER EL TOTAL DE MATERIAS DE  SMA'UTLLIATFED'
                            where SMBPGEN_program=avance1.programa
                                and SMBPGEN_TERM_CODE_EFF = (select distinct SORLCUR_TERM_CODE_CTLG from sorlcur
                                                              where  sorlcur_pidm=avance1.pidm_alu
                                                                and sorlcur_program=avance1.programa and sorlcur_lmod_code='LEARNER'
                                                                and SORLCUR_SEQNO = (select max(ss.SORLCUR_SEQNO) from sorlcur ss
                                                                                        where ss.sorlcur_pidm=avance1.pidm_alu
                                                                                         and ss.sorlcur_program=avance1.programa and ss.sorlcur_lmod_code='LEARNER'))) total_curr,
                p_regla,
                get_materia_padre(avance1.materia) materia_padre,
                avance1.pidm_alu
                from spriden, sztdtec, sorlcur so, sgbstdn a, stvstst,
                (SELECT /*+Parallel(8)*/pidm_alu, programa, per, area, nombre_area, materia, nombre_mat, calif, apr, regla,  n_area, ord, MAX(fecha)
                   FROM  tmp_prog_mat
                   Where prono_regla=p_regla
                    GROUP BY pidm_alu, programa, per, area, nombre_area, materia, nombre_mat, calif, apr, regla,  n_area,ord
                )  avance1
                where  spriden_pidm=avance1.pidm_alu
                and   sorlcur_pidm= spriden_pidm
                and   SORLCUR_LMOD_CODE = 'LEARNER'
                and   SORLCUR_SEQNO in (select max(SORLCUR_SEQNO) from sorlcur ss where so.SORLCUR_PIDM=ss.sorlcur_pidm
                                           and so.sorlcur_lmod_code=ss.sorlcur_lmod_code
                                           and ss.sorlcur_program =avance1.programa)
                and     spriden_change_ind is null
                and     sgbstdn_pidm=spriden_pidm
                and     sgbstdn_program_1=avance1.programa
                and     sgbstdn_term_code_eff in (select max(sgbstdn_term_code_eff) from sgbstdn b
                                                   where a.sgbstdn_pidm=b.sgbstdn_pidm
                                                     and a.sgbstdn_program_1=b.sgbstdn_program_1)
                and     sztdtec_program=sgbstdn_program_1
                and     sztdtec_status='ACTIVO'
                and     SZTDTEC_CAMP_CODE=SORLCUR_CAMP_CODE
                and     SZTDTEC_TERM_CODE=SORLCUR_TERM_CODE_CTLG --SGBSTDN_TERM_CODE_CTLG_1
                and     sgbstdn_stst_code=stvstst_code;

BEGIN

    p_track_prono(p_regla,'Inicia p_materias_faltantes tmp_faltantes');

    begin
        Delete from tmp_faltantes where regla=p_regla;
        commit;
        Delete from tmp_prog_mat where prono_regla=p_regla;
        commit;
    end;

    p_track_prono(p_regla,'Termina Delete tmp_faltantes');

    p_run_estadisticas('avance_m');
    p_run_estadisticas('tmp_faltantes');
    p_run_estadisticas('tmp_prog_mat');
    p_track_prono(p_regla,'Termina Estadistinct Inicia llenado tmp_prog_mat_1');
    BEGIN
        Open c_tmp_prog_mat;
        Loop
            FETCH c_tmp_prog_mat BULK COLLECT into la_tmp_prog_mat limit 10000;
            begin
                FORALL i in 1..la_tmp_prog_mat.count save EXCEPTIONS
                    insert into tmp_prog_mat VALUES la_tmp_prog_mat(i);
                Commit;
            EXCEPTION WHEN Others Then
                p_track_prono(p_regla,'Error For All Insert tmp_prog_mat_1'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
            end;
            Exit WHEN c_tmp_prog_mat%NotFound;
        end loop;
        Commit;
        CLOSE c_tmp_prog_mat;
        p_track_prono(p_regla,'Termina BULK Collect tmp_prog_mat_1');


    exception WHEN others THEN
        dbms_output.put_line('Error en p_materias_faltantes Insert tmp_prog_mat:'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
            p_track_prono(p_regla,'Error en p_materias_faltantes Insert tmp_prog_mat:'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
    End;
    p_track_prono(p_regla,'Termina llenado, inicia llenado de tmp_prog_mat_2');

    BEGIN
        Open c_tmp_prog_mat_2;
        Loop
            FETCH c_tmp_prog_mat_2 BULK COLLECT into la_tmp_prog_mat limit 10000;
            begin
                FORALL i in 1..la_tmp_prog_mat.count save EXCEPTIONS
                    insert into tmp_prog_mat VALUES la_tmp_prog_mat(i);
                Commit;
            EXCEPTION WHEN Others Then
                p_track_prono(p_regla,'Error For All Insert tmp_prog_mat_2'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
            end;
            Exit WHEN c_tmp_prog_mat_2%NotFound;
        end loop;
        Commit;
        CLOSE c_tmp_prog_mat_2;
        p_track_prono(p_regla,'Termina BULK Collect tmp_prog_mat_2');


    exception WHEN others THEN
        dbms_output.put_line('Error en p_materias_faltantes Insert tmp_prog_mat:'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
            p_track_prono(p_regla,'Error en p_materias_faltantes Insert tmp_prog_mat:'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
    End;


    p_track_prono(p_regla,'Termina llenado, inicia llenado de tmp_faltantes');


    BEGIN
        Open c_tmp_faltantes;
        Loop
            FETCH c_tmp_faltantes BULK COLLECT into la_tmp_faltantes limit 1000;
            begin
                FORALL i in 1..la_tmp_faltantes.count save EXCEPTIONS
                    insert into tmp_faltantes VALUES la_tmp_faltantes(i);
                Commit;
            EXCEPTION WHEN Others Then
                p_track_prono(p_regla,'Error For All Insert tmp_faltantes'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
            end;
            Exit WHEN c_tmp_faltantes%NotFound;
        end loop;
        Commit;
        CLOSE c_tmp_faltantes;
        p_track_prono(p_regla,'Termina BULK Collect tmp_faltantes');


    exception WHEN others THEN
        dbms_output.put_line('Error en p_materias_faltantes Insert tmp_faltantes:'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
            p_track_prono(p_regla,'Error en p_materias_faltantes Insert tmp_faltantes:'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
    End;
    p_track_prono(p_regla,'Termina p_materias_faltantes tmp_faltantes');
END;
--
--
--Jpg@Modify@Mar22 PRoceso Masivo Materias_Faltantes_Lic
PROCEDURE    p_materias_lic(p_regla number) IS

type array_object_SEC is table of TMP_SEC_MATERIAS%rowtype
    index by binary_integer;

type array_object is table of TMP_FALTAN_LIC%rowtype
    index by binary_integer;

  la_TMP_FALTAN_LIC array_object;
  la_TMP_SEC_MATERIAS array_object_SEC;

Cursor c_TMP_SEC_MATERIAS is
  SELECT  DISTINCT SMRPCMT_PROGRAM
                                               AS PROGRAMA,
                                           SMRPCMT_TERM_CODE_EFF
                                               PERIODO,
                                           TO_NUMBER(SMRPCMT_TEXT_SEQNO)
                                               AS secuencia,
                                           NVL (SZTMACO_MATPADRE,
                                                REGEXP_SUBSTR (SMRPCMT_TEXT,
                                                               '[^|"]+',
                                                               1,
                                                               1))
                                               MATERIA_PADRE,
                                               p_regla
                             FROM SMRPCMT, SZTMACO
                            WHERE     1 = 1
                                  AND SMRPCMT_TEXT IS NOT NULL
                                  AND REGEXP_SUBSTR (SMRPCMT_TEXT,
                                                     '[^|"]+',
                                                     1,
                                                     1) = SZTMACO_MATHIJO(+)
                                  AND SMRPCMT_PROGRAM IN
                                          (SELECT DISTINCT PROGRAMA
                                             FROM REL_PROGRAMAXALUMNO
                                            WHERE REL_PROGRAMAXALUMNO_NO_REGLA = p_regla);

Cursor c_TMP_FALTAN_LIC is
                SELECT  /*+Parallel(8)*/ DISTINCT FAL.PER,
                                FAL.AREA,
                                FAL.MATERIA,
                                FAL.NOMBRE_MAT,
                                FAL.CALIFICA,
                                FAL.TIPO,
                                FAL.PIDM,
                                FAL.MATRICULA,
                                SEC.secuencia,
                                FAL.MATERIA_PADRE,
                                SMRARUL_SUBJ_CODE     SUBJ,
                                SMRARUL_CRSE_NUMB_LOW CRSE,
                                ALUMNO.CAMPUS,
                                ALUMNO.NIVEL,
                                FAL.REGLA,
                                ALUMNO.SP,
                                FAL.APROBADAS_CURR,
                                FAL.CURSO_CURR,
                                FAL.TOTAL_CURR
                  FROM TMP_FALTANTES  FAL
                       JOIN (SELECT DISTINCT SGBSTDN_PIDM                 PIDM,
                                             PROGRAMA                     PROGRAMA,
                                             CAMPUS,
                                             NIVEL,
                                             PERIODO_CATALOGO L_PERIODO_CTL,  --C.SORLCUR_TERM_CODE_CTLG     L_PERIODO_CTL,
                                             STUDY_PATH SP,     --C.SORLCUR_KEY_SEQNO          SP,
                                             REL_PROGRAMAXALUMNO_NO_REGLA REGLA
                               FROM REL_PROGRAMAXALUMNO
                              WHERE 1 = 1 AND REL_PROGRAMAXALUMNO_NO_REGLA = p_regla) ALUMNO
                           ON FAL.PIDM = ALUMNO.PIDM AND FAL.PROGRAMA = ALUMNO.PROGRAMA
                       JOIN TMP_SEC_MATERIAS SEC
                           ON     FAL.PROGRAMA = SEC.PROGRAMA
                              AND FAL.MATERIA_PADRE = SEC.MATERIA_PADRE
                              AND ALUMNO.L_PERIODO_CTL = SEC.PERIODO
                              and fal.regla = sec.regla
                      JOIN smrarul rul ON  rul.smrarul_subj_code|| rul.smrarul_crse_numb_low = fal.materia
                            and smrarul_area=fal.area
                 WHERE     1 = 1
                       AND FAL.REGLA = p_regla
                       AND MATERIA NOT LIKE 'SESO%'
                       AND MATERIA NOT LIKE 'OPT%'
                       AND MATERIA NOT IN ('L2DE147', 'L2DE131')
                       order by pidm, per;

BEGIN
    p_track_prono(p_regla,'Inicia p_materias_lic TMP_FALTAN_LIC');

    begin
        delete from TMP_SEC_MATERIAS where regla=p_regla;
        COMMIT;
        delete from TMP_FALTAN_LIC where regla=p_regla;
        commit;
    end;
    p_track_prono(p_regla,'termina delete  TMP_FALTAN_LIC');
    p_run_estadisticas('avance_m');
    p_run_estadisticas('tmp_faltantes');
    p_run_estadisticas('TMP_SEC_MATERIAS');
    p_run_estadisticas('TMP_FALTAN_LIC');

--llena secuencia de materias x programas
    p_track_prono(p_regla,'Termina estadisticas ');
      BEGIN
        Open c_TMP_SEC_MATERIAS;
        Loop
            FETCH c_TMP_SEC_MATERIAS BULK COLLECT into la_TMP_SEC_MATERIAS limit 10000;
            begin
                FORALL i in 1..la_TMP_SEC_MATERIAS.count save EXCEPTIONS
                    insert into TMP_SEC_MATERIAS VALUES la_TMP_SEC_MATERIAS(i);
            EXCEPTION WHEN Others Then
                p_track_prono(p_regla,'Error For All Insert TMP_SEC_MATERIAS'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
            end;
            commit;
            Exit WHEN c_TMP_SEC_MATERIAS%NotFound;
        end loop;
        Commit;
        CLOSE c_TMP_SEC_MATERIAS;

        p_track_prono(p_regla,'termina BULK Collect TMP_SEC_MATERIAS');

        COMMIT;

    Exception When Others THEN
        dbms_output.put_line('Error en TMP_FALTAN_LIC Insert TMP_SEC_MATERIAS:'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
        p_track_prono(p_regla,'Error en TMP_FALTAN_LIC Insert TMP_SEC_MATERIAS:'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
    END;
    p_run_estadisticas('TMP_SEC_MATERIAS');


--llena tmp_faltan_lic
    p_track_prono(p_regla,'Termina estadisticas TMP_FALTAN_LIC');
      BEGIN
        Open c_TMP_FALTAN_LIC;
        Loop
            FETCH c_TMP_FALTAN_LIC BULK COLLECT into la_TMP_FALTAN_LIC limit 10000;
            begin
                FORALL i in 1..la_TMP_FALTAN_LIC.count save EXCEPTIONS
                    insert into TMP_FALTAN_LIC VALUES la_TMP_FALTAN_LIC(i);
                Commit;
            EXCEPTION WHEN Others Then
                p_track_prono(p_regla,'Error For All Insert TMP_FALTAN_LIC'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
            end;
            commit;
            Exit WHEN c_TMP_FALTAN_LIC%NotFound;
        end loop;
        Commit;
        CLOSE c_TMP_FALTAN_LIC;

        p_track_prono(p_regla,'termina BULK Collect TMP_FALTAN_LIC');

        COMMIT;

    Exception When Others THEN
        dbms_output.put_line('Error en TMP_FALTAN_LIC Insert MATERIA_FALTANTE_LIC:'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
        p_track_prono(p_regla,'Error en TMP_FALTAN_LIC Insert MATERIA_FALTANTE_LIC:'||dbms_utility.format_error_backtrace||'SQLERRM:'||SQLERRM);
    END;
    p_run_estadisticas('TMP_FALTAN_LIC');

    p_track_prono(p_regla,'termina TMP_FALTAN_LIC');

END;

--Jpg@Create@Mar22 Procedimiento guarda mensaje dejando huella de procesamiento
--
PROCEDURE p_track_prono (p_regla number, p_msg varchar2) IS

BEGIN
    INSERT INTO TRACK_PRONO VALUES(
        TRACKPRONO.NEXTVAL,
        P_REGLA,
        P_MSG,
        SYSDATE,
        USER);

    COMMIT;

EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR EN P_TRACK_PRONO'||SQLERRM);

END;


PROCEDURE P_ALUMNOS (P_REGLA NUMBER, P_NEW_REGLA OUT NUMBER) IS


vl_existe Number:=0;
vl_existe_1 Number:=0;
vl_existe_anual number:=0;
--vn_new_regla number;

BEGIN


    DELETE as_alumnos
    WHERE 1 = 1
    AND as_alumnos_no_regla IS NULL;

    DELETE as_alumnos
    WHERE 1 = 1
    AND as_alumnos_no_regla =p_regla;

    DELETE rel_programaxalumno
    WHERE 1 = 1
    AND rel_programaxalumno_no_regla IS NULL;

    DELETE rel_alumnos_x_asignar
    WHERE 1 = 1
    AND rel_alumnos_x_asignar_no_regla IS NULL;

    DELETE sztprono
    WHERE 1 = 1
    AND sztprono_no_regla IS NULL;

    DELETE sztprof
    WHERE 1 = 1
    AND sztprof_no_regla IS NULL;

    DELETE sztconf
    WHERE 1 = 1
    AND sztconf_no_regla IS NULL;

    DELETE szcarga
    WHERE 1 = 1
    AND szcarga_no_regla IS NULL;

    DELETE sztcarga
    WHERE 1 = 1
    AND sztcarga_no_regla IS NULL;

    DELETE
    FROM sztprext
    WHERE 1  = 1
    AND sztprext_no_regla = p_regla;

    COMMIT;

    IF P_REGLA = 0 THEN

        BEGIN

            SELECT MAX(nvl(SZTALGO_NO_REGLA,0))+1
            INTO p_new_regla
            FROM SZTALGO
            WHERE 1 = 1;

        EXCEPTION WHEN OTHERS THEN
            p_new_regla:=0;
        END;

    ELSE

       p_new_regla:=p_regla;

    END IF;

    IF p_new_regla = 99 then

        p_new_regla:=p_new_regla+1;


    end IF;

    BEGIN

        SELECT COUNT(1)
        INTO vl_existe
        FROM sztalgo
        WHERE 1 = 1
        AND sztalgo_tipo_carga = 'Regular'
        AND sztalgo_no_regla=p_regla;

    EXCEPTION WHEN OTHERS THEN
        vl_existe :=0;
    END;


    BEGIN

        SELECT COUNT(1)
        INTO vl_existe_1
        FROM SZTALGO
        WHERE SZTALGO_TIPO_CARGA = 'Continuo'
        AND SZTALGO_NO_REGLA=P_REGLA;

        DBMS_OUTPUT.PUT_LINE('Entra  al 3.1'||vl_existe_1);
    EXCEPTION WHEN OTHERS THEN
        vl_existe_1 :=0;
    END;


    BEGIN

        SELECT COUNT(1)
        INTO vl_existe_anual
        FROM SZTALGO
        WHERE SZTALGO_TIPO_CARGA = 'Anual'
        AND SZTALGO_NO_REGLA=P_REGLA;

        DBMS_OUTPUT.PUT_LINE('Entra  al 4 ' ||vl_existe_anual);
    Exception
    when others then
      vl_existe :=0;

    END;

    BEGIN

      DELETE as_alumnos
      WHERE 1 = 1
      AND as_alumnos_no_regla = p_regla;
      COMMIT;
    EXCEPTION WHEN OTHERS THEN
        NULL;
    END;

  IF vl_existe >= 1 THEN

    DBMS_OUTPUT.PUT_LINE('Entra  al 4');


       FOR c IN (
                 SELECT DISTINCT
                              a.sgbstdn_pidm sgbstdn_pidm,
                              spriden_id as id_alumno,
                              REGEXP_SUBSTR(spriden_last_name, '[^/]*') as apellidopaterno,
                              NVL(substr(regexp_substr(spriden_last_name, '/[^/]*'),2), 0) as apellidomaterno,
                              spriden_first_name as nombres,
                              TO_CHAR(NVL(TRUNC(MONTHS_BETWEEN(SYSDATE, spbpers_birth_date) / 12), 0)) as edad,
                              d.res_calle,
                              d.res_colonia,
                              d.res_cp,
                              d.id_ciudad,
                              '0' as id_tipojornada,
                              d.id_estado,
                              d.id_pais,
                              NVL(sgbstdn_camp_code, 0) as campus,
                              NVL(spbpers_sex, 0) as id_genero,
                              TO_CHAR(NVL(spbpers_birth_date, '1/01/1900'),'DD/MM/YYYY') as fechanacimiento,
                              CASE WHEN sgbstdn_stst_code IN ('AS','MA','PR') THEN 'A'
                              ELSE 'I'
                              END AS id_estadoactivo,
                              aa.sorlcur_start_date fecha_inicio,
                              a.sgbstdn_styp_code estatus,
                              sorlcur_admt_code equi
                 FROM sgbstdn A,
                      spriden,
                      spbpers,
                      stvcamp,
                      sztdtec,
                      sgrstsp,
                      sorlcur aa,
                      sztalgo,
                      (SELECT a.spraddr_pidm,
                            NVL(a.spraddr_street_line1, 0) AS res_calle,
                            NVL(a.spraddr_street_line2, 0) AS res_colonia,
                            SUBSTR(NVL(a.spraddr_zip,'0'),1,5) AS res_cp,
                            NVL(a.spraddr_cnty_code, '00000') AS id_ciudad,
                            NVL(a.spraddr_stat_code, '00') AS id_estado,
                            NVL(a.spraddr_natn_code, 'XX') AS Id_Pais
                     FROM  spraddr a
                     WHERE  1 =1
                     AND a.spraddr_surrogate_id = (SELECT MAX (a1.spraddr_surrogate_id)
                                                   FROM spraddr a1
                                                   WHERE 1 = 1
                                                   AND a1.spraddr_pidm =  a.spraddr_pidm)
                     ) d
                     WHERE 1 = 1
                     AND a.sgbstdn_pidm = spriden_pidm
                     AND spriden_change_ind IS NULL
                     AND a.sgbstdn_pidm = spbpers_pidm (+)
                     AND a.sgbstdn_camp_code = stvcamp_code
                     AND a.sgbstdn_pidm = sgrstsp_pidm
                     AND sgrstsp_stsp_code = 'AS'
                     AND aa.sorlcur_pidm = sgbstdn_pidm
                     AND aa.sorlcur_camp_code = a.sgbstdn_camp_code
                     AND aa.sorlcur_program   =    a.sgbstdn_program_1
                     AND aa.sorlcur_lmod_code = 'LEARNER'
                     AND aa.sorlcur_roll_ind = 'Y'
                     AND aa.sorlcur_cact_code = 'ACTIVE'
                     AND sztalgo_no_regla=p_regla
                     AND aa.sorlcur_seqno = (SELECT MAX (aa1.sorlcur_seqno)
                                             FROM sorlcur aa1
                                             WHERE 1 = 1
                                             AND aa.sorlcur_pidm = aa1.sorlcur_pidm
                                             AND aa.sorlcur_program = aa1.sorlcur_program
                                             AND aa.sorlcur_lmod_code =  aa1.sorlcur_lmod_code
                                             AND aa.sorlcur_roll_ind = aa1.sorlcur_roll_ind
                                             AND aa.sorlcur_cact_code = aa1.sorlcur_cact_code
                                             )
                     AND a.sgbstdn_term_code_eff = (SELECT MAX (b1.sgbstdn_term_code_eff)
                                                    FROM sgbstdn b1
                                                    WHERE 1 = 1
                                                    AND a.sgbstdn_pidm = b1.sgbstdn_pidm
                                                    AND a.sgbstdn_program_1 = b1.sgbstdn_program_1
                                                    )
                     AND aa.sorlcur_camp_code = sztalgo_camp_code
                     AND aa.sorlcur_levl_code = sztalgo_levl_code
                     AND aa.sorlcur_start_date IN (SELECT sztalgo_fecha_ant
                                                   FROM sztalgo,
                                                        sfrstcr ax
                                                   WHERE 1 = 1
                                                   AND aa.sorlcur_camp_code = sztalgo_camp_code
                                                   AND aa.sorlcur_levl_code = sztalgo_levl_code
                                                   AND aa.sorlcur_pidm = ax.SFRSTCR_pidm
                                                   AND sztalgo_camp_code = ax.sfrstcr_camp_code
                                                   AND sztalgo_levl_code = ax.sfrstcr_levl_code
                                                   AND sztalgo_no_regla=p_regla
                                                   AND ax.sfrstcr_term_code = (SELECT MAX (ax1.sfrstcr_term_code)
                                                                               FROM sfrstcr ax1
                                                                               WHERE 1 = 1
                                                                               AND ax.sfrstcr_pidm = ax1.sfrstcr_pidm
                                                                               AND ax.sfrstcr_camp_code = ax1.sfrstcr_camp_code
                                                                               AND ax.sfrstcr_levl_code = ax1.sfrstcr_levl_code
                                                                               AND ax.sfrstcr_ptrm_code = ax1.sfrstcr_ptrm_code
                                                                               )
                                                   )
                     AND a.sgbstdn_pidm = d.spraddr_pidm (+)
                     AND aa.sorlcur_camp_code =sztdtec_camp_code
                     AND aa.sorlcur_program  = sztdtec_program
                     AND aa.sorlcur_term_code_ctlg = sztdtec_term_code
                     AND sztdtec_periodicidad = 1
                     AND a.sgbstdn_styp_code in('C','F','N','R')
                     UNION
                     SELECT DISTINCT
                                    a.sgbstdn_pidm sgbstdn_pidm,
                                    spriden_id AS id_alumno,
                                    REGEXP_SUBSTR(spriden_last_name, '[^/]*') AS apellidopaterno,
                                    NVL(SUBSTR(REGEXP_SUBSTR(spriden_last_name, '/[^/]*'),2), 0) AS apellidomaterno,
                                    spriden_first_name as nombres,
                                    TO_CHAR(NVL(TRUNC(MONTHS_BETWEEN(SYSDATE,spbpers_birth_date) / 12), 0)) AS edad,
                                    d.res_calle,
                                    d.res_colonia,
                                    d.res_cp,
                                    d.id_ciudad,
                                    '0' as id_tipojornada,
                                    d.id_estado,
                                    d.id_pais,
                                    NVL(sgbstdn_camp_code, 0) AS campus,
                                    NVL(spbpers_sex, 0) AS id_genero,
                                    TO_CHAR(NVL(spbpers_birth_date, '1/01/1900'),'DD/MM/YYYY') AS fechanacimiento,
                                    CASE WHEN sgbstdn_stst_code IN ('AS','MA','PR') THEN 'A'
                                    ELSE 'I'
                                    END AS id_EstadoActivo,
                                    aa.sorlcur_start_date fecha_inicio,
                                    a.sgbstdn_styp_code estatus,
                                    sorlcur_admt_code equi
                     FROM SGBSTDN A ,
                          SPRIDEN,
                          SPBPERS ,
                          STVCAMP,
                          SZTDTEC ,
                          SGRSTSP,
                          SORLCUR AA ,
                          SZTALGO,
                          (SELECT a.spraddr_pidm ,
                                  NVL(a.spraddr_street_line1, 0) as res_calle,
                                  NVL(a.spraddr_street_line2, 0) as res_colonia,
                                  SUBSTR(NVL(a.SPRADDR_ZIP,'0'),1,5) as Res_CP,
                                  NVL(a.spraddr_cnty_code, '00000') as id_ciudad,
                                  NVL(a.spraddr_stat_code, '00') as id_estado,
                                  NVL(a.spraddr_natn_code, 'XX') as id_pais
                           FROM spraddr a
                           WHERE 1 = 1
                           AND a.spraddr_surrogate_id = (
                                                         SELECT MAX (a1.spraddr_surrogate_id)
                                                         FROM spraddr a1
                                                         WHERE 1 = 1
                                                         AND a1.spraddr_pidm =  a.spraddr_pidm
                                                         )
                          ) d
                     WHERE 1 = 1
                     AND a.sgbstdn_pidm = spriden_pidm
                     AND spriden_change_ind IS NULL
                     AND a.sgbstdn_pidm = spbpers_pidm (+)
                     AND a.sgbstdn_camp_code = stvcamp_code
                     AND a.sgbstdn_pidm = sgrstsp_pidm
                     AND aa.sorlcur_pidm = sgbstdn_pidm
                     AND aa.sorlcur_program = a.sgbstdn_program_1
                     AND aa.sorlcur_camp_code = a.sgbstdn_camp_code
                     AND sztalgo_no_regla=p_regla
                     AND aa.sorlcur_camp_code = sztalgo_camp_code
                     AND aa.sorlcur_levl_code = sztalgo_levl_code
                     AND aa.sorlcur_camp_code =sztdtec_camp_code
                     AND aa.sorlcur_program  = sztdtec_program
                     AND aa.sorlcur_term_code_ctlg = sztdtec_term_code
                     AND aa.sorlcur_seqno = (
                                             SELECT MAX (aa1.sorlcur_seqno)
                                             FROM sorlcur aa1
                                             WHERE 1 = 1
                                             AND aa.sorlcur_pidm = aa1.sorlcur_pidm
                                             AND aa.sorlcur_program = aa1.sorlcur_program
                                             AND aa.sorlcur_lmod_code =  aa1.sorlcur_lmod_code
                                             AND aa.sorlcur_roll_ind = aa1.sorlcur_roll_ind
                                             AND aa.sorlcur_cact_code = aa1.sorlcur_cact_code
                                             )
                     AND a.sgbstdn_pidm = d.spraddr_pidm (+)
                     AND a.sgbstdn_term_code_eff = (
                                                    SELECT MAX (b1.sgbstdn_term_code_eff)
                                                    FROM sgbstdn b1
                                                    WHERE 1 = 1
                                                    AND a.sgbstdn_pidm = b1.sgbstdn_pidm
                                                    AND a.sgbstdn_program_1 = b1.sgbstdn_program_1
                                                    )
                     AND sgrstsp_stsp_code = 'AS'
                     AND aa.sorlcur_lmod_code = 'LEARNER'
                     AND aa.sorlcur_roll_ind = 'Y'
                     AND aa.sorlcur_cact_code = 'ACTIVE'
                     AND a.sgbstdn_styp_code in ('R','F','N')
                     AND sztdtec_periodicidad = 1
                     AND sztalgo_fecha_new =  sorlcur_start_date
                     AND sorlcur_start_date IN (
                                                SELECT DISTINCT sztalgo_fecha_new
                                                FROM sztalgo
                                                WHERE 1 = 1
                                                AND sztalgo_no_regla = p_regla
                                                )
                -- para bimestres pares de maestria para Lic no tiene efecto por que es curso solo de maestria
                    union
                    SELECT DISTINCT
                                    a.sgbstdn_pidm sgbstdn_pidm,
                                    spriden_id AS id_alumno,
                                    REGEXP_SUBSTR(spriden_last_name, '[^/]*') AS apellidopaterno,
                                    NVL(SUBSTR(REGEXP_SUBSTR(spriden_last_name, '/[^/]*'),2), 0) AS apellidomaterno,
                                    spriden_first_name as nombres,
                                    TO_CHAR(NVL(TRUNC(MONTHS_BETWEEN(SYSDATE,spbpers_birth_date) / 12), 0)) AS edad,
                                    d.res_calle,
                                    d.res_colonia,
                                    d.res_cp,
                                    d.id_ciudad,
                                    '0' as id_tipojornada,
                                    d.id_estado,
                                    d.id_pais,
                                    NVL(sgbstdn_camp_code, 0) AS campus,
                                    NVL(spbpers_sex, 0) AS id_genero,
                                    TO_CHAR(NVL(spbpers_birth_date, '1/01/1900'),'DD/MM/YYYY') AS fechanacimiento,
                                    CASE WHEN sgbstdn_stst_code IN ('AS','MA','PR') THEN 'A'
                                    ELSE 'I'
                                    END AS id_EstadoActivo,
                                    aa.sorlcur_start_date fecha_inicio,
                                    a.sgbstdn_styp_code estatus,
                                    sorlcur_admt_code equi
                     FROM SGBSTDN A ,
                          SPRIDEN,
                          SPBPERS ,
                          STVCAMP,
                          SZTDTEC ,
                          SGRSTSP,
                          SORLCUR AA ,
                          SZTALGO,
                          (SELECT a.spraddr_pidm ,
                                  NVL(a.spraddr_street_line1, 0) as res_calle,
                                  NVL(a.spraddr_street_line2, 0) as res_colonia,
                                  SUBSTR(NVL(a.SPRADDR_ZIP,'0'),1,5) as Res_CP,
                                  NVL(a.spraddr_cnty_code, '00000') as id_ciudad,
                                  NVL(a.spraddr_stat_code, '00') as id_estado,
                                  NVL(a.spraddr_natn_code, 'XX') as id_pais
                           FROM spraddr a
                           WHERE 1 = 1
                           AND a.spraddr_surrogate_id = (
                                                         SELECT MAX (a1.spraddr_surrogate_id)
                                                         FROM spraddr a1
                                                         WHERE 1 = 1
                                                         AND a1.spraddr_pidm =  a.spraddr_pidm
                                                         )
                          ) d
                     WHERE 1 = 1
                     AND a.sgbstdn_pidm = spriden_pidm
                     AND spriden_change_ind IS NULL
                     AND a.sgbstdn_pidm = spbpers_pidm (+)
                     AND a.sgbstdn_camp_code = stvcamp_code
                     AND a.sgbstdn_pidm = sgrstsp_pidm
                     AND aa.sorlcur_pidm = sgbstdn_pidm
                     AND aa.sorlcur_program = a.sgbstdn_program_1
                     AND aa.sorlcur_camp_code = a.sgbstdn_camp_code
                     AND sztalgo_no_regla=p_regla
                     AND aa.sorlcur_camp_code = sztalgo_camp_code
                     AND aa.sorlcur_levl_code = sztalgo_levl_code
                     AND aa.sorlcur_camp_code =sztdtec_camp_code
                     AND aa.sorlcur_program  = sztdtec_program
                     AND aa.sorlcur_term_code_ctlg = sztdtec_term_code
                     AND aa.sorlcur_seqno = (
                                             SELECT MAX (aa1.sorlcur_seqno)
                                             FROM sorlcur aa1
                                             WHERE 1 = 1
                                             AND aa.sorlcur_pidm = aa1.sorlcur_pidm
                                             AND aa.sorlcur_program = aa1.sorlcur_program
                                             AND aa.sorlcur_lmod_code =  aa1.sorlcur_lmod_code
                                             AND aa.sorlcur_roll_ind = aa1.sorlcur_roll_ind
                                             AND aa.sorlcur_cact_code = aa1.sorlcur_cact_code
                                             )
                     AND a.sgbstdn_pidm = d.spraddr_pidm (+)
                     AND a.sgbstdn_term_code_eff = (
                                                    SELECT MAX (b1.sgbstdn_term_code_eff)
                                                    FROM sgbstdn b1
                                                    WHERE 1 = 1
                                                    AND a.sgbstdn_pidm = b1.sgbstdn_pidm
                                                    AND a.sgbstdn_program_1 = b1.sgbstdn_program_1
                                                    )
                     AND sgrstsp_stsp_code = 'AS'
                     AND aa.sorlcur_lmod_code = 'LEARNER'
                     AND aa.sorlcur_roll_ind = 'Y'
                     AND aa.sorlcur_cact_code = 'ACTIVE'
                     AND a.sgbstdn_styp_code in ('F','N')
                     AND sztdtec_periodicidad = 1
                     AND SZTALGO_FECHA_ANT =  sorlcur_start_date
                     AND spriden_pidm IN (SELECT distinct SZTPRONO_pidm
                                          FROM sztprono
                                          WHERE 1 = 1
                                          AND sztprono_no_regla != p_regla
--                                          AND sztprono_no_regla = (SELECT max(sztprono_no_regla)
--                                                                   FROM sztprono
--                                                                   WHERE 1 = 1
--                                                                   AND SZTPRONO_MATERIA_LEGAL='M1HB401'
--                                                                   AND sztprono_no_regla != p_regla
--                                                                   )
--                                          AND SZTPRONO_MATERIA_LEGAL ='M1HB401'
                                          )


             ) LOOP


                BEGIN

                   INSERT INTO as_alumnos VALUES (
                                                   c.sgbstdn_pidm
                                                  ,c.id_alumno
                                                  ,c.apellidopaterno
                                                  ,c.apellidomaterno
                                                  ,c.nombres
                                                  ,c.edad
                                                  ,c.res_calle
                                                  ,c.res_colonia
                                                  ,c.res_cp
                                                  ,c.id_ciudad
                                                  ,c.id_tipojornada
                                                  ,c.id_estado
                                                  ,c.id_pais
                                                  ,c.campus
                                                  ,c.id_genero
                                                  ,c.fechanacimiento
                                                  ,c.id_estadoactivo
                                                  ,c.fecha_inicio
                                                  ,sysdate
                                                  ,user
                                                  ,p_new_regla
                                                  ,c.estatus
                                                  ,c.equi
                                                  );
                EXCEPTION WHEN OTHERS THEN

                   DBMS_OUTPUT.PUT_LINE('Entra  al 5');
                END;

             END LOOP;

            DELETE
            FROM as_alumnos
            WHERE 1 = 1
            AND as_alumnos_no_regla = p_regla
            AND ID_ALUMNO in (SELECT matricula
                              FROM sztvalma
                              WHERE 1 = 1
                              AND regla = p_regla);


             COMMIT;

  END IF;

  IF  vl_existe_1 >= 1 then
  DBMS_OUTPUT.PUT_LINE('Entra  al 6');


       For c in (

        SELECT DISTINCT
                            A.SGBSTDN_PIDM SGBSTDN_PIDM,
                            SPRIDEN_ID as id_Alumno,
                            regexp_substr(SPRIDEN_LAST_NAME, '[^/]*') as ApellidoPaterno,
                            NVL(substr(regexp_substr(SPRIDEN_LAST_NAME, '/[^/]*'),2), 0) as ApellidoMaterno,
                            SPRIDEN_FIRST_NAME as Nombres,
                            TO_CHAR(NVL(TRUNC(MONTHS_BETWEEN(SYSDATE, SPBPERS_BIRTH_DATE) / 12), 0)) as Edad,
                            d.Res_Calle,
                            d.Res_Colonia,
                            d.Res_CP,
                            d.Id_Ciudad,
                            '0' as Id_TipoJornada,
                            d.Id_Estado,
                            d.Id_Pais,
                            NVL(SGBSTDN_CAMP_CODE, 0) as Campus,
                            NVL(SPBPERS_SEX, 0) as Id_Genero,
                            TO_CHAR(NVL(SPBPERS_BIRTH_DATE, '1/01/1900'),'DD/MM/YYYY') as FechaNacimiento,
                            case when SGBSTDN_STST_CODE IN ('AS','MA','PR') then 'A'
                            else 'I'
                            end as id_EstadoActivo,
                            aa.SORLCUR_START_DATE FECHA_INICIO,
                            A.SGBSTDN_STYP_CODE estatus,
                            SORLCUR_ADMT_CODE equi
                        FROM SGBSTDN A , SPRIDEN, SPBPERS, SZTDTEC
                               ,STVCAMP, sgrstsp, SORLCUR aa , SZTALGO, (SELECT a.SPRADDR_PIDM ,
                                                                                                    NVL(a.SPRADDR_STREET_LINE1, 0) as Res_Calle,
                                                                                                    NVL(a.SPRADDR_STREET_LINE2, 0) as Res_Colonia,
                                                                                                    substr(NVL(a.SPRADDR_ZIP,'0'),1,5) as Res_CP,
                                                                                                    NVL(a.SPRADDR_CNTY_CODE, '00000') as Id_Ciudad,
                                                                                                    NVL(a.SPRADDR_STAT_CODE, '00') as Id_Estado,
                                                                                                    NVL(a.SPRADDR_NATN_CODE, 'XX') as Id_Pais
                                                                                                 FROM SPRADDR a
                                                                                                WHERE a.SPRADDR_SURROGATE_ID = (SELECT max (a1.SPRADDR_SURROGATE_ID)
                                                                                                                                                    FROM SPRADDR a1
                                                                                                                                                    WHERE   a1.SPRADDR_PIDM =  a.SPRADDR_PIDM)) d
                        WHERE A.SGBSTDN_PIDM = SPRIDEN_PIDM
                        AND SPRIDEN_CHANGE_IND is NULL
                        AND A.SGBSTDN_PIDM = SPBPERS_PIDM (+)
                        AND A.SGBSTDN_CAMP_CODE = STVCAMP_CODE
                        AND A.SGBSTDN_PIDM = sgrstsp_PIDM
                        AND SGRSTSP_STSP_CODE = 'AS'
                        AND aa.SORLCUR_PIDM = SGBSTDN_PIDM
                        AND aa.SORLCUR_CAMP_CODE =    A.SGBSTDN_CAMP_CODE
                        AND aa.SORLCUR_PROGRAM    =    A.sgbstdn_program_1
                        AND aa.SORLCUR_LMOD_CODE = 'LEARNER'
                        AND aa.SORLCUR_ROLL_IND = 'Y'
                        AND aa.SORLCUR_CACT_CODE = 'ACTIVE'
                        AND SZTALGO_NO_REGLA=P_REGLA
                        AND aa.SORLCUR_SEQNO = (SELECT max (aa1.SORLCUR_SEQNO)
                                                                   FROM SORLCUR aa1
                                                                   WHERE aa.sorlcur_pidm = aa1.sorlcur_pidm
                                                                   AND aa.SORLCUR_PROGRAM = aa1.SORLCUR_PROGRAM
                                                                   AND  aa.SORLCUR_LMOD_CODE =  aa1.SORLCUR_LMOD_CODE
                                                                   AND aa.SORLCUR_ROLL_IND = aa1.SORLCUR_ROLL_IND
                                                                   AND aa.SORLCUR_CACT_CODE = aa1.SORLCUR_CACT_CODE)
                        AND a.SGBSTDN_TERM_CODE_EFF = (SELECT max (b1.SGBSTDN_TERM_CODE_EFF)
                                                        FROM sgbstdn b1
                                                        WHERE a.sgbstdn_pidm = b1.sgbstdn_pidm
                                                        AND a.sgbstdn_program_1 = b1.sgbstdn_program_1)
                        AND  aa.SORLCUR_CAMP_CODE = SZTALGO_CAMP_CODE
                        AND aa.SORLCUR_LEVL_CODE = SZTALGO_LEVL_CODE
                        AND aa.SORLCUR_START_DATE  in (SELECT SZTALGO_FECHA_ANT
                                                       FROM SZTALGO, SFRSTCR ax
                                                       WHERE  SZTALGO_TIPO_CARGA != 'Regular'
                                                       AND  aa.SORLCUR_CAMP_CODE = SZTALGO_CAMP_CODE
                                                       AND aa.SORLCUR_LEVL_CODE = SZTALGO_LEVL_CODE
                                                       AND aa.sorlcur_pidm = ax.SFRSTCR_pidm
                                                       AND SZTALGO_CAMP_CODE = ax.SFRSTCR_CAMP_CODE
                                                       AND SZTALGO_LEVL_CODE = ax.SFRSTCR_LEVL_CODE
                                                       AND SZTALGO_NO_REGLA=P_REGLA
                                                       AND ax.SFRSTCR_TERM_CODE = (SELECT max (ax1.SFRSTCR_TERM_CODE)
                                                                                   FROM SFRSTCR ax1
                                                                                   WHERE ax.SFRSTCR_pidm = ax1.SFRSTCR_pidm
                                                                                   AND ax.SFRSTCR_CAMP_CODE = ax1.SFRSTCR_CAMP_CODE
                                                                                   AND ax.SFRSTCR_LEVL_CODE = ax1.SFRSTCR_LEVL_CODE
                                                                                   AND ax.SFRSTCR_PTRM_CODE = ax1.SFRSTCR_PTRM_CODE)
                                                       AND  SZTALGO_PTRM_CODE = ax.SFRSTCR_PTRM_CODE (+)
                                                        )
                       AND A.SGBSTDN_PIDM = D.SPRADDR_PIDM (+)
                       AND aa.sorlcur_camp_code =SZTDTEC_CAMP_CODE
                       AND aa.SORLCUR_PROGRAM  = SZTDTEC_PROGRAM
                       AND aa.SORLCUR_TERM_CODE_CTLG = SZTDTEC_TERM_CODE
                       AND SZTDTEC_PERIODICIDAD = 2
                       AND A.SGBSTDN_STYP_CODE IN('C','F','N','R')
                       UNION
                       SELECT DISTINCT
                                   A.SGBSTDN_PIDM SGBSTDN_PIDM,
                                   SPRIDEN_ID as id_Alumno,
                                   regexp_substr(SPRIDEN_LAST_NAME, '[^/]*') as ApellidoPaterno,
                                   NVL(substr(regexp_substr(SPRIDEN_LAST_NAME, '/[^/]*'),2), 0) as ApellidoMaterno,
                                   SPRIDEN_FIRST_NAME as Nombres,
                                   TO_CHAR(NVL(TRUNC(MONTHS_BETWEEN(SYSDATE, SPBPERS_BIRTH_DATE) / 12), 0)) as Edad,
                                   d.Res_Calle,
                                   d.Res_Colonia,
                                   d.Res_CP,
                                   d.Id_Ciudad,
                                   '0' as Id_TipoJornada,
                                   d.Id_Estado,
                                   d.Id_Pais,
                                   NVL(SGBSTDN_CAMP_CODE, 0) as Campus,
                                   NVL(SPBPERS_SEX, 0) as Id_Genero,
                                   TO_CHAR(NVL(SPBPERS_BIRTH_DATE, '1/01/1900'),'DD/MM/YYYY') as FechaNacimiento,
                                   case when SGBSTDN_STST_CODE IN ('AS','MA','PR') then 'A'
                                   else 'I'
                                   end as id_EstadoActivo,
                                   aa.SORLCUR_START_DATE FECHA_INICIO,
                                   A.SGBSTDN_STYP_CODE estatus,
                                   SORLCUR_ADMT_CODE equi
                    FROM SGBSTDN A ,
                         SPRIDEN,
                         SPBPERS ,
                         STVCAMP,
                         SZTDTEC ,
                         sgrstsp,
                         SORLCUR aa ,
                         SZTALGO,
                         (SELECT a.SPRADDR_PIDM ,
                                 NVL(a.SPRADDR_STREET_LINE1, 0) as Res_Calle,
                                 NVL(a.SPRADDR_STREET_LINE2, 0) as Res_Colonia,
                                 substr(NVL(a.SPRADDR_ZIP,'0'),1,5) as Res_CP,
                                 NVL(a.SPRADDR_CNTY_CODE, '00000') as Id_Ciudad,
                                 NVL(a.SPRADDR_STAT_CODE, '00') as Id_Estado,
                                 NVL(a.SPRADDR_NATN_CODE, 'XX') as Id_Pais
                          FROM SPRADDR a
                          WHERE a.SPRADDR_SURROGATE_ID = (SELECT max (a1.SPRADDR_SURROGATE_ID)
                                                         FROM SPRADDR a1
                                                         WHERE   a1.SPRADDR_PIDM =  a.SPRADDR_PIDM)
                         ) d
                    WHERE A.SGBSTDN_PIDM = SPRIDEN_PIDM
                    AND SPRIDEN_CHANGE_IND is NULL
                    AND A.SGBSTDN_PIDM = SPBPERS_PIDM (+)
                    AND A.SGBSTDN_CAMP_CODE = STVCAMP_CODE
                    --AND SPRIDEN_ID ='010000548'
                    AND A.SGBSTDN_PIDM = sgrstsp_PIDM
                    AND aa.SORLCUR_PIDM = SGBSTDN_PIDM
                    AND aa.SORLCUR_PROGRAM    =    A.sgbstdn_program_1
                    AND aa.SORLCUR_CAMP_CODE =    A.SGBSTDN_CAMP_CODE
                    AND SZTALGO_NO_REGLA=p_regla
                    AND  aa.SORLCUR_CAMP_CODE = SZTALGO_CAMP_CODE
                    AND aa.SORLCUR_LEVL_CODE = SZTALGO_LEVL_CODE
                    AND aa.sorlcur_camp_code =SZTDTEC_CAMP_CODE
                    AND aa.SORLCUR_PROGRAM  = SZTDTEC_PROGRAM
                    AND aa.SORLCUR_TERM_CODE_CTLG = SZTDTEC_TERM_CODE
                    AND aa.SORLCUR_SEQNO = (SELECT max (aa1.SORLCUR_SEQNO)
                                                               FROM SORLCUR aa1
                                                               WHERE aa.sorlcur_pidm = aa1.sorlcur_pidm
                                                               AND aa.SORLCUR_PROGRAM = aa1.SORLCUR_PROGRAM
                                                               AND  aa.SORLCUR_LMOD_CODE =  aa1.SORLCUR_LMOD_CODE
                                                               AND aa.SORLCUR_ROLL_IND = aa1.SORLCUR_ROLL_IND
                                                               AND aa.SORLCUR_CACT_CODE = aa1.SORLCUR_CACT_CODE)
                    AND A.SGBSTDN_PIDM = d.SPRADDR_PIDM (+)
                    AND a.SGBSTDN_TERM_CODE_EFF = (SELECT max (b1.SGBSTDN_TERM_CODE_EFF)
                                                    FROM sgbstdn b1
                                                    WHERE a.sgbstdn_pidm = b1.sgbstdn_pidm
                                                    AND a.sgbstdn_program_1 = b1.sgbstdn_program_1)
                    AND SGRSTSP_STSP_CODE = 'AS'
                    AND aa.SORLCUR_LMOD_CODE = 'LEARNER'
                    AND aa.SORLCUR_ROLL_IND = 'Y'
                    AND aa.SORLCUR_CACT_CODE = 'ACTIVE'
                    AND A.SGBSTDN_STYP_CODE IN ('R','F','N')
                    AND SZTDTEC_PERIODICIDAD = 2
                    AND SZTALGO_FECHA_NEW =  SORLCUR_START_DATE
                    AND SORLCUR_START_DATE in (SELECT distinct SZTALGO_FECHA_NEW
                                               FROM sztalgo
                                               WHERE 1 = 1
                                               AND sztalgo_no_regla = p_regla)
          ) loop
                BEGIN
                   INSERT INTO AS_ALUMNOS VALUES (
                                                                    c.SGBSTDN_PIDM
                                                                    ,c.ID_ALUMNO
                                                                    ,c.APELLIDOPATERNO
                                                                    ,c.APELLIDOMATERNO
                                                                    ,c.NOMBRES
                                                                    ,c.EDAD
                                                                    ,c.RES_CALLE
                                                                    ,c.RES_COLONIA
                                                                    ,c.RES_CP
                                                                    ,c.ID_CIUDAD
                                                                    ,c.ID_TIPOJORNADA
                                                                    ,c.ID_ESTADO
                                                                    ,c.ID_PAIS
                                                                    ,c.CAMPUS
                                                                    ,c.ID_GENERO
                                                                    ,c.FECHANACIMIENTO
                                                                    ,c.ID_ESTADOACTIVO
                                                                    ,c.FECHA_INICIO
                                                                    ,SYSDATE
                                                                    ,USER
                                                                    ,P_new_regla
                                                                    ,c.estatus
                                                                    ,c.equi
                                                                    );
               EXCEPTION WHEN OTHERS THEN

                DBMS_OUTPUT.PUT_LINE('Entra  al 7');

               END;
             END LOOP;

             Commit;

  End IF;

  IF  vl_existe_anual >= 1 then
  DBMS_OUTPUT.PUT_LINE('Entra  al 6');


       For c in (
                    SELECT distinct e.SGBSTDN_PIDM,
                                    d.SPRIDEN_ID as id_Alumno,
                                    regexp_substr(d.SPRIDEN_LAST_NAME, '[^/]*') as ApellidoPaterno,
                                    NVL(substr(regexp_substr(d.SPRIDEN_LAST_NAME, '/[^/]*'),2), 0) as ApellidoMaterno,
                                    d.SPRIDEN_FIRST_NAME as Nombres,
                                    TO_CHAR(NVL(TRUNC(MONTHS_BETWEEN(SYSDATE,s.SPBPERS_BIRTH_DATE) / 12), 0)) as Edad,
                                    NVL(x.SPRADDR_STREET_LINE1, 0) as Res_Calle,
                                    NVL(x.SPRADDR_STREET_LINE2, 0) as Res_Colonia,
                                    substr(NVL(x.SPRADDR_ZIP,'0'),1,5) as Res_CP,
                                    NVL(x.SPRADDR_CNTY_CODE, '00000') as Id_Ciudad,
                                    '0' as Id_TipoJornada,
                                    NVL(x.SPRADDR_STAT_CODE, '00') as Id_Estado,
                                    NVL(x.SPRADDR_NATN_CODE, 'XX') as Id_Pais,
                                    NVL(e.SGBSTDN_CAMP_CODE, 0) as Campus,
                                    NVL(s.SPBPERS_SEX, 0) as Id_Genero,
                                    TO_CHAR(NVL(s.SPBPERS_BIRTH_DATE, '1/01/1900'),'DD/MM/YYYY') as FechaNacimiento,
                                    case when e.SGBSTDN_STST_CODE IN ('AS','MA','PR') then 'A'
                                      else 'I'
                                    end as id_EstadoActivo,
                                    a.SORLCUR_START_DATE FECHA_INICIO,
                                    e.SGBSTDN_STYP_CODE estatus,
                                    a.sorlcur_admt_code equi,
                                    A.SORLCUR_RATE_CODE
                    FROM sorlcur a
                    join sgbstdn e on sgbstdn_pidm = a.sorlcur_pidm
                                  AND a.SORLCUR_PROGRAM   = e.sgbstdn_program_1
                                  AND a.SORLCUR_CAMP_CODE = e.SGBSTDN_CAMP_CODE
                                  AND e.SGBSTDN_TERM_CODE_EFF = (SELECT max (b1.SGBSTDN_TERM_CODE_EFF)
                                                                  FROM sgbstdn b1
                                                                  WHERE 1 = 1
                                                                  AND e.sgbstdn_pidm = b1.sgbstdn_pidm
                                                                  AND e.sgbstdn_program_1 = b1.sgbstdn_program_1)
                                  AND e.SGBSTDN_STYP_CODE IN ('R','F','N','C')
                    JOIN spriden d on d.spriden_change_ind is null
                                  AND d.spriden_pidm = a.sorlcur_pidm
                    left join SPBPERS s on s.SPBPERS_PIDM =   a.sorlcur_pidm
                    left join SPRADDR x on a.sorlcur_pidm = x.SPRADDR_PIDM
                                       AND x.SPRADDR_SURROGATE_ID = (SELECT max (a1.SPRADDR_SURROGATE_ID)
                                                                     FROM SPRADDR a1
                                                                     WHERE   a1.SPRADDR_PIDM =  x.SPRADDR_PIDM)
                    WHERE 1 = 1
                    AND a.SORLCUR_LMOD_CODE = 'LEARNER'
                    AND a.SORLCUR_ROLL_IND = 'Y'
                    AND a.SORLCUR_CACT_CODE = 'ACTIVE'
                    AND a.SORLCUR_CAMP_CODE ='UTS'
                    AND a.SORLCUR_LEVL_CODE IN ('EC','ID')
                    AND substr(a.sorlcur_program,4,1)in ('D','C')
                    AND a.SORLCUR_SEQNO = (SELECT max (aa1.SORLCUR_SEQNO)
                                            FROM SORLCUR aa1
                                            WHERE 1 = 1
                                            AND a.sorlcur_pidm = aa1.sorlcur_pidm
                                            AND a.SORLCUR_PROGRAM = aa1.SORLCUR_PROGRAM
                                            AND a.SORLCUR_LMOD_CODE =  aa1.SORLCUR_LMOD_CODE
                                            AND a.SORLCUR_ROLL_IND = aa1.SORLCUR_ROLL_IND
                                            AND a.SORLCUR_CACT_CODE = aa1.SORLCUR_CACT_CODE)
            AND EXISTS (SELECT NULL
                                FROM SZTALGO b
                                WHERE 1 = 1
                                AND b.sztalgo_no_regla = P_REGLA
                                AND b.SZTALGO_CAMP_CODE = a.SORLCUR_CAMP_CODE
                                AND b.SZTALGO_LEVL_CODE  =a.SORLCUR_LEVL_CODE
                                AND b.SZTALGO_FECHA_NEW = A.SORLCUR_START_DATE
                                 )
            UNION
            SELECT distinct e.SGBSTDN_PIDM,
                                    d.SPRIDEN_ID as id_Alumno,
                                    regexp_substr(d.SPRIDEN_LAST_NAME, '[^/]*') as ApellidoPaterno,
                                    NVL(substr(regexp_substr(d.SPRIDEN_LAST_NAME, '/[^/]*'),2), 0) as ApellidoMaterno,
                                    d.SPRIDEN_FIRST_NAME as Nombres,
                                    TO_CHAR(NVL(TRUNC(MONTHS_BETWEEN(SYSDATE,s.SPBPERS_BIRTH_DATE) / 12), 0)) as Edad,
                                    NVL(x.SPRADDR_STREET_LINE1, 0) as Res_Calle,
                                    NVL(x.SPRADDR_STREET_LINE2, 0) as Res_Colonia,
                                    substr(NVL(x.SPRADDR_ZIP,'0'),1,5) as Res_CP,
                                    NVL(x.SPRADDR_CNTY_CODE, '00000') as Id_Ciudad,
                                    '0' as Id_TipoJornada,
                                    NVL(x.SPRADDR_STAT_CODE, '00') as Id_Estado,
                                    NVL(x.SPRADDR_NATN_CODE, 'XX') as Id_Pais,
                                    NVL(e.SGBSTDN_CAMP_CODE, 0) as Campus,
                                    NVL(s.SPBPERS_SEX, 0) as Id_Genero,
                                    TO_CHAR(NVL(s.SPBPERS_BIRTH_DATE, '1/01/1900'),'DD/MM/YYYY') as FechaNacimiento,
                                    case when e.SGBSTDN_STST_CODE IN ('AS','MA','PR') then 'A'
                                      else 'I'
                                    end as id_EstadoActivo,
                                    a.SORLCUR_START_DATE FECHA_INICIO,
                                    e.SGBSTDN_STYP_CODE estatus,
                                    a.sorlcur_admt_code equi,
                                    A.SORLCUR_RATE_CODE
                    FROM sorlcur a
                    join sgbstdn e on sgbstdn_pidm = a.sorlcur_pidm
                                  AND a.SORLCUR_PROGRAM   = e.sgbstdn_program_1
                                  AND a.SORLCUR_CAMP_CODE = e.SGBSTDN_CAMP_CODE
                                  AND e.SGBSTDN_TERM_CODE_EFF = (SELECT max (b1.SGBSTDN_TERM_CODE_EFF)
                                                                  FROM sgbstdn b1
                                                                  WHERE 1 = 1
                                                                  AND e.sgbstdn_pidm = b1.sgbstdn_pidm
                                                                  AND e.sgbstdn_program_1 = b1.sgbstdn_program_1)
                                  AND e.SGBSTDN_STYP_CODE IN ('R','F','N','C')
                    JOIN spriden d on d.spriden_change_ind is null
                                  AND d.spriden_pidm = a.sorlcur_pidm
                    left join SPBPERS s on s.SPBPERS_PIDM =   a.sorlcur_pidm
                    left join SPRADDR x on a.sorlcur_pidm = x.SPRADDR_PIDM
                                       AND x.SPRADDR_SURROGATE_ID = (SELECT max (a1.SPRADDR_SURROGATE_ID)
                                                                     FROM SPRADDR a1
                                                                     WHERE   a1.SPRADDR_PIDM =  x.SPRADDR_PIDM)
                    WHERE 1 = 1
                    AND a.SORLCUR_LMOD_CODE = 'LEARNER'
                    AND a.SORLCUR_ROLL_IND = 'Y'
                    AND a.SORLCUR_CACT_CODE = 'ACTIVE'
                    AND a.SORLCUR_CAMP_CODE ='EAF'
                    AND a.SORLCUR_LEVL_CODE IN ('EC','ID')
--                    AND substr(a.sorlcur_program,4,1)='D'
                    AND a.SORLCUR_SEQNO = (SELECT max (aa1.SORLCUR_SEQNO)
                                            FROM SORLCUR aa1
                                            WHERE 1 = 1
                                            AND a.sorlcur_pidm = aa1.sorlcur_pidm
                                            AND a.SORLCUR_PROGRAM = aa1.SORLCUR_PROGRAM
                                            AND a.SORLCUR_LMOD_CODE =  aa1.SORLCUR_LMOD_CODE
                                            AND a.SORLCUR_ROLL_IND = aa1.SORLCUR_ROLL_IND
                                            AND a.SORLCUR_CACT_CODE = aa1.SORLCUR_CACT_CODE)
            AND EXISTS (SELECT NULL
                                FROM SZTALGO b
                                WHERE 1 = 1
                                AND b.sztalgo_no_regla = P_REGLA
                                AND b.SZTALGO_CAMP_CODE = a.SORLCUR_CAMP_CODE
                                AND b.SZTALGO_LEVL_CODE  =a.SORLCUR_LEVL_CODE
                                AND b.SZTALGO_FECHA_NEW = A.SORLCUR_START_DATE
                                 )


          ) loop
                BEGIN
                   INSERT INTO AS_ALUMNOS VALUES (
                                                                    c.SGBSTDN_PIDM
                                                                    ,c.ID_ALUMNO
                                                                    ,c.APELLIDOPATERNO
                                                                    ,c.APELLIDOMATERNO
                                                                    ,c.NOMBRES
                                                                    ,c.EDAD
                                                                    ,c.RES_CALLE
                                                                    ,c.RES_COLONIA
                                                                    ,c.RES_CP
                                                                    ,c.ID_CIUDAD
                                                                    ,c.ID_TIPOJORNADA
                                                                    ,c.ID_ESTADO
                                                                    ,c.ID_PAIS
                                                                    ,c.CAMPUS
                                                                    ,c.ID_GENERO
                                                                    ,c.FECHANACIMIENTO
                                                                    ,c.ID_ESTADOACTIVO
                                                                    ,c.FECHA_INICIO
                                                                    ,SYSDATE
                                                                    ,USER
                                                                    ,P_new_regla
                                                                    ,c.estatus
                                                                    ,c.equi
                                                                    );
               EXCEPTION WHEN OTHERS THEN

                DBMS_OUTPUT.PUT_LINE('Entra  al 7');

               END;
             END LOOP;

             Commit;

  End IF;

  IF P_NEW_REGLA <> P_REGLA THEN

    BEGIN
      UPDATE SZTALGO SET SZTALGO_NO_REGLA = P_NEW_REGLA
      WHERE SZTALGO_NO_REGLA= P_REGLA;
      commit;
    EXCEPTION WHEN OTHERS THEN

        DBMS_OUTPUT.PUT_LINE('Entra  al 8');

    END;
  END IF;

END P_ALUMNOS;

   PROCEDURE p_programa_x_alumno (p_regla NUMBER)
   IS

  vl_existe         NUMBER;
  l_term_code_eff   VARCHAR2 (100);
  l_equi            VARCHAR2 (100);
  l_rate            VARCHAR2 (100);
  l_programa        VARCHAR2 (100);
  l_sp              NUMBER;
  l_type_code       VARCHAR2 (100);
  l_fecha_incio     DATE;
  l_periodo_ctl     VARCHAR2 (100);
  l_nivel           VARCHAR2 (100);
  l_estatus         VARCHAR2 (100);
  l_jornada         VARCHAR2 (100);

   BEGIN
      --BEGIN PKG_DEVENGAMIENTO.P_ALUMNO;  END;

      DELETE rel_programaxalumno
      WHERE rel_programaxalumno_no_regla = p_regla;

      COMMIT;

      DELETE rel_programaxalumno
      WHERE rel_programaxalumno_no_regla IS NULL;

      DELETE
      FROM sztprext
      WHERE 1  = 1
      AND sztprext_no_regla = p_regla;

      COMMIT;

      FOR c IN (SELECT sgbstdn_pidm,
                    id_alumno,
                    campus,
                    NULL concentracion,
                    NULL area_de_salida,
                    NULL area_de_salida2,
                    NULL TIPO_JORNADA,
                    as_alumnos_equi equi,
                    RES_COLONIA  nivel,-- se uso para la nivel
                    cur.sorlcur_program programa,
                    cur.sorlcur_key_seqno SP,
                    cur.SORLCUR_TERM_CODE periodo
             FROM as_alumnos,sorlcur cur
             WHERE     1 = 1
             AND as_alumnos_no_regla = p_regla
             AND sgbstdn_pidm=cur.sorlcur_pidm
             AND id_estadoactivo = 'A'
--             and SGBSTDN_PIDM = p_pidm
             AND cur.sorlcur_lmod_code = 'LEARNER'
             AND cur.sorlcur_roll_ind = 'Y'
             AND cur.sorlcur_cact_code = 'ACTIVE'
             AND cur.SORLCUR_LEVL_CODE IN ('EC','ID')
             AND cur.sorlcur_seqno = (SELECT MAX (aa1.sorlcur_seqno)
                                       FROM sorlcur aa1
                                       WHERE     cur.sorlcur_pidm = aa1.sorlcur_pidm
                                       AND cur.sorlcur_lmod_code = aa1.sorlcur_lmod_code
                                       AND cur.sorlcur_roll_ind = aa1.sorlcur_roll_ind
                                       AND cur.sorlcur_cact_code = aa1.sorlcur_cact_code
                                       AND cur.SORLCUR_LEVL_CODE = aa1.SORLCUR_LEVL_CODE
                                       AND cur.SORLCUR_PROGRAM=aa1.SORLCUR_PROGRAM
                                      )
             )
      LOOP

        BEGIN

            SELECT DISTINCT sorlcur_program, cur.sorlcur_key_seqno
            INTO l_programa, l_sp
            FROM sorlcur cur
            WHERE     1 = 1
            AND cur.sorlcur_pidm = c.sgbstdn_pidm
            AND cur.sorlcur_lmod_code = 'LEARNER'
            AND cur.sorlcur_roll_ind = 'Y'
            AND cur.sorlcur_cact_code = 'ACTIVE'
            AND cur.sorlcur_seqno =(SELECT MAX (aa1.sorlcur_seqno)
                                    FROM sorlcur aa1
                                    WHERE     cur.sorlcur_pidm = aa1.sorlcur_pidm
                                    AND cur.sorlcur_lmod_code = aa1.sorlcur_lmod_code
                                    AND cur.sorlcur_roll_ind = aa1.sorlcur_roll_ind
                                    AND cur.sorlcur_cact_code = aa1.sorlcur_cact_code
                                    AND cur.SORLCUR_PROGRAM=aa1.SORLCUR_PROGRAM);

         EXCEPTION WHEN OTHERS THEN
               NULL;
         END;


         BEGIN

            SELECT MAX (b1.sgbstdn_term_code_eff)
            INTO l_term_code_eff
            FROM sgbstdn b1
            WHERE 1 = 1
            AND b1.sgbstdn_pidm = c.sgbstdn_pidm
            AND b1.sgbstdn_program_1 = l_programa;

         EXCEPTION WHEN OTHERS THEN
               NULL;
         END;


         BEGIN

             SELECT DISTINCT sgbstdn_styp_code,
                            sgbstdn_stst_code
             INTO l_type_code,
                 l_estatus
             FROM sgbstdn b1
             WHERE 1 = 1
             AND b1.sgbstdn_pidm = c.sgbstdn_pidm
             AND b1.sgbstdn_program_1 = l_programa
             AND b1.sgbstdn_term_code_eff =
                                            (SELECT MAX (b2.sgbstdn_term_code_eff)
                                             FROM sgbstdn b2
                                             WHERE 1 = 1
                                             AND b2.sgbstdn_pidm = b1.sgbstdn_pidm
                                             AND b2.sgbstdn_program_1 = b1.sgbstdn_program_1
                                             );
         EXCEPTION WHEN OTHERS THEN
               NULL;
         END;


         BEGIN

            SELECT DISTINCT cur.sorlcur_term_code_ctlg ctlg,
                            cur.sorlcur_levl_code,
                            cur.sorlcur_rate_code,
                            cur.sorlcur_start_date
            INTO l_periodo_ctl,
                 l_nivel,
                 l_rate,
                 l_fecha_incio
            FROM sorlcur cur
            WHERE     1 = 1
            AND cur.sorlcur_pidm = c.sgbstdn_pidm
            AND cur.sorlcur_lmod_code = 'LEARNER'
            AND cur.sorlcur_roll_ind = 'Y'
            AND cur.sorlcur_cact_code = 'ACTIVE'
            AND cur.sorlcur_key_seqno = l_sp
            AND cur.sorlcur_program = l_programa
            AND cur.sorlcur_seqno =
                                   (SELECT MAX (c1x.sorlcur_seqno)
                                    FROM sorlcur c1x
                                    WHERE 1 = 1
                                    AND cur.sorlcur_pidm = c1x.sorlcur_pidm
                                    AND cur.sorlcur_lmod_code = c1x.sorlcur_lmod_code
                                    AND cur.sorlcur_roll_ind =c1x.sorlcur_roll_ind
                                    AND cur.sorlcur_cact_code =c1x.sorlcur_cact_code
                                    AND cur.sorlcur_program =c1x.sorlcur_program
                                    AND cur.sorlcur_key_seqno = c1x.sorlcur_key_seqno);
         EXCEPTION WHEN OTHERS THEN
               l_periodo_ctl := '000000';
         END;

         BEGIN
--
--            SELECT CASE
--                      WHEN l_nivel IN ('MA') AND sgrsatt_atts_code IS NULL
--                      THEN
--                         '1MN2'
--                      WHEN l_nivel IN ('MS') AND sgrsatt_atts_code IS NULL
--                      THEN
--                         '1AN2'
--                      WHEN l_nivel = 'LI' AND sgrsatt_atts_code IS NULL
--                      THEN
--                         '1LC4'
--                      ELSE
--                         sgrsatt_atts_code
--                   END
--                      tipo_jornada
--            INTO l_jornada
--            FROM SGRSATT b
--            WHERE     1 = 1
--            AND REGEXP_LIKE (SGRSATT_ATTS_CODE, '^[0-9]')
--            AND sgrsatt_pidm = c.sgbstdn_pidm
--            AND sgrsatt_stsp_key_sequence = l_sp
--            AND b.sgrsatt_surrogate_id IN
--                                         (SELECT MAX (b1.sgrsatt_surrogate_id)
--                                          FROM sgrsatt b1
--                                          WHERE 1 = 1
--                                          AND b.sgrsatt_pidm = b1.sgrsatt_pidm
--                                          AND b.sgrsatt_stsp_key_sequence = b1.sgrsatt_stsp_key_sequence
--                                          AND REGEXP_LIKE (SGRSATT_ATTS_CODE, '^[0-9]')
--                                          --AND b.sgrsatt_atts_code = b1.sgrsatt_atts_code
--                                          );
            SELECT
               CASE
               WHEN l_nivel IN ('MA') AND sgrsatt_atts_code IS NULL
               THEN
               '1MN2'
               WHEN l_nivel IN ('MS') AND sgrsatt_atts_code IS NULL
               THEN
               '1AN2'
               WHEN l_nivel = 'LI' AND sgrsatt_atts_code IS NULL
               THEN
               '1LC2'
               ELSE
               sgrsatt_atts_code
               END tipo_jornada
               INTO l_jornada
            FROM sgrsatt T
            WHERE t.sgrsatt_pidm = c.sgbstdn_pidm
            AND t.sgrsatt_stsp_key_sequence = l_sp
            AND REGEXP_LIKE (t.sgrsatt_atts_code , '^[0-9]')
            AND SUBSTR(t.sgrsatt_term_code_eff,5,1) NOT IN (8,9)
            AND t.sgrsatt_term_code_eff = (SELECT MAX(sgrsatt_term_code_eff)
                                            FROM sgrsatt tt
                                            WHERE tt.sgrsatt_pidm = t.sgrsatt_pidm
                                            AND tt.sgrsatt_stsp_key_sequence= t.sgrsatt_stsp_key_sequence
                                            AND SUBSTR(tt.sgrsatt_term_code_eff,5,2) NOT IN (8,9)
                                            AND REGEXP_LIKE (tt.sgrsatt_atts_code , '^[0-9]'))
            AND t.sgrsatt_activity_date = (SELECT MAX(sgrsatt_activity_date)
            FROM sgrsatt t1
            WHERE t1.sgrsatt_pidm = t.sgrsatt_pidm
            AND t1.sgrsatt_stsp_key_sequence = t.sgrsatt_stsp_key_sequence
            AND t1.sgrsatt_term_code_eff = t.sgrsatt_term_code_eff
            AND SUBSTR(t1.sgrsatt_term_code_eff,5,2) NOT IN (8,9)
            AND REGEXP_LIKE (t1.sgrsatt_atts_code , '^[0-9]')) ;



         EXCEPTION WHEN OTHERS THEN
               NULL;
         END;


         BEGIN
            INSERT INTO rel_programaxalumno
                                     VALUES (c.sgbstdn_pidm,
                                             c.id_alumno,
                                             c.campus,
                                             c.programa,
                                             c.periodo,
                                             l_jornada,
                                             c.concentracion,
                                             c.area_de_salida,
                                             c.sp,
                                             l_type_code,
                                             c.area_de_salida2,
                                             l_fecha_incio,
                                             l_periodo_ctl,
                                             l_rate,
                                             l_nivel,
                                             0,
                                             p_regla,
                                             user,
                                             l_type_code,
                                             c.equi);
         EXCEPTION WHEN OTHERS THEN
               DBMS_OUTPUT.put_line ('Error al INSERTar REL_PROGRAMAXALUMNO ' || SQLERRM);
         END;

      END LOOP;

      COMMIT;
   END;
   --
   --
   PROCEDURE p_alumnos_x_asignar (p_regla NUMBER)
   IS
      vl_existe               NUMBER;
      l_valida_campus_nivel   NUMBER;
      l_materia_agp           VARCHAR2 (20);
      l_contador              NUMBER := 0;
      l_equi                  VARCHAR2 (20);
      l_sql                   VARCHAR2 (500);
      l_periodo_ctl           VARCHAR2 (20);
      l_sp                    NUMBER;
      l_periodicidad          VARCHAR2 (1);
      l_ptrm                  VARCHAR2 (10);
      l_semis                 VARCHAR2 (10);
      l_cuenta_sfr            number;
      l_bim                   varchar2(1);
      l_term_code             varchar2(6);
      l_contar_algo           number;
      l_contar_pr             number;
      l_contador_tope         number:=0;
      l_contador_tope2        number:=0;
      l_contador_tope3        number:=0;
      l_anti                  number:=0;
      l_contar_inc            number:=0;
      l_type_code             varchar2(1);

      --Jpg@Create@Mar22
      lc_PC constant varchar2(2):='PC';
      lc_NA constant varchar2(2):='NA';
      lc_AP constant varchar2(2):='AP';
      lc_EC constant varchar2(2):='EC';
      lc_0  constant varchar2(1):='0';

   BEGIN

      BEGIN
         DELETE rel_alumnos_x_asignar                    --alumnos por materia
         WHERE rel_alumnos_x_asignar_no_regla = p_regla;
         COMMIT;
      END;

      BEGIN

         DELETE rel_alumnos_x_asignar                    --alumnos por materia
         WHERE rel_alumnos_x_asignar_no_regla IS NULL;

         --  AND ID_ALUMNO = '010568329';
         COMMIT;
      END;

      DELETE
      FROM sztprext
      WHERE 1  = 1
      AND sztprext_no_regla = p_regla;

      commit;


      BEGIN

         DELETE materia_faltante_lic
         WHERE regla = p_regla;

         COMMIT;
      END;


      BEGIN

         DELETE saturn.tmp_valida_faltantes
         WHERE 1 = 1
         AND regla = p_regla;

         COMMIT;
      END;

      --
      BEGIN
         FOR c
                IN (SELECT DISTINCT
                                   sgbstdn_pidm,
                                   programa,
                                   rel_programaxalumno_no_regla regla,
                                   ID_ALUMNO matricula
                    FROM REL_PROGRAMAXALUMNO
                    WHERE     1 = 1
                    AND REL_PROGRAMAXALUMNO_no_regla = p_regla
                   )

             LOOP
                BEGIN
                   PKG_VALIDA_PRONO.P_VALIDA_FALTA (c.SGBSTDN_PIDM,
                                                    c.PROGRAMA,
                                                    p_regla);
                END;

                dbms_output.put_line('entra a dashboard '||c.matricula);

                COMMIT;
             END LOOP;
      END;


      FOR alumno
         IN (SELECT DISTINCT sgbstdn_pidm pidm,
                             programa programa,
                             campus,
                             nivel,
                             STUDY_PATH
               FROM rel_programaxalumno
               WHERE 1 = 1
               AND rel_programaxalumno_no_regla = P_REGLA
--and id_alumno='010194297'
--                AND ID_ALUMNO = 'B'
      )
      LOOP

         BEGIN

            dbms_output.put_line('entra a alumno ');

            SELECT DISTINCT
                           c.sorlcur_term_code_ctlg ctlg, c.sorlcur_key_seqno
            INTO l_periodo_ctl, l_sp
            FROM sorlcur c
            WHERE     1 = 1
            AND c.sorlcur_pidm = alumno.pidm
            AND c.sorlcur_lmod_code = 'LEARNER'
            AND c.sorlcur_roll_ind = 'Y'
            AND c.sorlcur_cact_code = 'ACTIVE'
            AND c.sorlcur_program = alumno.programa
            AND c.sorlcur_seqno =
                                   (SELECT MAX (c1x.sorlcur_seqno)
                                    FROM sorlcur c1x
                                    WHERE     c1x.sorlcur_pidm = c.sorlcur_pidm
                                    AND c1x.sorlcur_lmod_code = c.sorlcur_lmod_code
                                    AND c1x.sorlcur_roll_ind =  c.sorlcur_roll_ind
                                    AND c1x.sorlcur_cact_code = c.sorlcur_cact_code
                                    AND c1x.sorlcur_program = c.sorlcur_program
                                    );

         EXCEPTION WHEN OTHERS THEN
               l_periodo_ctl := '000000';
         END;


         FOR d
            IN (WITH secuencia
                     AS (  SELECT DISTINCT
                                           smrpcmt_program AS programa,
                                           smrpcmt_term_code_eff periodo,
                                           REGEXP_SUBSTR (smrpcmt_text,'[^|"]+',1,1)AS id_materia,
                                           TO_NUMBER (smrpcmt_text_seqno)AS id_secuencia,
                                           NVL (sztmaco_matpadre,REGEXP_SUBSTR (smrpcmt_text,'[^|"]+',1,1))id_materia_gpo
                            FROM smrpcmt,
                                 sztmaco
                            WHERE  1 = 1
                            AND smrpcmt_text IS NOT NULL
                            AND REGEXP_SUBSTR (smrpcmt_text,'[^|"]+',1,1) = sztmaco_mathijo(+)
                            AND smrpcmt_program = alumno.programa
                            ORDER BY 4
                          )
                          SELECT DISTINCT fal.per,
                                          fal.area,
                                          fal.materia,
                                          fal.nombre_mat,
                                          fal.calIFica,
                                          fal.tipo,
                                          fal.pidm,
                                          fal.matricula,
                                          TO_NUMBER (sec.id_secuencia) id_secuencia,
                                          fal.materia_padre,
                                          rul.smrarul_subj_code subj,
                                          rul.smrarul_crse_numb_low crse,
                                          alumno.campus,
                                          alumno.nivel,
                                          p_regla,
                                          alumno.STUDY_PATH,
                                          fal.aprobadas_curr,
                                          fal.curso_curr,
                                          fal.total_curr
                            FROM tmp_valida_faltantes fal
                            JOIN secuencia sec ON fal.programa = sec.Programa
                                               AND fal.materia_padre = sec.id_materia_gpo
                                               AND l_periodo_ctl = SEC.periodo
                            JOIN smrarul rul ON  rul.smrarul_subj_code|| rul.smrarul_crse_numb_low = fal.materia
                                    and smrarul_area=fal.area
                            WHERE 1 = 1
                            AND fal.PIDM = alumno.pidm
                            AND fal.programa = alumno.programa
                            AND regla = p_regla
                            AND materia NOT LIKE 'SESO%'
                            AND materia NOT LIKE 'OPT%'
                            AND materia NOT IN ('L2DE147', 'L2DE131')
                            ORDER BY 9
                )
         LOOP
                dbms_output.put_line('Entro a materia falta: ' ||d.materia);

                INSERT INTO MATERIA_FALTANTE_LIC
                                         VALUES (d.per,
                                                 d.area,
                                                 d.materia,
                                                 d.nombre_mat,
                                                 d.calIFica,
                                                 d.tipo,
                                                 d.pidm,
                                                 d.matricula,
                                                 d.id_secuencia,
                                                 d.materia_padre,
                                                 d.subj,
                                                 d.crse,
                                                 d.campus,
                                                 d.nivel,
                                                 p_regla,
                                                 d.STUDY_PATH,
                                                 d.aprobadas_curr,
                                                 d.curso_curr,
                                                 d.total_curr);
         END LOOP;

         COMMIT;
      END LOOP;




      BEGIN

        SELECT COUNT(*)
        INTO l_valida_campus_nivel
        FROM sztalgo lgo,
             zstpara ara
        WHERE 1 = 1
        AND lgo.sztalgo_no_regla = p_regla
        AND ara.zstpara_mapa_id='CAMP_PRONO'
        AND ara.zstpara_param_id = sztalgo_camp_code
        AND ara.zstpara_param_valor = sztalgo_levl_code
        AND sztalgo_levl_code ='LI';

      EXCEPTION WHEN OTHERS THEN
            NULL;
      END;

      --dbms_output.put_line('Valor nivel  '||l_valida_campus_nivel);



      l_contador_tope:= 0;
      l_contador_tope2:=0;
      l_contador_tope3:=0;

      IF l_valida_campus_nivel > 0 THEN

        dbms_output.put_line('Entra a lic');

         FOR XX IN (SELECT distinct  PIDM
                           FROM materia_faltante_lic
                           WHERE 1 = 1
                           AND regla = p_regla
--and pidm=fget_pidm('010194297')
--                           AND MATERIA_PADRE ='L2DE102'
                           order by PIDM
        ) loop

                      l_contador_tope:= 0;
                      l_contador_tope2:=0;
                      l_contador_tope3:=0;



         FOR t IN (SELECT *
                   FROM materia_faltante_lic
                   WHERE 1 = 1
                   AND regla = p_regla
--                   AND MATERIA_PADRE ='L2DE102'
                   AND PIDM = xx.pidm
                   order by secuencia
----                   AND matricula ='010001947'
                   )
                 LOOP

dbms_output.put_line(' Materia: '||t.materia);



                      l_contador_tope:=l_contador_tope+1;

                      l_contador_tope2:=t.APROBADAS+t.CURSOS;

                      l_contador_tope3:=l_contador_tope+l_contador_tope2;

                    FOR c IN (
                              SELECT DISTINCT
                                              NVL (f.stvterm_acyr_code,TO_CHAR (SYSDATE, 'yyyy'))AS Año,
                                              c.sztalgo_term_code_new AS id_ciclo,
                                              c.sztalgo_ptrm_code_new AS id_periodo,
                                              a.id_alumno AS id_alumno,
                                              d.PIDM,
                                              a.programa AS id_programa,
                                              d.materia AS clave_materia,
                                              lc_0 AS id_grupo,
                                              lc_0  AS id_matricula,
                                               a.campus,
                                              lc_0 AS Id_Tutor,
                                              b.sobptrm_start_date AS dta_inicio_bimestre,
                                              b.sobptrm_end_date AS dta_fin_bimestre,
                                              d.secuencia AS secuencia,
                                              c.sztalgo_term_code_new svrproy_term_code,
                                              a.study_path as study_path,
                                              a.sgbstdn_pidm svrproy_pidm,
                                              d.smrarul_subj_code,
                                              d.smrarul_crse_numb_low,
                                              TRUNC (c.sztalgo_fecha_new) FECHA_INICIO,
                                              d.materia_padre,
                                              rel_programaxalumno_estatus estatus,
                                              d.APROBADAS,
                                              d.CURSOS,
                                              d.TOTAL_CURR
                               FROM rel_programaxalumno a,
                                    sobptrm b,
                                    sztalgo c,
--                                    TMP_FALTAN_LIC d,
                                    materia_faltante_lic d, --no_masivo
                                    stvterm f,
                                              (
                                               SELECT DISTINCT
                                                              sfrstcr_ptrm_code pperiodo,
                                                              sfrstcr_pidm,
                                                              ssbsect_ptrm_start_date,
                                                              sfrstcr_stsp_key_sequence,
                                                              sfrstcr_term_code periodo,
                                                              sfrstcr_stsp_key_sequence
                                                              study_path
                                                FROM ssbsect a,
                                                     sfrstcr c,
                                                     shrgrde
                                                WHERE 1 = 1
                                                AND ssbsect_term_code = sfrstcr_term_code
and sfrstcr_pidm=t.pidm
                                                AND c.sfrstcr_crn = ssbsect_crn
                                                AND c.sfrstcr_levl_code = shrgrde_levl_code
                                                AND (c.sfrstcr_grde_code = shrgrde_code
                                                                                    OR c.sfrstcr_grde_code IS NULL)
                                                AND a.ssbsect_ptrm_start_date IN
                                                                                 (SELECT MAX (a1.ssbsect_ptrm_start_date)
                                                                                  FROM SSBSECT a1
                                                                                  WHERE 1 = 1
                                                                                  AND a1.ssbsect_term_code = a.ssbsect_term_code
                                                                                  AND a1.ssbsect_crn =a.ssbsect_crn)
                                                and c.sfrstcr_term_code = (SElect MAx(x.sfrstcr_term_code) from sfrstcr x where x.sfrstcr_pidm = c.sfrstcr_pidm
                                                                            and substr(x.sfrstcr_term_code,5,1) not in (8,9) --quitamos nivelaciones
                                                                            )
                                               ) pperiodo
                                WHERE 1 = 1
                                AND a.campus = c.sztalgo_camp_code
--                                AND c.sztalgo_term_code_new = f.stvterm_code
AND NVL(pperiodo.PERIODO,sztalgo_term_code_new)=F.STVTERM_CODE
                                AND c.sztalgo_term_code = pperiodo.periodo(+)
                                AND c.sztalgo_ptrm_code = pperiodo.pperiodo(+)
                                AND fecha_inicio <= sztalgo_fecha_new
--AND A.FECHA_INICIO =  sztalgo_fecha_ANT
--                                AND c.sztalgo_term_code_new = b.sobptrm_term_code
and NVL(pperiodo.PERIODO,a.periodo) = b.sobptrm_term_code
and ( NVL(pperiodo.PERIODO,a.periodo) = c.sztalgo_term_code_new  OR
      NVL(pperiodo.PERIODO,a.periodo) = c.sztalgo_term_code)
and c.sztalgo_ptrm_code_new = Case When pkg_algoritmo.f_consulta_activos(0, a.sgbstdn_pidm) > 0 Then --Alumnos RE-CON
                                            (Select Max(x.sztalgo_ptrm_code_new)
                                            from sztalgo x
                                            where x.sztalgo_term_code_new=c.sztalgo_term_code_new
                                                and x.sztalgo_camp_code = c.sztalgo_camp_code
                                            and A.fecha_inicio <= x.sztalgo_fecha_new
                                            and x.sztalgo_no_regla=c.sztalgo_no_regla)
                                   Else         --Alumnos NI-FU
                                            (Select Min(x.sztalgo_ptrm_code_new)
                                            from sztalgo x
                                            where x.sztalgo_term_code_new=c.sztalgo_term_code_new
                                                and x.sztalgo_camp_code = c.sztalgo_camp_code
                                            and A.fecha_inicio <= x.sztalgo_fecha_new
                                            and x.sztalgo_no_regla=c.sztalgo_no_regla)
                              End
                                  AND ( b.sobptrm_ptrm_code = c.sztalgo_ptrm_code_new) -- OR b.sobptrm_ptrm_code = c.sztalgo_ptrm_code)
                                AND c.sztalgo_no_regla =a.rel_programaxalumno_no_regla
                                AND c.sztalgo_no_regla = t.regla                --RLS
                                AND d.materia = t.materia
                                AND d.pidm = t.pidm
--and a.id_alumno=:ID
                                AND a.sgbstdn_pidm = d.pidm
-- and d.pidm =480153
                                AND a.rel_programaxalumno_no_regla = d.regla
                                AND a.study_path = d.sp
                                AND a.sgbstdn_pidm = pperiodo.sfrstcr_pidm(+)
                                AND a.study_path = pperiodo.sfrstcr_stsp_key_sequence(+)
                                AND TRUNC (a.FECHA_INICIO) >= TRUNC (pperiodo.ssbsect_ptrm_start_date(+))
                                AND a.study_path = pperiodo.study_path(+)
--                                 AND d.tipo IN ('PC', 'NA')
                                AND d.tipo IN (lc_PC,lc_NA)
                                ORDER BY 4, 13, 14
                           )
                    LOOP

                        dbms_output.put_line('id_alumno:'||c.id_alumno||' Materia cursor  '||c.clave_materia);





                       BEGIN

                          SELECT DISTINCT sorlcur_admt_code
                          INTO l_equi
                          FROM sorlcur cur
                          WHERE     1 = 1
                          AND cur.sorlcur_program = c.id_programa
                          AND cur.sorlcur_pidm = c.svrproy_pidm
                          AND cur.sorlcur_lmod_code = 'LEARNER'
                          AND cur.sorlcur_roll_ind = 'Y'
                          AND cur.sorlcur_cact_code = 'ACTIVE'
                          AND cur.sorlcur_seqno =
                                                  (SELECT MAX (aa1.sorlcur_seqno)
                                                   FROM sorlcur aa1
                                                   WHERE 1 = 1
                                                   AND cur.sorlcur_pidm = aa1.sorlcur_pidm
                                                   AND cur.sorlcur_lmod_code = aa1.sorlcur_lmod_code
                                                   AND cur.sorlcur_roll_ind =aa1.sorlcur_roll_ind
                                                   AND cur.sorlcur_cact_code =aa1.sorlcur_cact_code
                                                   AND cur.sorlcur_program = aa1.sorlcur_program);
                       EXCEPTION WHEN OTHERS THEN
                             NULL;
                       END;

                       l_contador := l_contador + 1;

                       BEGIN

                          SELECT COUNT(*)
                          INTO l_cuenta_sfr
                          FROM sfrstcr
                          WHERE 1 = 1
                          AND sfrstcr_pidm = c.pidm
                          AND sfrstcr_stsp_key_sequence =c.study_path
                          AND sfrstcr_rsts_code ='RE';

                       EXCEPTION WHEN OTHERS THEN
                          NULL;
                       END;

                       BEGIN

                           SELECT DISTINCT zstpara_param_valor
                           INTO l_ptrm
                           FROM zstpara
                           WHERE 1 = 1
                           AND zstpara_mapa_id ='PTR_NI'
                           AND zstpara_param_desc =c.id_periodo;

                       EXCEPTION WHEN OTHERS THEN
                            l_ptrm:=c.id_periodo;
                       END;


                      dbms_output.put_line('Estatus '||c.estatus||' Periodos '||l_cuenta_sfr);

                       IF c.estatus IN ('N','F') AND  l_cuenta_sfr = 0 OR c.estatus ='R' THEN



                            BEGIN

                                SELECT distinct SZTALGO_TERM_CODE_NEW
                                INTO l_term_code
                                FROM sztalgo
                                WHERE 1 = 1
                                AND sztalgo_no_regla = p_regla
                                AND SZTALGO_PTRM_CODE = l_ptrm
                                AND SZTALGO_CAMP_CODE= c.campus;


                            exception when others then
                                dbms_output.put_line('Error '||sqlerrm||' Regla '||' Ptrm '|| substr(c.id_programa,1,3)||' ptrm '||l_ptrm);
                            end;

--                             dbms_output.put_line(' Materia si esta  '||c.materia_padre||' Parte del periodo '||l_ptrm||' Campus'||c.campus);

                            IF l_ptrm  = c.id_periodo then


                                 dbms_output.put_line(' Materia si esta  '||c.materia_padre);

                                  --dbms_output.put_line('Entra a periodo');

                                  BEGIN

                                    INSERT INTO rel_alumnos_x_asignar
                                                             VALUES (c.año,
                                                                     l_term_code,
                                                                     c.id_periodo,
                                                                     c.id_alumno,
                                                                     c.id_programa,
                                                                     c.clave_materia,
                                                                     c.id_grupo,
                                                                     c.id_matricula,
                                                                     c.campus,
                                                                     c.id_tutor,
                                                                     c.dta_inicio_bimestre,
                                                                     c.dta_inicio_bimestre,
                                                                     c.secuencia,
                                                                     c.svrproy_term_code,
                                                                     c.study_path,
                                                                     c.svrproy_pidm,
                                                                     c.materia_padre,
                                                                     c.smrarul_subj_code,
                                                                     c.smrarul_crse_numb_low,
                                                                     c.fecha_inicio,
                                                                     0,
                                                                     p_regla,
                                                                     user,
                                                                     null,
                                                                     l_equi,
                                                                     NULL);
                                  EXCEPTION WHEN OTHERS  THEN
                                        dbms_output.put_line(' Materia si esta  '||c.materia_padre||' error '||sqlerrm);
                                  END;

                            else

                                dbms_output.put_line('Contador tope zz '||l_contador_tope);

                                  BEGIN

                                    INSERT INTO rel_alumnos_x_asignar
                                                             VALUES (c.año,
                                                                     l_term_code,
                                                                     c.id_periodo,
                                                                     c.id_alumno,
                                                                     c.id_programa,
                                                                     c.clave_materia,
                                                                     c.id_grupo,
                                                                     c.id_matricula,
                                                                     c.campus,
                                                                     c.id_tutor,
                                                                     c.dta_inicio_bimestre,
                                                                     c.dta_inicio_bimestre,
                                                                     c.secuencia,
                                                                     c.svrproy_term_code,
                                                                     c.study_path,
                                                                     c.svrproy_pidm,
                                                                     c.materia_padre,
                                                                     c.smrarul_subj_code,
                                                                     c.smrarul_crse_numb_low,
                                                                     c.fecha_inicio,
                                                                     0,
                                                                     p_regla,
                                                                     user,
                                                                     null,
                                                                     l_equi,
                                                                     NULL);
                                  EXCEPTION WHEN OTHERS  THEN
                                        NULL;
                                  END;
                                  COMMIT;

                            END IF;

                       ELSE

                           --dbms_output.put_line('Entra a periodo 1378');

                           BEGIN

                               SELECT DISTINCT sztalgo_term_code_new
                               INTO l_term_code
                               FROM sztalgo
                               WHERE 1 = 1
                               AND sztalgo_no_regla = p_regla
                               AND SZTALGO_PTRM_CODE = c.id_periodo
                               AND SZTALGO_CAMP_CODE= substr(c.id_programa,1,3);
                           exception when others then
                            --   dbms_output.put_line('aqui esta el pex '||' periodo '||c.id_periodo||' '||sqlerrm);
                               l_term_code:=0;
                           end;

                         ---  dbms_output.put_line('Entra a ciclo '||l_term_code||' ciclo '||c.id_ciclo||' ptrm '||c.id_periodo);

                          IF  c.id_periodo != l_ptrm then

                              -- IF c.aprobadas+c.cursos < c.total_curr then
                            ---  dbms_output.put_line('Matricula '||t.MATRICULA||' tope '||l_contador_tope||' tope2 '||l_contador_tope2||' Tope3 '||l_contador_tope3||' Total '||t.TOTAL_CURR);
                             --    IF l_contador_tope3 <t.total_curr then

                                        BEGIN

                                          INSERT INTO rel_alumnos_x_asignar
                                                                   VALUES (c.año,
                                                                           c.id_ciclo,
                                                                           c.id_periodo,
                                                                           c.id_alumno,
                                                                           c.id_programa,
                                                                           c.clave_materia,
                                                                           c.id_grupo,
                                                                           c.id_matricula,
                                                                           c.campus,
                                                                           c.id_tutor,
                                                                           c.dta_inicio_bimestre,
                                                                           c.dta_inicio_bimestre,
                                                                           c.secuencia,
                                                                           c.svrproy_term_code,
                                                                           c.study_path,
                                                                           c.svrproy_pidm,
                                                                           c.materia_padre,
                                                                           c.smrarul_subj_code,
                                                                           c.smrarul_crse_numb_low,
                                                                           c.fecha_inicio,
                                                                           0,
                                                                           p_regla,
                                                                           user,
                                                                           null,
                                                                           l_equi,
                                                                           NULL);
                                        EXCEPTION WHEN OTHERS  THEN
                                              NULL;
                                        END;

                             --   end IF;

                                COMMIT;

                          ELSE

                             BEGIN

                                          INSERT INTO rel_alumnos_x_asignar
                                                                   VALUES (c.año,
                                                                           c.id_ciclo,
                                                                           c.id_periodo,
                                                                           c.id_alumno,
                                                                           c.id_programa,
                                                                           c.clave_materia,
                                                                           c.id_grupo,
                                                                           c.id_matricula,
                                                                           c.campus,
                                                                           c.id_tutor,
                                                                           c.dta_inicio_bimestre,
                                                                           c.dta_inicio_bimestre,
                                                                           c.secuencia,
                                                                           c.svrproy_term_code,
                                                                           c.study_path,
                                                                           c.svrproy_pidm,
                                                                           c.materia_padre,
                                                                           c.smrarul_subj_code,
                                                                           c.smrarul_crse_numb_low,
                                                                           c.fecha_inicio,
                                                                           0,
                                                                           p_regla,
                                                                           user,
                                                                           null,
                                                                           l_equi,
                                                                           NULL);
                             EXCEPTION WHEN OTHERS  THEN
                                   NULL;
                             END;

                               COMMIT;

                          end IF;
----
--                                COMMIT;
----

--                          END IF;

                       END IF;

                       -- exit when l_contador_tope3 =t.total_curr;

                    END LOOP;
                    exit when l_contador_tope3 =t.total_curr;

                 END LOOP;

        END LOOP ;

      ELSE
         l_contador := 0;


         FOR t IN (SELECT *
                   FROM materia_faltante_lic
                   WHERE 1 = 1
                   AND regla = p_regla
--                   AND matricula ='010507421'
                   )
                 LOOP

                         FOR c
                            IN (
                                SELECT DISTINCT
                                                NVL (f.stvterm_acyr_code, TO_CHAR (SYSDATE, 'yyyy')) AS año,
                                                c.sztalgo_term_code_new as id_ciclo,
                                                null id_periodo,
                                                a.id_alumno as id_alumno,
                                                a.programa as id_programa,
                                                d.materia as clave_materia,
                                                lc_0 as id_grupo,
                                                lc_0 as id_matricula,
                                                a.campus AS Campus,
                                                lc_0 as id_tutor,
                                                b.sobptrm_start_date as dta_inicio_bimestre,
                                                null dta_fin_bimestre,
                                                d.secuencia AS Secuencia,
                                                c.sztalgo_term_code_new svrproy_term_code,
                                                a.study_path as study_path,
                                                a.sgbstdn_pidm svrproy_pidm,
                                                d.smrarul_subj_code,
                                                d.smrarul_crse_numb_low,
                                                TRUNC (c.sztalgo_fecha_new) FECHA_INICIO,
                                                d.materia_padre,
                                                rel_programaxalumno_estatus estatus,
                                                d.nivel,
                                                a.periodo_catalogo,
                                                d.APROBADAS,
                                                d.CURSOS,
                                                d.TOTAL_CURR
                                  FROM rel_programaxalumno a,
                                       sobptrm b,
                                       sztalgo c,
--                                       TMP_FALTAN_LIC d,
                                        materia_faltante_lic d, --no_masivo
                                       stvterm f,
                                       (
                                               SELECT DISTINCT
                                                              sfrstcr_ptrm_code pperiodo,
                                                              sfrstcr_pidm,
                                                              ssbsect_ptrm_start_date,
                                                              sfrstcr_stsp_key_sequence,
                                                              sfrstcr_term_code periodo,
                                                              sfrstcr_stsp_key_sequence
                                                              study_path
                                                FROM ssbsect a,
                                                     sfrstcr c,
                                                     shrgrde
                                                WHERE 1 = 1
                                                AND ssbsect_term_code = sfrstcr_term_code
--and sfrstcr_pidm=t.pidm
                                                AND c.sfrstcr_crn = ssbsect_crn
                                                AND c.sfrstcr_levl_code = shrgrde_levl_code
                                                AND (c.sfrstcr_grde_code = shrgrde_code
                                                                                    OR c.sfrstcr_grde_code IS NULL)
                                                AND a.ssbsect_ptrm_start_date IN
                                                                                 (SELECT MAX (a1.ssbsect_ptrm_start_date)
                                                                                  FROM SSBSECT a1
                                                                                  WHERE 1 = 1
                                                                                  AND a1.ssbsect_term_code = a.ssbsect_term_code
                                                                                  AND a1.ssbsect_crn =a.ssbsect_crn)
                                                and c.sfrstcr_term_code = (SElect MAx(x.sfrstcr_term_code) from sfrstcr x where x.sfrstcr_pidm = c.sfrstcr_pidm
                                                                            and substr(x.sfrstcr_term_code,5,1) not in (8,9) --quitamos nivelaciones
                                                                            )
                                         ) pperiodo
                                  WHERE 1 = 1
                                  AND a.campus = c.sztalgo_camp_code
--                                AND c.sztalgo_term_code_new = f.stvterm_code
AND NVL(pperiodo.PERIODO,sztalgo_term_code_new)=F.STVTERM_CODE
                                AND c.sztalgo_term_code = pperiodo.periodo(+)
                                AND c.sztalgo_ptrm_code = pperiodo.pperiodo(+)
                                AND fecha_inicio <= sztalgo_fecha_new
--AND A.FECHA_INICIO =  sztalgo_fecha_ANT
--                                AND c.sztalgo_term_code_new = b.sobptrm_term_code
and NVL(pperiodo.PERIODO,a.periodo) = b.sobptrm_term_code
and ( NVL(pperiodo.PERIODO,a.periodo) = c.sztalgo_term_code_new  OR
      NVL(pperiodo.PERIODO,a.periodo) = c.sztalgo_term_code)
and c.sztalgo_ptrm_code_new = Case When pkg_algoritmo.f_consulta_activos(0, a.sgbstdn_pidm) > 0 Then --Alumnos RE-CON
                                            (Select Max(x.sztalgo_ptrm_code_new)
                                            from sztalgo x
                                            where x.sztalgo_term_code_new=c.sztalgo_term_code_new
                                                and x.sztalgo_camp_code = c.sztalgo_camp_code
                                            and A.fecha_inicio <= x.sztalgo_fecha_new
                                            and x.sztalgo_no_regla=c.sztalgo_no_regla)
                                   Else         --Alumnos NI-FU
                                            (Select Min(x.sztalgo_ptrm_code_new)
                                            from sztalgo x
                                            where x.sztalgo_term_code_new=c.sztalgo_term_code_new
                                                and x.sztalgo_camp_code = c.sztalgo_camp_code
                                            and A.fecha_inicio <= x.sztalgo_fecha_new
                                            and x.sztalgo_no_regla=c.sztalgo_no_regla)
                              End
                                  AND ( b.sobptrm_ptrm_code = c.sztalgo_ptrm_code_new) -- OR b.sobptrm_ptrm_code = c.sztalgo_ptrm_code)
                                  AND c.sztalgo_no_regla = a.rel_programaxalumno_no_regla
                                  AND c.sztalgo_no_regla = p_regla                  --RLS
                                  AND a.sgbstdn_pidm = d.pidm
                                  AND a.rel_programaxalumno_no_regla = d.regla
                                  AND a.study_path = d.sp
                                  AND a.sgbstdn_pidm = pperiodo.SFRSTCR_PIDM(+)
                                  AND a.study_path = pperiodo.sfrstcr_stsp_key_sequence(+)
                                  AND TRUNC (a.fecha_inicio) >= TRUNC (pperiodo.ssbsect_ptrm_start_date(+))
                                  AND a.study_path = pperiodo.study_path(+)
                                  AND d.tipo IN ('PC', 'NA')
                                  AND c.sztalgo_no_regla = t.regla               --RLS
                                  AND d.materia = t.materia
                                  AND d.pidm = t.pidm
                                ORDER BY 4, 13, 14)
                         LOOP

                            BEGIN

                               SELECT DISTINCT sztdtec_periodicidad
                               INTO l_periodicidad
                               FROM sztdtec
                               WHERE 1 = 1
                               AND sztdtec_program = c.id_programa
                               AND sztdtec_term_code = c.periodo_catalogo;

                            EXCEPTION WHEN OTHERS THEN
                                NULL;
                            END;

                            BEGIN

                               SELECT DISTINCT SZTDTEC_MOD_TYPE
                               INTO l_semis
                               FROM sztdtec
                               WHERE  1 = 1
                               AND sztdtec_program = c.id_programa
                               AND sztdtec_term_code = c.periodo_catalogo;

                            EXCEPTION WHEN OTHERS THEN
                                  NULL;
                            END;

                            If substr(c.id_programa,4,2)='DI' THEN

                                     BEGIN

                                            SELECT DISTINCT SORLCUR_VPDI_CODE
                                             INTO l_ptrm
                                                FROM sorlcur
                                                WHERE 1 = 1
                                                and SORLCUR_PIDM=C.svrproy_pidm
                                                and SORLCUR_LMOD_CODE='LEARNER'
                                                and SORLCUR_CAMP_CODE='UTS'
                                                and SORLCUR_LEVL_CODE IN ('EC','ID')
                                                AND SORLCUR_TERM_CODE=(SELECT MAX (A.SORLCUR_TERM_CODE)
                                                                              FROM SORLCUR A
                                                                              WHERE 1=1
                                                                              AND A.SORLCUR_PIDM=C.svrproy_pidm
                                                                              and a.SORLCUR_LMOD_CODE='LEARNER'
                                                                              and a.SORLCUR_CAMP_CODE='UTS'
                                                                              and a.SORLCUR_LEVL_CODE IN ('EC','ID')
                                                                              and a.SORLCUR_PROGRAM=SORLCUR_PROGRAM);
                                     EXCEPTION WHEN OTHERS THEN
                                          dbms_output.put_line(sqlerrm);
                                       null;
                                     END;

                            ELSIF substr(c.id_programa,4,2)='CU' THEN

                                      BEGIN
                                          SELECT DISTINCT SORLCUR_VPDI_CODE
                                             INTO l_ptrm
                                                FROM sorlcur
                                                WHERE 1 = 1
                                                and SORLCUR_PIDM=C.svrproy_pidm
                                                and SORLCUR_LMOD_CODE='LEARNER'
                                                and SORLCUR_CAMP_CODE='UTS'
                                                and SORLCUR_LEVL_CODE IN ('EC','ID')
                                                AND SORLCUR_TERM_CODE=(SELECT MAX (A.SORLCUR_TERM_CODE)
                                                                              FROM SORLCUR A
                                                                              WHERE 1=1
                                                                              AND A.SORLCUR_PIDM=C.svrproy_pidm
                                                                              and a.SORLCUR_LMOD_CODE='LEARNER'
                                                                              and a.SORLCUR_CAMP_CODE='UTS'
                                                                              and a.SORLCUR_LEVL_CODE IN ('EC','ID')
                                                                              and a.SORLCUR_PROGRAM=SORLCUR_PROGRAM);

                                     EXCEPTION WHEN OTHERS THEN
                                          dbms_output.put_line(sqlerrm);
                                       null;
                                     END;
                            else

                               BEGIN

                                   SELECT sztcopp_ptm
                                   INTO l_ptrm
                                   FROM sztcopp
                                   WHERE 1 = 1
                                   AND sztcopp_campus = c.campus
                                   AND sztcopp_nivel = c.nivel
                                   AND sztcopp_so = l_semis
                                   AND sztcopp_periodicad = l_periodicidad
                                   AND sztcopp_no_regla = p_regla;

                                EXCEPTION WHEN OTHERS THEN
                                      dbms_output.put_line('Error no se encontro ptrm en sztcopp'||sqlerrm);
                                      l_ptrm:=null;
                                END;

                            END IF;
                             dbms_output.put_line('Alum '||c.id_alumno||' ptrm '||l_ptrm||' campus '||c.campus||' nivel '||c.nivel||' semis '||l_semis||' periodicidad '||l_periodicidad||' programa: '||c.id_programa);

                            BEGIN

                               SELECT DISTINCT sorlcur_admt_code
                               INTO l_equi
                               FROM sorlcur cur
                               WHERE 1 = 1
                               AND cur.sorlcur_program = c.id_programa
                               AND cur.sorlcur_pidm = c.svrproy_pidm
                               AND cur.sorlcur_lmod_code = 'LEARNER'
                               AND cur.sorlcur_roll_ind = 'Y'
                               AND cur.sorlcur_cact_code = 'ACTIVE'
                               AND cur.sorlcur_seqno =
                                                      (SELECT MAX (aa1.sorlcur_seqno)
                                                       FROM SORLCUR aa1
                                                       WHERE 1 = 1
                                                       AND cur.sorlcur_pidm = aa1.sorlcur_pidm
                                                       AND cur.sorlcur_lmod_code = aa1.sorlcur_lmod_code
                                                       AND cur.sorlcur_roll_ind =  aa1.sorlcur_roll_ind
                                                       AND cur.sorlcur_cact_code = aa1.sorlcur_cact_code
                                                       AND cur.sorlcur_program = aa1.sorlcur_program);

                            EXCEPTION WHEN OTHERS THEN
                                  l_equi := 'RE';
                            END;

                            l_contador := l_contador + 1;

                            IF c.APROBADAS+c.CURSOS < c.total_curr then

                                    BEGIN
                                       INSERT INTO rel_alumnos_x_asignar
                                                            VALUES (c.año,
                                                                    c.id_ciclo,
                                                                    l_ptrm,
                                                                    c.id_alumno,
                                                                    c.id_programa,
                                                                    c.clave_materia,
                                                                    c.id_grupo,
                                                                    c.id_matricula,
                                                                    c.campus,
                                                                    c.id_tutor,
                                                                    c.dta_inicio_bimestre,
                                                                    c.dta_fin_bimestre,
                                                                    c.secuencia,
                                                                    c.svrproy_term_code,
                                                                    c.study_path,
                                                                    c.svrproy_pidm,
                                                                    c.materia_padre,
                                                                    c.smrarul_subj_code,
                                                                    c.smrarul_crse_numb_low,
                                                                    c.fecha_inicio,
                                                                    0,
                                                                    p_regla,
                                                                    user,
                                                                    null,
                                                                    l_equi,
                                                                    c.periodo_catalogo);
                                    EXCEPTION WHEN OTHERS THEN
                                          NULL;
                                    END;


                            end IF;
                --
                --            IF l_contador = 100
                --            THEN
                --               COMMIT;
                --               l_contador := 0;
                --            END IF;

                             commit;

                         END LOOP;

                END LOOP;

      END IF;


      COMMIT;

     for c in (SELECT ID_CICLO,
                        b.campus,
                        b.nivel,
                        a.rel_alumnos_x_asignar_no_regla,
                        a.secuencia,
                        a.SVRPROY_PIDM pidm,
                        a.STUDY_PATH,
                        a.CLAVE_MATERIA_AGP
                  FROM rel_alumnos_x_asignar a
                  JOIN REL_PROGRAMAXALUMNO b on b.SGBSTDN_PIDM = a.SVRPROY_PIDM
                                            AND b.REL_PROGRAMAXALUMNO_NO_REGLA = a.REL_ALUMNOS_X_ASIGNAR_NO_REGLA
                  WHERE 1 = 1
                  AND rel_alumnos_x_asignar_no_regla = p_regla
                  order by secuencia asc

                )loop

                    dbms_output.put_line('entra a uts 1 campus '||c.campus);

                    IF c.campus ='UIN' then

                        BEGIN

                            DELETE rel_alumnos_x_asignar
                            WHERE 1 = 1
                            AND rel_alumnos_x_asignar_no_regla = c.rel_alumnos_x_asignar_no_regla
                            AND SVRPROY_PIDM = c.pidm
                            AND CLAVE_MATERIA_AGP not in (SELECT DISTINCT SZTPINC_MATERIA
                                                          FROM sztpinc
                                                          WHERE 1 = 1
                                                          AND sztpinc_campus ='UIN'
                                                          AND sztpinc_nivel ='MA'
                                                          AND SZTPINC_ACTIVO ='S');
                        exception when others then
                            null;
                        end;


                    elsIF c.campus ='INC' then

                      dbms_output.put_line('entra a inc ');

                        BEGIN

                            DELETE rel_alumnos_x_asignar
                            WHERE 1 = 1
                            AND rel_alumnos_x_asignar_no_regla = c.rel_alumnos_x_asignar_no_regla
                            AND SVRPROY_PIDM = c.pidm
                            AND CLAVE_MATERIA_AGP not in (SELECT DISTINCT SZTPINC_MATERIA
                                                          FROM sztpinc
                                                          WHERE 1 = 1
                                                          AND sztpinc_campus ='INC'
                                                          AND sztpinc_nivel ='MA'
                                                          AND SZTPINC_ACTIVO ='S');
                        exception when others then
                            null;
                        end;

                       BEGIN

                              SELECT COUNT(*)
                              INTO l_cuenta_sfr
                              FROM sfrstcr
                              WHERE 1 = 1
                              AND sfrstcr_pidm = c.pidm
                              AND sfrstcr_stsp_key_sequence =c.study_path
                              AND sfrstcr_rsts_code ='RE';

                       EXCEPTION WHEN OTHERS THEN
                          NULL;
                       END;

                       BEGIN

                           SELECT distinct REL_PROGRAMAXALUMNO_ESTATUS
                           INTO l_type_code
                           FROM REL_PROGRAMAXALUMNO
                           WHERE 1 = 1
                           AND REL_PROGRAMAXALUMNO_NO_REGLA =c.rel_alumnos_x_asignar_no_regla
                           AND SGBSTDN_PIDM = c.pidm;


                       exception when others then
                            null;
                       end;

                    
                       IF l_type_code IN ('N','F') AND  l_cuenta_sfr = 0 OR l_type_code ='R' THEN

                            -- para pronostico de INC

                            dbms_output.put_line('entra a inc v1 ');

                            BEGIN

                                DELETE
                                FROM rel_alumnos_x_asignar rxa
                                WHERE 1 = 1
                                AND ID_CICLO ='252241'
                                AND rel_alumnos_x_asignar_no_regla = c.rel_alumnos_x_asignar_no_regla
                                AND SVRPROY_PIDM = c.pidm;

                            exception when others then
                                null;
                            end;

                            update rel_alumnos_x_asignar set ID_PERIODO ='M0A'
                            WHERE 1 = 1
                            AND rel_alumnos_x_asignar_no_regla = p_regla
                            AND SVRPROY_PIDM = c.pidm;



                       ELSE

                            dbms_output.put_line('entra a inc v2 ');

                            BEGIN

                                DELETE
                                FROM rel_alumnos_x_asignar rxa
                                WHERE 1 = 1
                                AND ID_CICLO ='262241'
                                AND rel_alumnos_x_asignar_no_regla = c.rel_alumnos_x_asignar_no_regla
                                AND SVRPROY_PIDM = c.pidm;

                            exception when others then
                                null;
                            end;

                            update rel_alumnos_x_asignar set ID_PERIODO ='M2A'
                            WHERE 1 = 1
                            AND rel_alumnos_x_asignar_no_regla = p_regla
                            AND SVRPROY_PIDM = c.pidm;

--
                       END IF;

                        BEGIN

                            SELECT COUNT(*)
                            INTO l_contar_inc
                            FROM rel_alumnos_x_asignar rxa
                            WHERE 1 = 1
                            AND rel_alumnos_x_asignar_no_regla = c.rel_alumnos_x_asignar_no_regla
                            AND CLAVE_MATERIA_AGP = c.CLAVE_MATERIA_AGP
                            AND SVRPROY_PIDM = c.pidm
                            AND campus = c.campus
                            AND substr(rxa.ID_PROGRAMA,4,2)=c.nivel
                            AND CLAVE_MATERIA_AGP in (SELECT SZTPINC_MATERIA
                                                      FROM  sztpinc
                                                      WHERE 1 = 1
                                                      AND sztpinc_activo ='S'
--                                                      AND SZTPINC_SECUENCIA = c.SECUENCIA
                                                     -- AND SZTPINC_QA = to_char('Q'||get_qa(rxa.ID_PROGRAMA,rxa.SVRPROY_PIDM))
                                                      );

                        exception when others then
                            null;
                        end;


                        dbms_output.put_line('entra a inc v3 contar  '||l_contar_inc);


--                        IF l_contar_inc =0 then
--
--                            BEGIN
--
--                                DELETE
--                                FROM rel_alumnos_x_asignar rxa
--                                WHERE 1 = 1
--                                AND rel_alumnos_x_asignar_no_regla = c.rel_alumnos_x_asignar_no_regla
--                                AND SVRPROY_PIDM = c.pidm
--                                AND CLAVE_MATERIA_AGP = c.CLAVE_MATERIA_AGP;
--
--                            exception when others then
--                                null;
--                            end;
--
--                        end IF;

                    elsIF c.campus IN ('UTS','EAF')  then

                           dbms_output.put_line('entra a uts 2 ');

                           IF c.nivel IN ('EC','ID') then

                                dbms_output.put_line('entra a uts 3 ');

                                FOR D IN (SELECT distinct SOBPTRM_PTRM_CODE ptrm,
                                                            SOBPTRM_START_DATE fecha_inicio,
                                                            ZSTPARA_PARAM_DESC secuencia
                                            FROM SOBPTRM a
                                           JOIN ZSTPARA b on b.ZSTPARA_mapa_ID ='PRONO_EC'
                                                          AND B.ZSTPARA_PARAM_ID= (SELECT x.SZTALGO_PTRM_CODE_NEW
                                                                     FROM sztalgo x
                                                                     WHERE 1 = 1
                                                                     AND x.sztalgo_no_regla =c.rel_alumnos_x_asignar_no_regla
--                                                                     AND SUBSTR (x.SZTALGO_PTRM_CODE_NEW,2,1) in ('D','3') --Jpg@Modify240123
                                                                     )
                                            WHERE 1 = 1
                                            AND a.SOBPTRM_PTRM_CODE=ZSTPARA_PARAM_VALOR
                                            AND SOBPTRM_TERM_CODE =C.ID_CICLO
                                            order by 3 asc
                                            )loop

                                                IF c.secuencia = d.secuencia then

                                                dbms_output.put_line('secuencia a '||c.secuencia||' secuencia b '||d.secuencia||' ptrm '||d.ptrm);


                                                    UPDATE rel_alumnos_x_asignar set ID_PERIODO = d.ptrm,
                                                                                     FECHA_INICIO = d.fecha_inicio
                                                    WHERE 1 = 1
                                                    AND SVRPROY_PIDM = c.pidm
                                                    AND rel_alumnos_x_asignar_no_regla = c.rel_alumnos_x_asignar_no_regla
--                                                    AND secuencia<>1
                                                    AND secuencia=d.secuencia;
--                                                    AND SUBSTR(ID_PERIODO,1,1)= SUBSTR(d.ptrm,3,1);
                                                 --
                                                end IF;

                                            END LOOP;

                                            commit;


                           end IF;

                    end IF;


                END LOOP;

     BEGIN

       SELECT COUNT(*)
       INTO l_anti
       FROM sztalgo
       WHERE 1 = 1
       AND sztalgo_no_regla = p_regla
       AND SZTALGO_ANTICIPADO ='S';


     exception when others then
       null;
     end;


     IF l_anti = 0 then
--      --borra prerequistos --Jpg@Modify@Ene2022 se activa
          BEGIN p_prereq(p_regla); end;
     end IF;

        ------- Elimina las materias de derecho cuANDo ya tiene cursado 49 materias
     BEGIN
            p_quita_derecho(p_regla);
            Commit;
     Exception
        When Others then
            null;
     End;

     p_track_prono(p_regla,'Termina P_ALUMNOS_X_ASIGNAR');

   END P_ALUMNOS_X_ASIGNAR;
   --
   --
   PROCEDURE p_alumnos_x_asignar_M (p_regla NUMBER)
   IS
      vl_existe               NUMBER;
      l_valida_campus_nivel   NUMBER;
      l_materia_agp           VARCHAR2 (20);
      l_contador              NUMBER := 0;
      l_equi                  VARCHAR2 (20);
      l_sql                   VARCHAR2 (500);
      l_periodo_ctl           VARCHAR2 (20);
      l_sp                    NUMBER;
      l_periodicidad          VARCHAR2 (1);
      l_ptrm                  VARCHAR2 (10);
      l_semis                 VARCHAR2 (10);
      l_cuenta_sfr            number;
      l_bim                   varchar2(1);
      l_term_code             varchar2(6);
      l_contar_algo           number;
      l_contar_pr             number;
      l_contador_tope         number:=0;
      l_contador_tope2        number:=0;
      l_contador_tope3        number:=0;
      l_anti                  number:=0;
      l_contar_inc            number:=0;
      l_type_code             varchar2(1);
      lcont                        number:=0;
      --Jpg@Create@Mar22
      lc_PC constant varchar2(2):='PC';
      lc_NA constant varchar2(2):='NA';
      lc_AP constant varchar2(2):='AP';
      lc_EC constant varchar2(2):='EC';
      lc_0  constant varchar2(1):='0';
   BEGIN
p_track_prono(p_regla,'Inicia p_alumnos_x_asignar');
      BEGIN
         DELETE rel_alumnos_x_asignar                    --alumnos por materia
         WHERE rel_alumnos_x_asignar_no_regla = p_regla;
         COMMIT;
      END;

      BEGIN

         DELETE rel_alumnos_x_asignar                    --alumnos por materia
         WHERE rel_alumnos_x_asignar_no_regla IS NULL;

         --  AND ID_ALUMNO = '010568329';
         COMMIT;
      END;

      DELETE
      FROM sztprext
      WHERE 1  = 1
      AND sztprext_no_regla = p_regla;

      commit;

      --Jpg@Modify@Feb22 Se desactiva el dashboard alumno x alumnos en su caso se activa el masivo
       BEGIN p_materias_x_cursar(p_regla);  END;
       Begin p_materias_faltantes(p_regla); end;
       Begin p_materias_lic(p_regla); end;  --Jpg@ModifyMar22 -Optimización



      BEGIN

        SELECT COUNT(*)
        INTO l_valida_campus_nivel
        FROM sztalgo lgo,
             zstpara ara
        WHERE 1 = 1
        AND lgo.sztalgo_no_regla = p_regla
        AND ara.zstpara_mapa_id='CAMP_PRONO'
        AND ara.zstpara_param_id = sztalgo_camp_code
        AND ara.zstpara_param_valor = sztalgo_levl_code
        AND sztalgo_levl_code ='LI';

      EXCEPTION WHEN OTHERS THEN
            NULL;
      END;

      --dbms_output.put_line('Valor nivel  '||l_valida_campus_nivel);



      l_contador_tope:= 0;
      l_contador_tope2:=0;
      l_contador_tope3:=0;

      IF l_valida_campus_nivel > 0 THEN

        dbms_output.put_line('Entra a lic');
        p_track_prono(p_regla,'Entra a Lic inicia');

         FOR XX IN (SELECT /*+No_Parallel*/  distinct  PIDM
                           FROM TMP_FALTAN_LIC
                           WHERE 1 = 1
                           AND regla = p_regla
                           AND tipo IN (lc_PC,lc_NA)
--AND PIDM =62741
                           order by PIDM
        ) loop

                      l_contador_tope:= 0;
                      l_contador_tope2:=0;
                      l_contador_tope3:=0;

            lcont:=lcont+1;
            if mod(lcont,1000) = 0 THEN
                p_track_prono(p_regla,'Alumnos procesados: '||lcont||' ult pidm:'||xx.pidm);
            end if;
            if mod(lcont,100) = 0 THEN
                commit;
            end if;

         FOR t IN (SELECT /*+No_Parallel*/
                        *
                   FROM TMP_FALTAN_LIC
                   WHERE 1 = 1
                   AND regla = p_regla
                   AND PIDM = xx.pidm
                   AND tipo IN (lc_PC,lc_NA)
                    order by secuencia
                   )
                 LOOP


                      l_contador_tope:=l_contador_tope+1;

                      l_contador_tope2:=t.APROBADAS+t.CURSOS;

                      l_contador_tope3:=l_contador_tope+l_contador_tope2;

                    FOR c IN (
                              SELECT DISTINCT
                                              NVL (f.stvterm_acyr_code,TO_CHAR (SYSDATE, 'yyyy'))AS Año,
                                              c.sztalgo_term_code_new AS id_ciclo,
                                              c.sztalgo_ptrm_code_new AS id_periodo,
                                              a.id_alumno AS id_alumno,
                                              d.PIDM,
                                              a.programa AS id_programa,
                                              d.materia AS clave_materia,
                                              lc_0 AS id_grupo,
                                              lc_0  AS id_matricula,
                                               a.campus,
                                              lc_0 AS Id_Tutor,
                                              b.sobptrm_start_date AS dta_inicio_bimestre,
                                              b.sobptrm_end_date AS dta_fin_bimestre,
                                              d.secuencia AS secuencia,
                                              c.sztalgo_term_code_new svrproy_term_code,
                                              a.study_path as study_path,
                                              a.sgbstdn_pidm svrproy_pidm,
                                              d.smrarul_subj_code,
                                              d.smrarul_crse_numb_low,
                                              TRUNC (c.sztalgo_fecha_new) FECHA_INICIO,
                                              d.materia_padre,
                                              rel_programaxalumno_estatus estatus,
                                              d.APROBADAS,
                                              d.CURSOS,
                                              d.TOTAL_CURR
                               FROM rel_programaxalumno a,
                                    sobptrm b,
                                    sztalgo c,
                                    TMP_FALTAN_LIC d,
                                    stvterm f,
                                              (
                                               SELECT DISTINCT
                                                              sfrstcr_ptrm_code pperiodo,
                                                              sfrstcr_pidm,
                                                              ssbsect_ptrm_start_date,
                                                              sfrstcr_stsp_key_sequence,
                                                              sfrstcr_term_code periodo,
                                                              sfrstcr_stsp_key_sequence
                                                              study_path
                                                FROM ssbsect a,
                                                     sfrstcr c,
                                                     shrgrde
                                                WHERE 1 = 1
                                                AND ssbsect_term_code = sfrstcr_term_code
and sfrstcr_pidm=t.pidm
                                                AND c.sfrstcr_crn = ssbsect_crn
                                                AND c.sfrstcr_levl_code = shrgrde_levl_code
                                                AND (c.sfrstcr_grde_code = shrgrde_code
                                                                                    OR c.sfrstcr_grde_code IS NULL)
                                                AND a.ssbsect_ptrm_start_date IN
                                                                                 (SELECT MAX (a1.ssbsect_ptrm_start_date)
                                                                                  FROM SSBSECT a1
                                                                                  WHERE 1 = 1
                                                                                  AND a1.ssbsect_term_code = a.ssbsect_term_code
                                                                                  AND a1.ssbsect_crn =a.ssbsect_crn)
                                                and c.sfrstcr_term_code = (SElect MAx(x.sfrstcr_term_code) from sfrstcr x where x.sfrstcr_pidm = c.sfrstcr_pidm
                                                                            and substr(x.sfrstcr_term_code,5,1) not in (8,9) --quitamos nivelaciones
                                                                            )
                                               ) pperiodo
                                WHERE 1 = 1
                                AND a.campus = c.sztalgo_camp_code
--                                AND c.sztalgo_term_code_new = f.stvterm_code
AND NVL(pperiodo.PERIODO,sztalgo_term_code_new)=F.STVTERM_CODE
                                AND c.sztalgo_term_code = pperiodo.periodo(+)
                                --AND c.sztalgo_ptrm_code = pperiodo.pperiodo(+)
AND ( c.sztalgo_ptrm_code = NVL(pperiodo.pperiodo,c.sztalgo_ptrm_code)  --Se pone para capturar alumnos que ya esten escritos en el mismo periodo y parte periodo actual, son
        OR c.sztalgo_ptrm_code_NEW = NVL(pperiodo.pperiodo,c.sztalgo_ptrm_code_NEW) ) --Alumnos que se necesita asignar materia ya inscritos
                                AND fecha_inicio <= sztalgo_fecha_new
--AND A.FECHA_INICIO =  sztalgo_fecha_ANT
--                                AND c.sztalgo_term_code_new = b.sobptrm_term_code
and NVL(pperiodo.PERIODO,a.periodo) = b.sobptrm_term_code
and ( NVL(pperiodo.PERIODO,a.periodo) = c.sztalgo_term_code_new  OR
      NVL(pperiodo.PERIODO,a.periodo) = c.sztalgo_term_code)
and c.sztalgo_ptrm_code_new = Case When pkg_algoritmo.f_consulta_activos(0, a.sgbstdn_pidm) > 0 Then --Alumnos RE-CON
                                            (Select Max(x.sztalgo_ptrm_code_new)
                                            from sztalgo x
                                            where x.sztalgo_term_code_new=c.sztalgo_term_code_new
                                                and x.sztalgo_camp_code = c.sztalgo_camp_code
                                            and A.fecha_inicio <= x.sztalgo_fecha_new
                                            and x.sztalgo_no_regla=c.sztalgo_no_regla)
                                   Else         --Alumnos NI-FU
                                            (Select Min(x.sztalgo_ptrm_code_new)
                                            from sztalgo x
                                            where x.sztalgo_term_code_new=c.sztalgo_term_code_new
                                                and x.sztalgo_camp_code = c.sztalgo_camp_code
                                            and A.fecha_inicio <= x.sztalgo_fecha_new
                                            and x.sztalgo_no_regla=c.sztalgo_no_regla)
                              End
                                  AND ( b.sobptrm_ptrm_code = c.sztalgo_ptrm_code_new) -- OR b.sobptrm_ptrm_code = c.sztalgo_ptrm_code)
                                AND c.sztalgo_no_regla =a.rel_programaxalumno_no_regla
                                AND c.sztalgo_no_regla = t.regla                --RLS
                                AND d.materia = t.materia
                                AND d.pidm = t.pidm
--and a.id_alumno=:ID
                                AND a.sgbstdn_pidm = d.pidm
-- and d.pidm =480153
                                AND a.rel_programaxalumno_no_regla = d.regla
                                AND a.study_path = d.sp
                                AND a.sgbstdn_pidm = pperiodo.sfrstcr_pidm(+)
                                AND a.study_path = pperiodo.sfrstcr_stsp_key_sequence(+)
                                AND TRUNC (a.FECHA_INICIO) >= TRUNC (pperiodo.ssbsect_ptrm_start_date(+))
                                AND a.study_path = pperiodo.study_path(+)
--                                 AND d.tipo IN ('PC', 'NA')
--                                AND d.tipo IN (lc_PC,lc_NA)
                               ORDER BY 4, 13, 14
                           )
                    LOOP

                        dbms_output.put_line(' Materia cursor  '||c.clave_materia);





                       BEGIN

                          SELECT DISTINCT sorlcur_admt_code
                          INTO l_equi
                          FROM sorlcur cur
                          WHERE     1 = 1
                          AND cur.sorlcur_program = c.id_programa
                          AND cur.sorlcur_pidm = c.svrproy_pidm
                          AND cur.sorlcur_lmod_code = 'LEARNER'
                          AND cur.sorlcur_roll_ind = 'Y'
                          AND cur.sorlcur_cact_code = 'ACTIVE'
                          AND cur.sorlcur_seqno =
                                                  (SELECT MAX (aa1.sorlcur_seqno)
                                                   FROM sorlcur aa1
                                                   WHERE 1 = 1
                                                   AND cur.sorlcur_pidm = aa1.sorlcur_pidm
                                                   AND cur.sorlcur_lmod_code = aa1.sorlcur_lmod_code
                                                   AND cur.sorlcur_roll_ind =aa1.sorlcur_roll_ind
                                                   AND cur.sorlcur_cact_code =aa1.sorlcur_cact_code
                                                   AND cur.sorlcur_program = aa1.sorlcur_program);
                       EXCEPTION WHEN OTHERS THEN
                             NULL;
                       END;

                       l_contador := l_contador + 1;

                       BEGIN

                          SELECT COUNT(1)
                          INTO l_cuenta_sfr
                          FROM sfrstcr
                          WHERE 1 = 1
                          AND sfrstcr_pidm = c.pidm
                          AND sfrstcr_stsp_key_sequence =c.study_path
                          AND sfrstcr_rsts_code ='RE';

                       EXCEPTION WHEN OTHERS THEN
                          l_cuenta_sfr:=0;
                       END;

                       BEGIN

                           SELECT DISTINCT zstpara_param_valor
                           INTO l_ptrm
                           FROM zstpara
                           WHERE 1 = 1
                           AND zstpara_mapa_id ='PTR_NI'
                           AND zstpara_param_desc =c.id_periodo;

                       EXCEPTION WHEN OTHERS THEN
                            l_ptrm:=c.id_periodo;
                       END;


                      dbms_output.put_line('Estatus '||c.estatus||' Periodos '||l_cuenta_sfr);

                       IF c.estatus IN ('N','F') AND  l_cuenta_sfr = 0 OR c.estatus ='R' THEN



                            BEGIN

                                SELECT distinct SZTALGO_TERM_CODE_NEW
                                INTO l_term_code
                                FROM sztalgo
                                WHERE 1 = 1
                                AND sztalgo_no_regla = p_regla
                                AND SZTALGO_PTRM_CODE = l_ptrm
                                AND SZTALGO_CAMP_CODE= c.campus;


                            exception when others then
                                dbms_output.put_line('Error '||sqlerrm||' Regla '||' Ptrm '|| substr(c.id_programa,1,3)||' ptrm '||l_ptrm);
                            end;

                             dbms_output.put_line(' Materia si esta  '||c.materia_padre||' Parte del periodo '||l_ptrm||' Campus'||c.campus);

                            IF l_ptrm  = c.id_periodo then


                                 dbms_output.put_line(' Materia si esta  '||c.materia_padre);

                                  --dbms_output.put_line('Entra a periodo');

                                  BEGIN

                                    INSERT INTO rel_alumnos_x_asignar
                                                             VALUES (c.año,
                                                                     l_term_code,
                                                                     c.id_periodo,
                                                                     c.id_alumno,
                                                                     c.id_programa,
                                                                     c.clave_materia,
                                                                     c.id_grupo,
                                                                     c.id_matricula,
                                                                     c.campus,
                                                                     c.id_tutor,
                                                                     c.dta_inicio_bimestre,
                                                                     c.dta_inicio_bimestre,
                                                                     c.secuencia,
                                                                     c.svrproy_term_code,
                                                                     c.study_path,
                                                                     c.svrproy_pidm,
                                                                     c.materia_padre,
                                                                     c.smrarul_subj_code,
                                                                     c.smrarul_crse_numb_low,
                                                                     c.fecha_inicio,
                                                                     0,
                                                                     p_regla,
                                                                     user,
                                                                     null,
                                                                     l_equi,
                                                                     NULL);
                                  EXCEPTION WHEN OTHERS  THEN
                                        dbms_output.put_line(' Materia si esta  '||c.materia_padre||' error '||sqlerrm);
                                  END;

                            else

                                dbms_output.put_line('Contador tope zz '||l_contador_tope);

                                  BEGIN

                                    INSERT INTO rel_alumnos_x_asignar
                                                             VALUES (c.año,
                                                                     l_term_code,
                                                                     c.id_periodo,
                                                                     c.id_alumno,
                                                                     c.id_programa,
                                                                     c.clave_materia,
                                                                     c.id_grupo,
                                                                     c.id_matricula,
                                                                     c.campus,
                                                                     c.id_tutor,
                                                                     c.dta_inicio_bimestre,
                                                                     c.dta_inicio_bimestre,
                                                                     c.secuencia,
                                                                     c.svrproy_term_code,
                                                                     c.study_path,
                                                                     c.svrproy_pidm,
                                                                     c.materia_padre,
                                                                     c.smrarul_subj_code,
                                                                     c.smrarul_crse_numb_low,
                                                                     c.fecha_inicio,
                                                                     0,
                                                                     p_regla,
                                                                     user,
                                                                     null,
                                                                     l_equi,
                                                                     NULL);
                                  EXCEPTION WHEN OTHERS  THEN
                                        NULL;
                                  END;

                            END IF;

                       ELSE

                           dbms_output.put_line('Entra a periodo 1378');
--
--                           BEGIN
--
--                               SELECT DISTINCT sztalgo_term_code_new
--                               INTO l_term_code
--                               FROM sztalgo
--                               WHERE 1 = 1
--                               AND sztalgo_no_regla = p_regla
--                               AND SZTALGO_PTRM_CODE = c.id_periodo
--                               AND SZTALGO_CAMP_CODE= substr(c.id_programa,1,3);
--                           exception when others then
--                            --   dbms_output.put_line('aqui esta el pex '||' periodo '||c.id_periodo||' '||sqlerrm);
--                               l_term_code:=0;
--                           end;
--
--                           dbms_output.put_line('Entra a ciclo '||l_term_code||' ciclo '||c.id_ciclo||' ptrm '||c.id_periodo||' l_ptrm'||l_ptrm);

                          -- IF  c.id_periodo != l_ptrm then

                              -- IF c.aprobadas+c.cursos < c.total_curr then
                            ---  dbms_output.put_line('Matricula '||t.MATRICULA||' tope '||l_contador_tope||' tope2 '||l_contador_tope2||' Tope3 '||l_contador_tope3||' Total '||t.TOTAL_CURR);
                             --    IF l_contador_tope3 <t.total_curr then

                                        BEGIN

                                          INSERT INTO rel_alumnos_x_asignar
                                                                   VALUES (c.año,
                                                                           c.id_ciclo,
                                                                           c.id_periodo,
                                                                           c.id_alumno,
                                                                           c.id_programa,
                                                                           c.clave_materia,
                                                                           c.id_grupo,
                                                                           c.id_matricula,
                                                                           c.campus,
                                                                           c.id_tutor,
                                                                           c.dta_inicio_bimestre,
                                                                           c.dta_inicio_bimestre,
                                                                           c.secuencia,
                                                                           c.svrproy_term_code,
                                                                           c.study_path,
                                                                           c.svrproy_pidm,
                                                                           c.materia_padre,
                                                                           c.smrarul_subj_code,
                                                                           c.smrarul_crse_numb_low,
                                                                           c.fecha_inicio,
                                                                           0,
                                                                           p_regla,
                                                                           user,
                                                                           null,
                                                                           l_equi,
                                                                           NULL);
                                        EXCEPTION WHEN OTHERS  THEN
                                              NULL;
                                        END;

                       END IF;

                       -- exit when l_contador_tope3 =t.total_curr;

                    END LOOP;
                    exit when l_contador_tope3 =t.total_curr;

                 END LOOP;
               -- COMMIT;

        END LOOP ;
      -- COMMIT;

      ELSE
         l_contador := 0;


         FOR t IN (SELECT *
                   FROM TMP_FALTAN_LIC
                   WHERE 1 = 1
                   AND regla = p_regla
                   AND tipo IN (lc_PC,lc_NA)
--                   AND matricula ='020000825'
                   )
                 LOOP

            lcont:=lcont+1;
            if mod(lcont,1000) = 0 THEN
                p_track_prono(p_regla,'Alumnos/Materia procesados: '||lcont);
                commit;
            end if;

                         FOR c
                            IN (
                                SELECT DISTINCT
                                                NVL (f.stvterm_acyr_code, TO_CHAR (SYSDATE, 'yyyy')) AS año,
                                                c.sztalgo_term_code_new as id_ciclo,
                                                null id_periodo,
                                                a.id_alumno as id_alumno,
                                                a.programa as id_programa,
                                                d.materia as clave_materia,
                                                lc_0 as id_grupo,
                                                lc_0 as id_matricula,
                                                a.campus AS Campus,
                                                lc_0 as id_tutor,
                                                b.sobptrm_start_date as dta_inicio_bimestre,
                                                null dta_fin_bimestre,
                                                d.secuencia AS Secuencia,
                                                c.sztalgo_term_code_new svrproy_term_code,
                                                a.study_path as study_path,
                                                a.sgbstdn_pidm svrproy_pidm,
                                                d.smrarul_subj_code,
                                                d.smrarul_crse_numb_low,
                                                TRUNC (c.sztalgo_fecha_new) FECHA_INICIO,
                                                d.materia_padre,
                                                rel_programaxalumno_estatus estatus,
                                                d.nivel,
                                                a.periodo_catalogo,
                                                d.APROBADAS,
                                                d.CURSOS,
                                                d.TOTAL_CURR
                                  FROM rel_programaxalumno a,
                                       sobptrm b,
                                       sztalgo c,
                                       TMP_FALTAN_LIC d,
                                       stvterm f,
                                       (
                                               SELECT DISTINCT
                                                              sfrstcr_ptrm_code pperiodo,
                                                              sfrstcr_pidm,
                                                              ssbsect_ptrm_start_date,
                                                              sfrstcr_stsp_key_sequence,
                                                              sfrstcr_term_code periodo,
                                                              sfrstcr_stsp_key_sequence
                                                              study_path
                                                FROM ssbsect a,
                                                     sfrstcr c,
                                                     shrgrde
                                                WHERE 1 = 1
                                                AND ssbsect_term_code = sfrstcr_term_code
and sfrstcr_pidm=t.pidm
                                                AND c.sfrstcr_crn = ssbsect_crn
                                                AND c.sfrstcr_levl_code = shrgrde_levl_code
                                                AND (c.sfrstcr_grde_code = shrgrde_code
                                                                                    OR c.sfrstcr_grde_code IS NULL)
                                                AND a.ssbsect_ptrm_start_date IN
                                                                                 (SELECT MAX (a1.ssbsect_ptrm_start_date)
                                                                                  FROM SSBSECT a1
                                                                                  WHERE 1 = 1
                                                                                  AND a1.ssbsect_term_code = a.ssbsect_term_code
                                                                                  AND a1.ssbsect_crn =a.ssbsect_crn)
                                                and c.sfrstcr_term_code = (SElect MAx(x.sfrstcr_term_code) from sfrstcr x where x.sfrstcr_pidm = c.sfrstcr_pidm
                                                                            and substr(x.sfrstcr_term_code,5,1) not in (8,9) --quitamos nivelaciones
                                                                            )
                                         ) pperiodo
                                  WHERE 1 = 1
                                  AND a.campus = c.sztalgo_camp_code
--                                  AND c.sztalgo_term_code_new = f.stvterm_code
AND NVL(pperiodo.PERIODO,sztalgo_term_code_new)=F.STVTERM_CODE
                                AND c.sztalgo_term_code = pperiodo.periodo(+)
--                                AND c.sztalgo_ptrm_code = pperiodo.pperiodo(+)
AND ( c.sztalgo_ptrm_code = NVL(pperiodo.pperiodo,c.sztalgo_ptrm_code)  --Se pone para capturar alumnos que ya esten escritos en el mismo periodo y parte periodo actual, son
        OR c.sztalgo_ptrm_code_NEW = NVL(pperiodo.pperiodo,c.sztalgo_ptrm_code_NEW) ) --Alumnos que se necesita asignar materia ya inscritos
                                AND fecha_inicio <= sztalgo_fecha_new
--AND A.FECHA_INICIO =  sztalgo_fecha_ANT
--                                AND c.sztalgo_term_code_new = b.sobptrm_term_code
and NVL(pperiodo.PERIODO,a.periodo) = b.sobptrm_term_code
and ( NVL(pperiodo.PERIODO,a.periodo) = c.sztalgo_term_code_new  OR
      NVL(pperiodo.PERIODO,a.periodo) = c.sztalgo_term_code)
and c.sztalgo_ptrm_code_new = Case When pkg_algoritmo.f_consulta_activos(0, a.sgbstdn_pidm) > 0 Then --Alumnos RE-CON
                                            (Select Max(x.sztalgo_ptrm_code_new)
                                            from sztalgo x
                                            where x.sztalgo_term_code_new=c.sztalgo_term_code_new
                                                and x.sztalgo_camp_code = c.sztalgo_camp_code
                                            and A.fecha_inicio <= x.sztalgo_fecha_new
                                            and x.sztalgo_no_regla=c.sztalgo_no_regla)
                                   Else         --Alumnos NI-FU
                                            (Select Min(x.sztalgo_ptrm_code_new)
                                            from sztalgo x
                                            where x.sztalgo_term_code_new=c.sztalgo_term_code_new
                                                and x.sztalgo_camp_code = c.sztalgo_camp_code
                                            and A.fecha_inicio <= x.sztalgo_fecha_new
                                            and x.sztalgo_no_regla=c.sztalgo_no_regla)
                              End
                                  AND ( b.sobptrm_ptrm_code = c.sztalgo_ptrm_code_new) -- OR b.sobptrm_ptrm_code = c.sztalgo_ptrm_code)
                                  AND c.sztalgo_no_regla = a.rel_programaxalumno_no_regla
                                  AND c.sztalgo_no_regla = p_regla                  --RLS
                                  AND a.sgbstdn_pidm = d.pidm
                                  AND a.rel_programaxalumno_no_regla = d.regla
                                  AND a.study_path = d.sp
                                  AND a.sgbstdn_pidm = pperiodo.SFRSTCR_PIDM(+)
                                  AND a.study_path = pperiodo.sfrstcr_stsp_key_sequence(+)
                                  AND TRUNC (a.fecha_inicio) >= TRUNC (pperiodo.ssbsect_ptrm_start_date(+))
                                  AND a.study_path = pperiodo.study_path(+)
                                  AND d.tipo IN ('PC', 'NA')
                                  AND c.sztalgo_no_regla = t.regla               --RLS
                                  AND d.materia = t.materia
                                  AND d.pidm = t.pidm
                                ORDER BY 4, 13, 14)
                         LOOP

                            BEGIN

                               SELECT DISTINCT sztdtec_periodicidad
                               INTO l_periodicidad
                               FROM sztdtec
                               WHERE 1 = 1
                               AND sztdtec_program = c.id_programa
                               AND sztdtec_term_code = c.periodo_catalogo;

                            EXCEPTION WHEN OTHERS THEN
                                NULL;
                            END;

                            BEGIN

                               SELECT DISTINCT SZTDTEC_MOD_TYPE
                               INTO l_semis
                               FROM sztdtec
                               WHERE  1 = 1
                               AND sztdtec_program = c.id_programa
                               AND sztdtec_term_code = c.periodo_catalogo;

                            EXCEPTION WHEN OTHERS THEN
                                  NULL;
                            END;

                           BEGIN

                               SELECT sztcopp_ptm
                               INTO l_ptrm
                               FROM sztcopp
                               WHERE 1 = 1
                               AND sztcopp_campus = c.campus
                               AND sztcopp_nivel = c.nivel
                               AND sztcopp_so = l_semis
                               AND sztcopp_periodicad = l_periodicidad
                               AND sztcopp_no_regla = p_regla;

                            EXCEPTION WHEN OTHERS THEN
                                  dbms_output.put_line(sqlerrm);
                                  null;
                            END;

                             dbms_output.put_line('ptrm '||l_ptrm||' campus '||c.campus||' nivel '||c.nivel||' semis '||l_semis||' periodicidad '||l_periodicidad);

                            BEGIN

                               SELECT DISTINCT sorlcur_admt_code
                               INTO l_equi
                               FROM sorlcur cur
                               WHERE 1 = 1
                               AND cur.sorlcur_program = c.id_programa
                               AND cur.sorlcur_pidm = c.svrproy_pidm
                               AND cur.sorlcur_lmod_code = 'LEARNER'
                               AND cur.sorlcur_roll_ind = 'Y'
                               AND cur.sorlcur_cact_code = 'ACTIVE'
                               AND cur.sorlcur_seqno =
                                                      (SELECT MAX (aa1.sorlcur_seqno)
                                                       FROM SORLCUR aa1
                                                       WHERE 1 = 1
                                                       AND cur.sorlcur_pidm = aa1.sorlcur_pidm
                                                       AND cur.sorlcur_lmod_code = aa1.sorlcur_lmod_code
                                                       AND cur.sorlcur_roll_ind =  aa1.sorlcur_roll_ind
                                                       AND cur.sorlcur_cact_code = aa1.sorlcur_cact_code
                                                       AND cur.sorlcur_program = aa1.sorlcur_program);

                            EXCEPTION WHEN OTHERS THEN
                                  l_equi := 'RE';
                            END;

                            l_contador := l_contador + 1;

                            IF c.APROBADAS+c.CURSOS < c.total_curr then

                                    BEGIN
                                       INSERT INTO rel_alumnos_x_asignar
                                                            VALUES (c.año,
                                                                    c.id_ciclo,
                                                                    l_ptrm,
                                                                    c.id_alumno,
                                                                    c.id_programa,
                                                                    c.clave_materia,
                                                                    c.id_grupo,
                                                                    c.id_matricula,
                                                                    c.campus,
                                                                    c.id_tutor,
                                                                    c.dta_inicio_bimestre,
                                                                    c.dta_fin_bimestre,
                                                                    c.secuencia,
                                                                    c.svrproy_term_code,
                                                                    c.study_path,
                                                                    c.svrproy_pidm,
                                                                    c.materia_padre,
                                                                    c.smrarul_subj_code,
                                                                    c.smrarul_crse_numb_low,
                                                                    c.fecha_inicio,
                                                                    0,
                                                                    p_regla,
                                                                    user,
                                                                    null,
                                                                    l_equi,
                                                                    c.periodo_catalogo);
                                    EXCEPTION WHEN OTHERS THEN
                                          NULL;
                                    END;


                            end IF;
                --
                --            IF l_contador = 100
                --            THEN
                --               COMMIT;
                --               l_contador := 0;
                --            END IF;

                             -- commit;

                         END LOOP;

                END LOOP;

      END IF;


      COMMIT;

p_track_prono(p_regla,'Inicia ultimo ciclo...');

     for c in (SELECT ID_CICLO,
                        b.campus,
                        b.nivel,
                        a.rel_alumnos_x_asignar_no_regla,
                        a.secuencia,
                        a.SVRPROY_PIDM pidm,
                        a.STUDY_PATH,
                        a.CLAVE_MATERIA_AGP
                  FROM rel_alumnos_x_asignar a
                  JOIN REL_PROGRAMAXALUMNO b on b.SGBSTDN_PIDM = a.SVRPROY_PIDM
                                            AND b.REL_PROGRAMAXALUMNO_NO_REGLA = a.REL_ALUMNOS_X_ASIGNAR_NO_REGLA
                  WHERE 1 = 1
                  AND rel_alumnos_x_asignar_no_regla = p_regla
                  order by secuencia asc

                )loop

                    dbms_output.put_line('entra a uts 1 campus '||c.campus);

                    IF c.campus ='UIN' then

                        BEGIN

                            DELETE rel_alumnos_x_asignar
                            WHERE 1 = 1
                            AND rel_alumnos_x_asignar_no_regla = c.rel_alumnos_x_asignar_no_regla
                            AND SVRPROY_PIDM = c.pidm
                            AND CLAVE_MATERIA_AGP not in (SELECT DISTINCT SZTPINC_MATERIA
                                                          FROM sztpinc
                                                          WHERE 1 = 1
                                                          AND sztpinc_campus ='UIN'
                                                          AND sztpinc_nivel ='MA'
                                                          AND SZTPINC_ACTIVO ='S');
                        exception when others then
                            null;
                        end;


                    elsIF c.campus ='INC' then

                      dbms_output.put_line('entra a inc ');

                       BEGIN

                              SELECT COUNT(*)
                              INTO l_cuenta_sfr
                              FROM sfrstcr
                              WHERE 1 = 1
                              AND sfrstcr_pidm = c.pidm
                              AND sfrstcr_stsp_key_sequence =c.study_path
                              AND sfrstcr_rsts_code ='RE';

                       EXCEPTION WHEN OTHERS THEN
                          NULL;
                       END;

                       BEGIN

                           SELECT distinct REL_PROGRAMAXALUMNO_ESTATUS
                           INTO l_type_code
                           FROM REL_PROGRAMAXALUMNO
                           WHERE 1 = 1
                           AND REL_PROGRAMAXALUMNO_NO_REGLA =c.rel_alumnos_x_asignar_no_regla
                           AND SGBSTDN_PIDM = c.pidm;


                       exception when others then
                            null;
                       end;


                       IF l_type_code IN ('N','F') AND  l_cuenta_sfr = 0 OR l_type_code ='R' THEN

                            -- para pronostico de INC

                            dbms_output.put_line('entra a inc v1 ');

                            BEGIN

                                DELETE
                                FROM rel_alumnos_x_asignar rxa
                                WHERE 1 = 1
                                AND ID_CICLO ='252241'
                                AND rel_alumnos_x_asignar_no_regla = c.rel_alumnos_x_asignar_no_regla
                                AND SVRPROY_PIDM = c.pidm;
                            exception when others then
                                null;
                            end;

                            update rel_alumnos_x_asignar set ID_PERIODO ='M0A'
                            WHERE 1 = 1
                            AND rel_alumnos_x_asignar_no_regla = p_regla
                            AND SVRPROY_PIDM = c.pidm;


                       ELSE

                            dbms_output.put_line('entra a inc v2 ');

                            BEGIN

                                DELETE
                                FROM rel_alumnos_x_asignar rxa
                                WHERE 1 = 1
                                AND ID_CICLO ='252243'
                                AND rel_alumnos_x_asignar_no_regla = c.rel_alumnos_x_asignar_no_regla
                                AND SVRPROY_PIDM = c.pidm;

                            exception when others then
                                null;
                            end;

                            update rel_alumnos_x_asignar set ID_PERIODO ='M2A'
                            WHERE 1 = 1
                            AND rel_alumnos_x_asignar_no_regla = p_regla
                            AND SVRPROY_PIDM = c.pidm;
--
                       END IF;

                        BEGIN

                            SELECT COUNT(*)
                            INTO l_contar_inc
                            FROM rel_alumnos_x_asignar rxa
                            WHERE 1 = 1
                            AND rel_alumnos_x_asignar_no_regla = c.rel_alumnos_x_asignar_no_regla
                            AND CLAVE_MATERIA_AGP = c.CLAVE_MATERIA_AGP
                            AND SVRPROY_PIDM = c.pidm
                            AND campus = c.campus
                            AND substr(rxa.ID_PROGRAMA,4,2)=c.nivel
                            AND CLAVE_MATERIA_AGP in (SELECT SZTPINC_MATERIA
                                                      FROM  sztpinc
                                                      WHERE 1 = 1
                                                      AND sztpinc_activo ='S'
--                                                      AND SZTPINC_SECUENCIA = c.SECUENCIA
                                                     -- AND SZTPINC_QA = to_char('Q'||get_qa(rxa.ID_PROGRAMA,rxa.SVRPROY_PIDM))
                                                      );

                        exception when others then
                            null;
                        end;


                        dbms_output.put_line('entra a inc v3 contar  '||l_contar_inc);

                    elsIF c.campus IN ('UTS','EAF')  then

                           dbms_output.put_line('entra a uts 2 ');

                           IF c.nivel ='EC' then

                                dbms_output.put_line('entra a uts 3 ');

                                FOR D IN (SELECT distinct SOBPTRM_PTRM_CODE ptrm,
                                                            SOBPTRM_START_DATE fecha_inicio,
                                                            ZSTPARA_PARAM_DESC secuencia
                                            FROM SOBPTRM a
                                            JOIN ZSTPARA b on b.ZSTPARA_mapa_ID ='PRONO_EC'
                                                          AND b.ZSTPARA_PARAM_VALOR = a.SOBPTRM_PTRM_CODE
                                                          AND exists(SELECT null
                                                                     FROM sztalgo x
                                                                     WHERE 1 = 1
                                                                     AND x.SZTALGO_PTRM_CODE_NEW = b.ZSTPARA_PARAM_ID
                                                                     AND x.sztalgo_no_regla = c.rel_alumnos_x_asignar_no_regla
                                                                     )
                                            WHERE 1 = 1
                                            AND SOBPTRM_TERM_CODE =c.ID_CICLO
                                            AND SUBSTR(SOBPTRM_PTRM_CODE,1,1)='D'
                                            order by 3 asc
                                            )loop

                                                IF c.secuencia = d.secuencia then

                                                dbms_output.put_line('secuencia a '||c.secuencia||' secuencia b '||d.secuencia||' ptrm '||d.ptrm);


                                                    update rel_alumnos_x_asignar set ID_PERIODO = d.ptrm,
                                                                                     FECHA_INICIO = d.fecha_inicio
                                                    WHERE 1 = 1
                                                    AND SVRPROY_PIDM = c.pidm
                                                    AND rel_alumnos_x_asignar_no_regla = c.rel_alumnos_x_asignar_no_regla
                                                    AND secuencia = d.secuencia;
                                                 --
                                                end IF;

                                            END LOOP;

                                            commit;


                           end IF;

                    end IF;


                END LOOP;

    Commit;

     BEGIN

       SELECT COUNT(*)
       INTO l_anti
       FROM sztalgo
       WHERE 1 = 1
       AND sztalgo_no_regla = p_regla
       AND SZTALGO_ANTICIPADO ='S';


     exception when others then
       null;
     end;

            p_track_prono(p_regla,'Termina ultimo ciclo');

     IF l_anti = 0 then

--      --borra prerequistos --Jpg@Modify@Ene2022 se activa
          BEGIN p_prereq(p_regla); commit; end;
            p_track_prono(p_regla,'TErmina PreRequisitos');

     end IF;

        ------- Elimina las materias de derecho cuANDo ya tiene cursado 49 materias
     BEGIN
            p_quita_derecho_M(p_regla);
            Commit;
     Exception
        When Others then
            null;
     End;

     p_track_prono(p_regla,'Termina P_ALUMNOS_X_ASIGNAR');

   END P_ALUMNOS_X_ASIGNAR_M;

   --
   --


PROCEDURE P_PROYECCION_MATERIAS (P_REGLA NUMBER, p_incl_ali boolean default true) IS


    vl_numero number:=0;
    vl_contador number:=0;
    vl_avance number :=0;
    vl_fecha_ing date;
    vl_tipo_ini number;
    vl_tipo_jornada varchar2(1):= null;
    vl_qa_avance number :=0;
    vl_parte_bim number :=0;
    vl_tip_ini varchar2(10):= null;
    vl_asignacion number:=0;
    val_max number:=0;
    vl_Error Varchar2(2000) := 'EXITO';
    l_ptrm_algo varchar2(10);
    l_itera number:=0;
    l_cuenta_registro number;
    l_cuenta_sfr number;
    l_cuenta_semi number;
    l_bim NUMBER:=null;
    l_sp number;
    l_cuenta_grade number;
    l_cuenta_asma number;
    l_cuenta_prop number;
    l_semis varchar2(2);
    l_cuenta_para_campus number:=0;
    l_anticipado varchar2(1);
    l_anticipo_r varchar2(1):= null;
    l_tipo_alu varchar2(2):= null;
    l_valida_asma number;
    l_curso_p varchar2(100);
    l_aprobatoria varchar2(10);
    l_cuenta_sfr_campus number;
    l_free  varchar2(10);
    l_cuenta_free number;
    l_asigna_free number;
    l_cuenta_eje  number;
    l_secuencia  number;
    l_materia_iebs varchar2(20);
    l_cuneta_semi number;
    l_cuenta_nivel number;
    l_nivel        VARCHAR2(2);
    l_cuenta_iebs number;
    l_cuenta_unicef number;
    l_cuenta_onu    number;
    l_cuenta_uba    number;
    l_cuenta_p      number;
    l_ptrm_pi       VARCHAR2(3);

BEGIN

    l_cuenta_para_campus:=0;

  --  DBMS_OUTPUT.PUT_LINE('Entra  al 1 ');

    --raise_application_error (-20002,'Error al obtener valores de  spriden  '|| SQLCODE||' Error: '||SQLERRM);

    BEGIN
        DELETE sztprono
        WHERE 1 = 1
        AND sztprono_no_regla = p_regla;

        COMMIT;

    EXCEPTION WHEN OTHERS THEN
       raise_application_error (-20002,'Error al INSERTar a tabla de paso 1 '|| SQLERRM||' '||SQLCODE);
    END;

    BEGIN

        DELETE sztprono
        WHERE SZTPRONO_NO_REGLA  IS NULL;

        COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
       raise_application_error (-20002,'Error al INSERTar a tabla de paso 1 '|| SQLERRM||' '||SQLCODE);
    END;

    DELETE
    FROM sztprext
    WHERE 1  = 1
    AND sztprext_no_regla = p_regla;

    COMMIT;

    l_itera:=0;

        FOR alumno IN (
                      SELECT DISTINCT id_alumno,
                                       id_ciclo,
                                       id_programa,
                                       svrproy_pidm,
                                       id_periodo,
                                        (SELECT DISTINCT sztdtec_periodicidad
                                         FROM SZTDTEC
                                         WHERE 1 = 1
                                         AND SZTDTEC_PROGRAM = ID_PROGRAMA
                                         AND SZTDTEC_TERM_CODE = periodo_catalogo
                                         ) periodicidad,
                                         null rate,
                                         null jornada,
                                         campus,
                                         (SELECT distinct NIVEL
                                         FROM REL_PROGRAMAXALUMNO
                                         WHERE 1 = 1
                                         AND REL_PROGRAMAXALUMNO_NO_REGLA = REL_ALUMNOS_X_ASIGNAR_NO_REGLA
                                         AND SGBSTDN_PIDM = SVRPROY_PIDM
                                         ) nivel,
                                         null jornada_com,
                                         rel_alumnos_x_asignar_no_regla sztprvn_no_regla,
                                         tipo_equi equi,
                                         periodo_catalogo,
                                         fecha_inicio,
                                         (SELECT distinct REL_PROGRAMAXALUMNO_ESTATUS
                                         FROM REL_PROGRAMAXALUMNO
                                         WHERE 1 = 1
                                         AND REL_PROGRAMAXALUMNO_NO_REGLA = REL_ALUMNOS_X_ASIGNAR_NO_REGLA
                                         AND SGBSTDN_PIDM = SVRPROY_PIDM
                                         AND rownum = 1
                                         ) estatus,
                                         STUDY_PATH sp
                      FROM rel_alumnos_x_asignar
                      WHERE 1 = 1
                      AND rel_alumnos_x_asignar_no_regla = p_regla
--                      AND id_alumno = '010061415'
--                      AND ROWNUM < = 30
--                      AND EXISTS (SELECT NULL
--                                   FROM mal_236
--                                   WHERE 1 = 1
--                                   AND ID_ALUMNO = MATRICULA)
--                      AND id_alumno ='010001042'
      ) Loop


            --DBMS_OUTPUT.PUT_LINE('Entra  al 6 '||alumno.id_alumno);

            vl_fecha_ing := NULL;
            vl_tipo_ini  := NULL;
            l_anticipo_r := null;
            l_tipo_alu := null;



            BEGIN

                 SELECT DISTINCT MIN(TO_DATE(ssbsect_ptrm_start_date)) fecha_inicio,
                                 MIN(SUBSTR(ssbsect_ptrm_code,2,1)) pperiodo
                 INTO vl_fecha_ing,
                      vl_tipo_ini
                 FROM sfrstcr a,
                      ssbsect b,
                      sorlcur c
                 WHERE 1 = 1
                 AND a.sfrstcr_term_code = b.ssbsect_term_code
                 AND a.sfrstcr_crn = b.ssbsect_crn
                 AND a.sfrstcr_rsts_code = 'RE'
                 AND b.ssbsect_ptrm_start_date =(SELECT MIN (b1.ssbsect_ptrm_start_date)
                                                 FROM ssbsect b1
                                                 WHERE 1 = 1
                                                 AND b.ssbsect_term_code = b1.ssbsect_term_code
                                                 AND b.ssbsect_crn = b1.ssbsect_crn
                                                 )
                 AND sfrstcr_pidm =alumno.svrproy_pidm
                 AND sfrstcr_pidm = c.sorlcur_pidm
                 AND c.sorlcur_program = alumno.id_programa
                 AND c.sorlcur_lmod_code = 'LEARNER'
                 AND c.sorlcur_roll_ind = 'Y'
                 AND c.sorlcur_cact_code ='ACTIVE'
                 AND c.sorlcur_seqno = (SELECT MAX (c1.sorlcur_seqno)
                                        FROM sorlcur c1
                                        WHERE c.sorlcur_pidm = c1.sorlcur_pidm
                                        AND c.sorlcur_lmod_code = c1.sorlcur_lmod_code
                                        AND c.sorlcur_roll_ind = c1.sorlcur_roll_ind
                                        AND c.sorlcur_cact_code = c1.sorlcur_cact_code
                                        AND c.sorlcur_program = c1.sorlcur_program
                                        )
                 AND sfrstcr_stsp_key_sequence =    c.sorlcur_key_seqno;


            EXCEPTION WHEN OTHERS THEN
                vl_fecha_ing:= NULL;
                vl_tipo_ini := NULL;
            END;

           -- dbms_output.put_line ('Recupera el tipo de ingreso '||SUBSTR(alumno.ID_PERIODO,2,1));

            IF vl_fecha_ing IS NULL AND vl_tipo_ini is null THEN

                vl_fecha_ing:=alumno.FECHA_INICIO;

                BEGIN
                    vl_tipo_ini:=SUBSTR(alumno.ID_PERIODO,2,1);
                exception when others then
                    vl_tipo_ini:=1;
                end;

            END IF;

           -- DBMS_OUTPUT.PUT_LINE('Entra  al 8 Fecha '||vl_fecha_ing||' Inicio '||vl_tipo_ini);
           -- dbms_output.put_line ('Recupera el tipo de ingreso '||vl_fecha_ing|| '*'||vl_tipo_ini);

            IF vl_tipo_ini = 0 or  vl_tipo_ini is null then

                vl_tipo_ini :=1;
                l_anticipo_r :=0;
                vl_tip_ini:='AN';

            else
                vl_tip_ini:='NO';

            End IF;
          --
           -- DBMS_OUTPUT.PUT_LINE('Entra  al 9 ' ||vl_tipo_ini||' Tipo de inicio '||vl_tip_ini);

            vl_tipo_jornada:= null;

--            vl_tip_ini:='NO';

            IF vl_tipo_ini is not null then ----------> Si no puedo obtener el tipo de ingreso no registro al alumno --------------

              --  DBMS_OUTPUT.PUT_LINE('Entra  valor envio '||alumno.ID_PROGRAMA||'*'||alumno.SVRPROY_PIDM);


                BEGIN

                    SELECT distinct  substr (TIPO_JORNADA, 3, 1) dato,TIPO_JORNADA, REL_PROGRAMAXALUMNO_ESTATUS
                    INTO vl_tipo_jornada, alumno.jornada_com,  l_tipo_alu
                    FROM REL_PROGRAMAXALUMNO
                    WHERE 1 = 1
                    AND REL_PROGRAMAXALUMNO_no_regla = p_regla
                    AND SGBSTDN_PIDM = alumno.SVRPROY_PIDM;

                exception when others then

                         BEGIN
                         SELECT distinct substr (b.STVATTS_CODE, 3, 1) dato,b.STVATTS_CODE
                             INTO vl_tipo_jornada,alumno.jornada_com
                         FROM SGRSATT a, STVATTS b, sorlcur c
                         WHERE a.SGRSATT_ATTS_CODE = b.STVATTS_CODE
                         AND a.SGRSATT_TERM_CODE_EFF = (SELECT max ( a1.SGRSATT_TERM_CODE_EFF)
                                                        FROM SGRSATT a1
                                                        WHERE a.SGRSATT_PIDM = a1.SGRSATT_PIDM
                                                        AND a1.SGRSATT_ATTS_CODE = a1.SGRSATT_ATTS_CODE
                                                        AND regexp_like(a1.SGRSATT_ATTS_CODE, '^[0-9]') )
                         AND regexp_like(a.SGRSATT_ATTS_CODE, '^[0-9]')
                         AND SGRSATT_PIDM =  alumno.SVRPROY_PIDM
                         AND a.SGRSATT_PIDM = c.sorlcur_pidm
                         AND c.sorlcur_program = alumno.ID_PROGRAMA
                         AND c.SORLCUR_LMOD_CODE = 'LEARNER'
                         AND c.SORLCUR_ROLL_IND = 'Y'
                         AND c.SORLCUR_CACT_CODE ='ACTIVE'
                         AND c.SORLCUR_SEQNO = (SELECT max (c1.SORLCUR_SEQNO)
                                                FROM sorlcur c1
                                                WHERE c.sorlcur_pidm = c1.sorlcur_pidm
                                                AND c.SORLCUR_LMOD_CODE = c1.SORLCUR_LMOD_CODE
                                                AND c.SORLCUR_ROLL_IND = c1.SORLCUR_ROLL_IND
                                                AND c.SORLCUR_CACT_CODE = c1.SORLCUR_CACT_CODE
                                                AND c.sorlcur_program = c1.sorlcur_program)
                         AND a.SGRSATT_STSP_KEY_SEQUENCE =    c.SORLCUR_KEY_SEQNO;

                      --   DBMS_OUTPUT.PUT_LINE('Entra  al 10 tipo de Jornada '||vl_tipo_jornada);

                    Exception
                    When Others then

                       IF alumno.campus  in ('UTL','UMM')  AND alumno.NIVEL  in ('MA') then
                         vl_tipo_jornada := 'N';
                       ELSIF alumno.campus  in ('UTL','UMM')  AND alumno.NIVEL  in ('LI') then
                         vl_tipo_jornada := 'C';
                       ELSE
                         vl_tipo_jornada := 'N';
                       END IF;
                      -- dbms_output.put_line ('Error al recuperar la jornada cursada '||sqlerrm);
                    End;
                end;




                IF alumno.campus  in ('UTL','UMM','UIN')  AND alumno.NIVEL  in ('MA') AND vl_tipo_jornada != 'N' then
                      vl_tipo_jornada := 'N';
                ELSIF alumno.campus  in ('UTL','UMM','UIN','COL')  AND alumno.NIVEL  in ('LI') AND vl_tipo_jornada = 'R' then
                     vl_tipo_jornada := 'R';
                END IF;

                --dbms_output.put_line ('recuperar la jornada cursada '||vl_tipo_jornada);
                --DBMS_OUTPUT.PUT_LINE('Entra  al 11 ');

                vl_qa_avance :=0;
          ----- Se obtiene el numero de QA que lleva cursados el alumno  -----------------
                 BEGIN

                    vl_qa_avance:=F_CALCULA_QA(alumno.id_ciclo,
                                               alumno.sp,
                                               alumno.svrproy_pidm,
                                               vl_tip_ini,
                                               p_regla,
                                               alumno.id_periodo,
                                               alumno.nivel);

                 end;

                 BEGIN
                     SELECT distinct SFRSTCR_PTRM_CODE
                     into l_ptrm_pi
                     FROM SFRSTCR a
                     WHERE 1 = 1
                     AND a.sfrstcr_pidm = alumno.svrproy_pidm
                     AND a.sfrstcr_stsp_key_sequence =alumno.sp
                     AND SUBSTR(A.sfrstcr_term_code,5,1)NOT IN(8,9)
                     AND a.sfrstcr_rsts_code ='RE'
                     AND a.sfrstcr_term_code =(select min(b.sfrstcr_term_code)
                                               from sfrstcr b
                                               where 1 = 1
                                               and a.sfrstcr_pidm = b.sfrstcr_pidm
                                               and a.sfrstcr_stsp_key_sequence =b.sfrstcr_stsp_key_sequence
                                               and a.sfrstcr_rsts_code = b.sfrstcr_rsts_code
                                               AND SUBSTR(b.sfrstcr_term_code,5,1)NOT IN(8,9)
                                               );
                 EXCEPTION WHEN OTHERS THEN
                     NULL;
                 END;

                 if l_ptrm_pi is null then

                     l_ptrm_pi:=alumno.id_periodo;

                 end if;

                 --dbms_output.put_line (' recuperar el QA cursado '||vl_qa_avance||' Programa '||alumno.ID_PROGRAMA);
          --------- Se obtiene el bimestre que se esta cursANDo ------------------------

                 vl_parte_bim :=null;

                 IF vl_parte_bim is null then
                    vl_parte_bim := vl_tipo_ini;
                 End IF;

                 IF vl_qa_avance >= 20 THEN
                    vl_qa_avance:=20;
                 END IF;

                --dbms_output.put_line ('Bimestre '||l_bim||'*Parte Bimestre'||vl_parte_bim);

                 --DBMS_OUTPUT.PUT_LINE('Entra  al 15 campus '||alumno.campus||' nivel '||alumno.nivel);

                 IF vl_parte_bim is  not null then----------> Si no existe parte de periodo no se incluye al alumno


                    --programación para Lic.
                    BEGIN

                        SELECT COUNT(*)
                        INTO l_cuenta_para_campus
                        FROM zstpara
                        WHERE 1 = 1
                        AND zstpara_mapa_id='CAMP_PRONO'
                        AND zstpara_param_id  = alumno.campus
                         AND zstpara_param_valor = alumno.nivel
                        AND zstpara_param_valor ='LI';

                    EXCEPTION WHEN OTHERS THEN
                        l_cuenta_para_campus:=0;
                    END;


                    IF l_cuenta_para_campus > 0 then

                      --  DBMS_OUTPUT.PUT_LINE('LLEna al campus');

                        BEGIN

                           l_bim :=NVL(F_CALCULA_BIM(alumno.id_ciclo,
                                                     alumno.sp,
                                                     alumno.svrproy_pidm,
                                                     vl_tip_ini,
                                                     'Q'||vl_qa_avance,
                                                     p_regla,
                                                     alumno.id_periodo,
                                                     alumno.nivel),1);

                        EXCEPTION WHEN OTHERS THEN
                            NULL;
                        END;

                        BEGIN

                            SELECT COUNT (DISTINCT sztasgn_qnumb)
                                INTO val_max
                            FROM sztasgn
                            WHERE  1 = 1
                            AND sztasgn_camp_code = alumno.campus
                            AND sztasgn_levl_code = alumno.nivel
                            AND sztasgn_bim_numb is not null;

                           --      DBMS_OUTPUT.PUT_LINE('Entra  al 37 val_max '||val_max);
                        EXCEPTION WHEN OTHERS THEN
                          val_max :=0;
                        END;


                        IF vl_qa_avance >= val_max then

                            vl_qa_avance:=val_max;

                        end IF;



                        DBMS_OUTPUT.PUT_LINE('Entra a Licenciatura avance v1-->'||vl_qa_avance||' bim '||l_bim||' vl_tipo_jornada '||vl_tipo_jornada||' tipo ini '||vl_tip_ini);

                         For asigna in (
                                         SELECT (sztasgn_crse_numb + sztasgn_opt_numb ) asignacion
                                         FROM sztasgn
                                         WHERE 1 = 1
                                         AND sztasgn_camp_code = alumno.campus
                                         AND sztasgn_levl_code = alumno.nivel
                                         AND sztasgn_qnumb = 'Q'||NVL(vl_qa_avance,1)
                                         AND sztasgn_bim_numb in( 'B'||l_bim)
                                         AND sztasgn_jorn_code = DECODE(vl_tipo_jornada,'N','I',vl_tipo_jornada)
                                         AND sztasgn_inso_code = vl_tip_ini
                                         AND sztasgn_camp_code != 'UVE'
                                         UNION
                                         SELECT (sztasgn_crse_numb + sztasgn_opt_numb ) asignacion
                                         FROM sztasgn
                                         WHERE 1 = 1
                                         AND sztasgn_camp_code = alumno.campus
                                         AND sztasgn_levl_code = alumno.nivel
                                         AND sztasgn_qnumb = 'Q'||NVL(vl_qa_avance,1)
--                                         AND sztasgn_bim_numb in( 'B'||l_bim)
                                         AND sztasgn_jorn_code = DECODE(vl_tipo_jornada,'N','I',vl_tipo_jornada)
                                         AND sztasgn_inso_code = 'NO'
                                         AND sztasgn_camp_code = 'UVE'

                                        ) loop
                                        --
                                         --   DBMS_OUTPUT.PUT_LINE('No entre en asigna');

                                             l_free :=f_conslta_freemium(alumno.svrproy_pidm);

                                             BEGIN

                                                SELECT COUNT(*)
                                                INTO l_cuenta_free
                                                FROM GORADID
                                                WHERE 1 = 1
                                                AND goradid_pidm= alumno.svrproy_pidm
                                                AND GORADID_ADID_CODE = l_free;


                                             EXCEPTION WHEN OTHERS THEN
                                                l_cuenta_free:=0;
                                             END;

                                             IF l_cuenta_free > 0 AND alumno.estatus in ('F','N') then


                                                 BEGIN

                                                    SELECT DISTINCT to_number(ZSTPARA_PARAM_VALOR)
                                                    INTO l_asigna_free
                                                    FROM zstpara
                                                    WHERE 1 = 1
                                                    AND ZSTPARA_MAPA_ID ='FREEMIUM_MAT'
                                                    AND ZSTPARA_PARAM_ID =l_free;
                                                 exception when others then
                                                    l_asigna_free:=0;
                                                 end;

                                                 asigna.asignacion:=l_asigna_free;

                                             end IF;


                                             DBMS_OUTPUT.PUT_LINE('No entre en asigna '||l_cuenta_free||' codigo '||l_free);

                                            vl_contador :=0;

                                            For materia in (

                                                            SELECT DISTINCT a.id_alumno,
                                                                            a.id_ciclo,
                                                                            a.id_programa,
                                                                            a.clave_materia_agp materia,
                                                                            a.secuencia,
                                                                            a.svrproy_pidm,--, a.ID_PERIODO,
                                                                            a.clave_materia materia_banner,
                                                                            a.fecha_inicio,
                                                                            c.study_path,
                                                                            a.rel_alumnos_x_asignar_cuatri cuatrimestre,
                                                                            c.rel_programaxalumno_estatus estatus,
                                                                            a.id_periodo ptrm
                                                            FROM rel_alumnos_x_asignar a,
                                                                 rel_programaxalumno c
                                                            WHERE 1 = 1
                                                            AND a.svrproy_pidm = alumno.svrproy_pidm
                                                            AND a.materias_excluidas = 0
                                                            AND c.sgbstdn_pidm= a.svrproy_pidm
                                                            AND a.id_periodo IS NOT NULL
                                                            AND a.rel_alumnos_x_asignar_no_regla  = rel_programaxalumno_no_regla
                                                            AND a.rel_alumnos_x_asignar_no_regla = p_regla
                                                            AND a.materias_excluidas = 0
                                                            AND  (a.svrproy_pidm, clave_materia, a.rel_alumnos_x_asignar_no_regla)  NOT IN (SELECT sztprono_pidm,
                                                                                                                                                   sztprono_materia_banner,
                                                                                                                                                   sztprono_no_regla
                                                                                                                                            FROM sztprono
                                                                                                                                            WHERE 1 = 1
                                                                                                                                            AND  sztprono_pidm =  a.svrproy_pidm
                                                                                                                                            AND  sztprono_no_regla = p_regla )
                                                            order by 1, cuatrimestre,SECUENCIA , materia
                                                            ) Loop



                                                                BEGIN

                                                                   SELECT COUNT(*)
                                                                   INTO l_cuenta_prop
                                                                   FROM sztptrm
                                                                   WHERE 1 = 1
                                                                   AND sztptrm_propedeutico = 1
                                                                   AND sztptrm_term_code =materia.id_ciclo
                                                                   AND sztptrm_ptrm_code =alumno.id_periodo
                                                                   AND sztptrm_program =materia.id_programa;

                                                                exception when others then
                                                                   null;
                                                                end;

                                                                BEGIN

                                                                    SELECT distinct SZTPTRM_MATERIA
                                                                    INTO l_curso_p
                                                                    FROM sztptrm
                                                                    WHERE 1 = 1
                                                                    AND sztptrm_propedeutico = 1
                                                                    AND sztptrm_term_code =materia.id_ciclo
                                                                    AND sztptrm_ptrm_code =alumno.id_periodo
                                                                    AND sztptrm_program =materia.id_programa;

                                                                exception when others then
                                                                   null;
                                                                end;

                                                                BEGIN

                                                                    SELECT COUNT(*)
                                                                    INTO l_cuenta_sfr
                                                                    FROM SFRSTCR
                                                                    WHERE 1 = 1
                                                                    AND sfrstcr_pidm = materia.svrproy_pidm
                                                                    AND sfrstcr_stsp_key_sequence =materia.study_path
                                                                    AND sfrstcr_rsts_code ='RE';

                                                                EXCEPTION WHEN OTHERS THEN
                                                                   NULL;
                                                                END;


                                                                -- para acreditar curso en UVE

                                                                BEGIN

                                                                   SELECT  COUNT(*)
                                                                    INTO l_cuenta_sfr_campus
                                                                    FROM SFRSTCR cr,
                                                                          ssbsect ct
                                                                    WHERE 1 = 1
                                                                    AND cr.sfrstcr_term_code = ct.ssbsect_term_code
                                                                    AND cr.sfrstcr_crn = ct.ssbsect_crn
                                                                    AND cr.sfrstcr_pidm =materia.svrproy_pidm
                                                                    AND cr.sfrstcr_stsp_key_sequence =materia.study_path
                                                                    AND cr.sfrstcr_rsts_code ='RE'
                                                                    AND CT.SSBSECT_SUBJ_CODE||SSBSECT_CRSE_NUMB =l_curso_p
                                                                    AND cr.SFRSTCR_GRDE_CODE in (SELECT distinct SHRGRDE_CODE
                                                                                                  FROM SHRGRDE
                                                                                                  WHERE 1 = 1
                                                                                                  AND SHRGRDE_LEVL_CODE =alumno.nivel
                                                                                                  AND SHRGRDE_PASSED_IND ='Y');

                                                                EXCEPTION WHEN OTHERS THEN
                                                                  NULL;
                                                                END;


                                                               DBMS_OUTPUT.PUT_LINE('Entra  al asma '||l_cuenta_prop||' cuenta matyerias '||l_cuenta_sfr||' cuenta campus '||l_cuenta_sfr_campus||' Sp '||materia.study_path||' Avamce '||vl_qa_avance);

                                                                IF alumno.campus ='UVE' then

                                                                        IF l_cuenta_prop >= 1  AND materia.estatus IN('N','F'/*,'R'*/) AND l_cuenta_sfr = 0 AND l_cuenta_sfr_campus = 0 then

                                                                                vl_contador := 1;

                                                                               DBMS_OUTPUT.PUT_LINE('Entra  al asma '||l_cuenta_prop||' cuenta matyerias '||l_cuenta_sfr||' cuenta campus '||l_cuenta_sfr_campus||' Sp '||materia.study_path||' Avamce '||vl_qa_avance||' Contador '||vl_contador);

                                                                               BEGIN

                                                                                    INSERT INTO sztprono VALUES ( materia.SVRPROY_PIDM,
                                                                                                                  materia.ID_ALUMNO,
                                                                                                                  materia.ID_CICLO,
                                                                                                                  materia.ID_PROGRAMA,
                                                                                                                  l_curso_p,
                                                                                                                  vl_contador,
                                                                                                                  materia.ptrm,
                                                                                                                  l_curso_p,
                                                                                                                  null,
                                                                                                                  materia.FECHA_INICIO,
                                                                                                                  'B'||l_bim,
                                                                                                                  NULL,
                                                                                                                  vl_avance,
                                                                                                                  P_REGLA,
                                                                                                                  USER,
                                                                                                                  materia.STUDY_PATH,
                                                                                                                  alumno.RATE,
                                                                                                                  alumno.jornada_com,
                                                                                                                  sysdate,
                                                                                                                  'Q'||vl_qa_avance,
                                                                                                                  vl_tip_ini,
                                                                                                                  vl_tipo_jornada,
                                                                                                                  'N',
                                                                                                                  'N',
                                                                                                                  materia.estatus,
                                                                                                                  'N',
                                                                                                                  null,
                                                                                                                  materia.secuencia
                                                                                                                   );
                                                                                    commit;

                                                                                EXCEPTION WHEN OTHERS THEN
                                                                                    NULL;
                                                                                END;

                --                                                                Commit;
                                                                                exit when vl_contador=ASIGNA.ASIGNACION;


--                                                                        ELSIF l_cuenta_sfr_campus > 0 then
--
--                                                                            nulL;

                                                                        else
                                                                                vl_contador:=vl_contador+1;

                                                                                DBMS_OUTPUT.PUT_LINE('Entra  al asma '||l_cuenta_prop||' cuenta matyerias '||l_cuenta_sfr||' cuenta campus '||l_cuenta_sfr_campus||' Sp '||materia.study_path||' Avamce '||vl_qa_avance||' Contador '||vl_contador);

                                                                                BEGIN

                                                                                    INSERT INTO sztprono VALUES ( materia.SVRPROY_PIDM,
                                                                                                                  materia.ID_ALUMNO,
                                                                                                                  materia.ID_CICLO,
                                                                                                                  materia.ID_PROGRAMA,
                                                                                                                  materia.Materia,
                                                                                                                  vl_contador,
                                                                                                                  materia.ptrm,
                                                                                                                  materia.Materia_Banner,
                                                                                                                  null,
                                                                                                                  materia.FECHA_INICIO,
                                                                                                                  'B'||l_bim,
                                                                                                                  NULL,
                                                                                                                  vl_avance,
                                                                                                                  P_REGLA,
                                                                                                                  USER,
                                                                                                                  materia.STUDY_PATH,
                                                                                                                  alumno.RATE,
                                                                                                                  alumno.jornada_com,
                                                                                                                  sysdate,
                                                                                                                  'Q'||vl_qa_avance,
                                                                                                                  vl_tip_ini,
                                                                                                                  vl_tipo_jornada,
                                                                                                                  'N',
                                                                                                                  'N',
                                                                                                                  materia.estatus,
                                                                                                                  'N',
                                                                                                                  null,
                                                                                                                  materia.secuencia
                                                                                                                   );
                                                                                    commit;

                                                                                EXCEPTION WHEN OTHERS THEN
                                                                                    NULL;
                                                                                END;
                --                                                                Commit;
                                                                                exit when vl_contador=ASIGNA.ASIGNACION;

                                                                        end IF;


                                                                ELSE

                                                                        IF l_cuenta_prop >= 1 /*AND vl_qa_avance =1*/ AND materia.estatus IN('N','F') AND l_cuenta_sfr = 0 then

                                                                                vl_contador := 1;


                                                                                BEGIN

                                                                                    INSERT INTO sztprono VALUES ( materia.SVRPROY_PIDM,
                                                                                                                  materia.ID_ALUMNO,
                                                                                                                  materia.ID_CICLO,
                                                                                                                  materia.ID_PROGRAMA,
                                                                                                                  l_curso_p,
                                                                                                                  vl_contador,
                                                                                                                  materia.ptrm,
                                                                                                                  l_curso_p,
                                                                                                                  null,
                                                                                                                  materia.FECHA_INICIO,
                                                                                                                  'B'||l_bim,
                                                                                                                  NULL,
                                                                                                                  vl_avance,
                                                                                                                  P_REGLA,
                                                                                                                  USER,
                                                                                                                  materia.STUDY_PATH,
                                                                                                                  alumno.RATE,
                                                                                                                  alumno.jornada_com,
                                                                                                                  sysdate,
                                                                                                                  'Q'||vl_qa_avance,
                                                                                                                  vl_tip_ini,
                                                                                                                  vl_tipo_jornada,
                                                                                                                  'N',
                                                                                                                  'N',
                                                                                                                  materia.estatus,
                                                                                                                  'N',
                                                                                                                  null,
                                                                                                                  materia.secuencia
                                                                                                                   );
                                                                                  --  commit;

                                                                                EXCEPTION WHEN OTHERS THEN
                                                                                    dbms_output.put_line('Valor '||vl_contador||' Asigna '||ASIGNA.ASIGNACION||' '||sqlerrm);
                                                                                END;

                                                                                dbms_output.put_line('Valor '||vl_contador||' Asigna '||ASIGNA.ASIGNACION);

                                                                                Commit;

                                                                                exit when vl_contador=ASIGNA.ASIGNACION;

                                                                        else


                                                                           --IF l_cuenta_eje = 0 then

                                                                                vl_contador := vl_contador +1;

                                                                            --end IF;


                                                                            BEGIN

                                                                                SELECT nvl(max(sztprono_secuencia),0)+1
                                                                                INTO l_secuencia
                                                                                FROM sztprono
                                                                                WHERE 1 = 1
                                                                                AND sztprono_no_regla = P_REGLA
                                                                                AND sztprono_pidm = materia.SVRPROY_PIDM;

                                                                            exception when others then
                                                                                null;
                                                                            end;


                                                                            BEGIN

                                                                                INSERT INTO sztprono VALUES ( materia.SVRPROY_PIDM,
                                                                                                              materia.ID_ALUMNO,
                                                                                                              materia.ID_CICLO,
                                                                                                              materia.ID_PROGRAMA,
                                                                                                              materia.Materia,
                                                                                                              l_secuencia,
                                                                                                              materia.ptrm,
                                                                                                              materia.Materia_Banner,
                                                                                                              null,
                                                                                                              materia.FECHA_INICIO,
                                                                                                              'B'||l_bim,
                                                                                                              NULL,
                                                                                                              vl_avance,
                                                                                                              P_REGLA,
                                                                                                              USER,
                                                                                                              materia.STUDY_PATH,
                                                                                                              alumno.RATE,
                                                                                                              alumno.jornada_com,
                                                                                                              sysdate,
                                                                                                              'Q'||vl_qa_avance,
                                                                                                              vl_tip_ini,
                                                                                                              vl_tipo_jornada,
                                                                                                              'N',
                                                                                                              'N',
                                                                                                              materia.estatus,
                                                                                                              'N',
                                                                                                              null,
                                                                                                              materia.secuencia
                                                                                                               );

                                                                            EXCEPTION WHEN OTHERS THEN
                                                                                dbms_output.put_line('Error -->'||sqlerrm);
                                                                              --  raise_application_error (-20002,'Error al obtener valores de  spriden  '|| SQLCODE||' Error: '||SQLERRM);
                                                                            END;

                                                                            commit;



                                                                                exit when vl_contador = ASIGNA.ASIGNACION;

                                                                        end IF;

                                                                end IF;

                                                                Commit;

                                                            END LOOP materia;

                                                            DBMS_OUTPUT.PUT_LINE('entra a asgn '||vl_contador||' Asignacion '||ASIGNA.ASIGNACION);

                                                            vl_contador:=0;
                                                            ASIGNA.ASIGNACION:=0;


                                        END LOOP asigna;

                    end IF;

                    l_cuenta_para_campus:=null;

                    BEGIN

                        SELECT COUNT(*)
                        INTO l_cuenta_para_campus
                        FROM zstpara
                        WHERE 1 = 1
                        AND zstpara_mapa_id='CAMP_PRONO'
                        AND zstpara_param_id  = alumno.campus
                        AND zstpara_param_valor = alumno.nivel
                        AND zstpara_param_valor in('MA','MS','DO');

                    EXCEPTION WHEN OTHERS THEN
                        l_cuenta_para_campus:=0;
                    END;

                    IF l_cuenta_para_campus > 0 THEN

                        --DBMS_OUTPUT.PUT_LINE('Entra a maestria 2588');
                       -- dbms_output.put_line('Avance '||vl_qa_avance);

                        vl_asignacion := 0;
                        val_max :=0;

                        l_ptrm_pi:=NULL;

                        BEGIN

--                            select CASE WHEN ptrm_pi ='A4B' THEN 'A0B'
--                                        WHEN ptrm_pi ='M4B' THEN 'M0B'
--                                        WHEN ptrm_pi ='A4D' THEN 'A1A'
--                                        WHEN ptrm_pi ='M4D' THEN 'M1A'
--                                        WHEN ptrm_pi ='A3C' THEN 'A0C'
--                                        WHEN ptrm_pi ='M3C' THEN 'M0C'
--                                        WHEN ptrm_pi ='A3A' THEN 'A0A'
--                                        WHEN ptrm_pi ='M3A' THEN 'M0A'
--                                        WHEN ptrm_pi ='A3B' THEN 'A0B'
--                                        WHEN ptrm_pi ='M3B' THEN 'M0B'
--                                        WHEN ptrm_pi ='A3D' THEN 'A1A'
--                                        WHEN ptrm_pi ='M3D' THEN 'M1A'
--                                   ELSE
--                                         ptrm_pi
--                                   END ptrm_pi
--                            into l_ptrm_pi
--                            from
--                            (
--                                SELECT distinct min(SFRSTCR_PTRM_CODE) ptrm_pi
--                                FROM SFRSTCR a
--                                WHERE 1 = 1
--                                AND a.sfrstcr_pidm = alumno.svrproy_pidm
--                                AND a.sfrstcr_stsp_key_sequence =alumno.sp
--                                AND SUBSTR(A.sfrstcr_term_code,5,1)NOT IN(8,9)
--                                AND a.sfrstcr_rsts_code ='RE'
--                                AND sfrstcr_term_code =(select min(b.sfrstcr_term_code)
--                                                        from sfrstcr b
--                                                        where 1 = 1
--                                                        and a.sfrstcr_pidm = b.sfrstcr_pidm
--                                                        and a.sfrstcr_stsp_key_sequence =b.sfrstcr_stsp_key_sequence
--                                                        and a.sfrstcr_rsts_code = b.sfrstcr_rsts_code
--                                                        )
--                               AND a.sfrstcr_ptrm_code = (SELECT min (d1.sfrstcr_ptrm_code)
--                                                          FROM sfrstcr D1
--                                                          WHERE 1=1
--                                                          AND a.sfrstcr_pidm = d1.sfrstcr_pidm
--                                                           AND a.sfrstcr_term_code = d1.sfrstcr_term_code
--                                                          AND a.sfrstcr_rsts_code = d1.sfrstcr_rsts_code
--                                                           )
--                             );

                            select DISTINCT ptrm_pi
                            into l_ptrm_pi
                            from
                            (
                                    select CASE WHEN ptrm_pi ='A4B' THEN 'A0B'
                                                                    WHEN ptrm_pi ='M4B' THEN 'M0B'
                                                                    WHEN ptrm_pi ='A4D' THEN 'A1A'
                                                                    WHEN ptrm_pi ='M4D' THEN 'M1A'
                                                                    WHEN ptrm_pi ='A3C' THEN 'A0C'
                                                                    WHEN ptrm_pi ='M3C' THEN 'M0C'
                                                                    WHEN ptrm_pi ='A3A' THEN 'A0A'
                                                                    WHEN ptrm_pi ='M3A' THEN 'M0A'
                                                                    WHEN ptrm_pi ='A3B' THEN 'A0B'
                                                                    WHEN ptrm_pi ='M3B' THEN 'M0B'
                                                                    WHEN ptrm_pi ='A3D' THEN 'A1A'
                                                                    WHEN ptrm_pi ='M3D' THEN 'M1A'
                                                               ELSE
                                                                     ptrm_pi
                                                               END ptrm_pi,
                                                               fecha
                            --                            into l_ptrm_pi
                                                        from
                                                        (
                                                            SELECT distinct SFRSTCR_PTRM_CODE ptrm_pi,SFRSTCR_ACTIVITY_DATE fecha
                                                            FROM SFRSTCR a
                                                            WHERE 1 = 1
                                                            AND a.sfrstcr_pidm = alumno.svrproy_pidm
                                                            AND a.sfrstcr_stsp_key_sequence =alumno.sp
                                                            AND SUBSTR(A.sfrstcr_term_code,5,1)NOT IN(8,9)
                                                            AND a.sfrstcr_rsts_code ='RE'
                                                            AND sfrstcr_term_code =(select min(b.sfrstcr_term_code)
                                                                                    from sfrstcr b
                                                                                    where 1 = 1
                                                                                    and a.sfrstcr_pidm = b.sfrstcr_pidm
                                                                                    and a.sfrstcr_stsp_key_sequence =b.sfrstcr_stsp_key_sequence
                                                                                    and a.sfrstcr_rsts_code = b.sfrstcr_rsts_code
                                                                                    )
                                                           AND a.sfrstcr_ptrm_code = (SELECT min (d1.sfrstcr_ptrm_code)
                                                                                      FROM sfrstcr D1
                                                                                      WHERE 1=1
                                                                                      AND a.sfrstcr_pidm = d1.sfrstcr_pidm
                                                                                      AND a.sfrstcr_term_code = d1.sfrstcr_term_code
                                                                                      AND a.sfrstcr_rsts_code = d1.sfrstcr_rsts_code
                                                                                       )
                                                         )
                            )where 1 = 1
                            and fecha = (select min(fecha)
                                        from
                                        (
                                                select CASE WHEN ptrm_pi ='A4B' THEN 'A0B'
                                                                                WHEN ptrm_pi ='M4B' THEN 'M0B'
                                                                                WHEN ptrm_pi ='A4D' THEN 'A1A'
                                                                                WHEN ptrm_pi ='M4D' THEN 'M1A'
                                                                                WHEN ptrm_pi ='A3C' THEN 'A0C'
                                                                                WHEN ptrm_pi ='M3C' THEN 'M0C'
                                                                                WHEN ptrm_pi ='A3A' THEN 'A0A'
                                                                                WHEN ptrm_pi ='M3A' THEN 'M0A'
                                                                                WHEN ptrm_pi ='A3B' THEN 'A0B'
                                                                                WHEN ptrm_pi ='M3B' THEN 'M0B'
                                                                                WHEN ptrm_pi ='A3D' THEN 'A1A'
                                                                                WHEN ptrm_pi ='M3D' THEN 'M1A'
                                                                           ELSE
                                                                                 ptrm_pi
                                                                           END ptrm_pi,
                                                                           fecha
                                                                    from
                                                                    (
                                                                        SELECT distinct SFRSTCR_PTRM_CODE ptrm_pi,SFRSTCR_ACTIVITY_DATE fecha
                                                                        FROM SFRSTCR a
                                                                        WHERE 1 = 1
                                                                        AND a.sfrstcr_pidm = alumno.svrproy_pidm
                                                                        AND a.sfrstcr_stsp_key_sequence =alumno.sp
                                                                        AND SUBSTR(A.sfrstcr_term_code,5,1)NOT IN(8,9)
                                                                        AND a.sfrstcr_rsts_code ='RE'
                                                                        AND sfrstcr_term_code =(select min(b.sfrstcr_term_code)
                                                                                                from sfrstcr b
                                                                                                where 1 = 1
                                                                                                and a.sfrstcr_pidm = b.sfrstcr_pidm
                                                                                                and a.sfrstcr_stsp_key_sequence =b.sfrstcr_stsp_key_sequence
                                                                                                and a.sfrstcr_rsts_code = b.sfrstcr_rsts_code
                                                                                                )
                                                                       AND a.sfrstcr_ptrm_code = (SELECT min (d1.sfrstcr_ptrm_code)
                                                                                                  FROM sfrstcr D1
                                                                                                  WHERE 1=1
                                                                                                  AND a.sfrstcr_pidm = d1.sfrstcr_pidm
                                                                                                  AND a.sfrstcr_term_code = d1.sfrstcr_term_code
                                                                                                  AND a.sfrstcr_rsts_code = d1.sfrstcr_rsts_code
                                                                                                   )
                                                                     )
                                        )where 1 = 1);
                        EXCEPTION WHEN OTHERS THEN
                            NULL;
                        END;

                        if l_ptrm_pi is null then

                            l_ptrm_pi:=alumno.id_periodo;

                        end if;

                        IF alumno.periodicidad = 1 THEN

                         --  DBMS_OUTPUT.PUT_LINE('Entra  al 36 2685 '||l_ptrm_pi);

                          -- dbms_output.put_line ('Periodo '||alumno.id_ciclo||' Sp '||alumno.sp||' Pidm '||alumno.svrproy_pidm||' Tipo de Inicio '||vl_tip_ini||' Avance '||vl_qa_avance||' Ptrm '||alumno.id_periodo||' l_ptrm_pi '||l_ptrm_pi);

                          l_bim:=null;

                           BEGIN

                               l_bim :=F_CALCULA_BIM(alumno.id_ciclo,
                                                     alumno.sp,
                                                     alumno.svrproy_pidm,
                                                     vl_tip_ini,
                                                     'Q'||vl_qa_avance,
                                                     p_regla,
                                                     l_ptrm_pi,
                                                     alumno.nivel);

                           EXCEPTION WHEN OTHERS THEN
                               NULL;
                           END;

                            --raise_application_error (-20002,'Ciclo '||alumno.id_ciclo||' Sp '||alumno.sp||' Pidm '|| alumno.svrproy_pidm||' Tipo Ini '||vl_tip_ini||' Avance '||'Q'||vl_qa_avance||' Regla '||p_regla||' Pi '||l_ptrm_pi||' Nivel '||alumno.nivel);

                           DBMS_OUTPUT.PUT_LINE('Bimbo '||l_bim||' Matricula '||alumno.ID_ALUMNO);


                             BEGIN

                                 SELECT COUNT (DISTINCT sztasma_qnumb)
                                     INTO val_max
                                 FROM sztasma
                                 WHERE  1 = 1
                                 AND sztasma_camp_code = alumno.campus
                                 AND sztasma_levl_code = alumno.nivel
                                 AND sztasma_bim_numb is not null;

                                  --    DBMS_OUTPUT.PUT_LINE('Entra  al 37 val_max '||val_max||' campus '||alumno.campus||' Nivel '|| alumno.nivel);
                             EXCEPTION WHEN OTHERS THEN
                               val_max :=0;
                             END;

                             --DBMS_OUTPUT.PUT_LINE('Entra  al 38 vl_qa_avance '||vl_qa_avance||' tipo inicio '||vl_tip_ini);

                             IF vl_parte_bim = 4 THEN

                               vl_parte_bim:=2;

                             END IF;


                        ELSIF alumno.periodicidad = 2 THEN

                         -- dbms_output.put_line ('salida2 '||alumno.campus ||'*'||alumno.NIVEL||'*'||'Q'||vl_qa_avance||'*'||'B'||vl_parte_bim||'*--> '||vl_tip_ini);

                          --DBMS_OUTPUT.PUT_LINE('Entra  al 40 ');

                             BEGIN

                                 SELECT COUNT (DISTINCT sztasma_qnumb)
                                 INTO val_max
                                 FROM sztasma
                                 WHERE sztasma_camp_code = alumno.campus
                                 AND sztasma_levl_code = alumno.nivel
                                 AND sztasma_bim_numb is  null;

                                  --    DBMS_OUTPUT.PUT_LINE('Entra  al 41 val_max '||val_max);
                             EXCEPTION WHEN OTHERS THEN
                               val_max :=0;
                             END;

                             BEGIN

                                l_bim :=NVL(F_CALCULA_BIM(alumno.id_ciclo,
                                                           alumno.sp,
                                                           alumno.svrproy_pidm,
                                                           vl_tip_ini,
                                                           'Q'||vl_qa_avance,
                                                           p_regla,
                                                           l_ptrm_pi,
                                                           alumno.nivel),1);

                             EXCEPTION WHEN OTHERS THEN
                                 NULL;
                             END;

                             IF alumno.campus ='UMM' THEN

                                  vl_asignacion :=3;

                             END IF;



                        end IF;

                         vl_contador :=0;
                                   --  DBMS_OUTPUT.PUT_LINE('Entra  al 44 aqui avance '||vl_qa_avance||','||l_bim);
                                       For materia in (
                                                       SELECT DISTINCT a.id_alumno,
                                                                       a.id_ciclo,
                                                                       a.id_programa,
                                                                       a.clave_materia_agp materia,
                                                                       a.secuencia,
                                                                       a.svrproy_pidm,--, a.ID_PERIODO,
                                                                       a.clave_materia materia_banner,
                                                                       a.fecha_inicio,
                                                                       c.study_path,
                                                                       a.rel_alumnos_x_asignar_cuatri cuatrimestre,
                                                                       rel_programaxalumno_estatus estatus
                                                       FROM rel_alumnos_x_asignar a,
                                                            rel_programaxalumno c
                                                       WHERE 1 = 1
                                                       AND a.svrproy_pidm = alumno.svrproy_pidm
                                                       AND a.materias_excluidas = 0
                                                       AND c.sgbstdn_pidm= a.svrproy_pidm
                                                       AND a.id_periodo is not null
                                                       AND a.rel_alumnos_x_asignar_no_regla  = rel_programaxalumno_no_regla
                                                       AND a.rel_alumnos_x_asignar_no_regla = p_regla
--                                                       AND a.ID_ALUMNO='010331823'
                                                       ORDER BY 1, cuatrimestre ,secuencia , materia

                                          ) LOOP

                                                 DBMS_OUTPUT.PUT_LINE('Entra  al 44 aqui avance '||vl_qa_avance||','||l_bim);

                                                  BEGIN

                                                      SELECT COUNT(*)
                                                      INTO l_cuenta_eje
                                                      FROM ZSTPARA
                                                      WHERE 1 = 1
                                                      AND ZSTPARA_MAPA_ID = 'MATERIAS_IEBS'
                                                      AND ZSTPARA_PARAM_ID = materia.Materia;

                                                  exception when others then
                                                      null;
                                                  end;

                                                  IF l_cuenta_eje = 0 then

                                                    vl_contador := vl_contador +1;
                                                    dbms_output.put_line ('Contador  ' || vl_contador);
                                                    DBMS_OUTPUT.PUT_LINE('Entra  al 45 estatus '||materia.estatus);

                                                  end IF;

                                                 BEGIN

                                                     SELECT nvl(max(sztprono_secuencia),0)+1
                                                     INTO l_secuencia
                                                     FROM sztprono
                                                     WHERE 1 = 1
                                                     AND sztprono_no_regla = P_REGLA
                                                     AND sztprono_pidm = materia.SVRPROY_PIDM;

                                                 exception when others then
                                                     null;
                                                 end;

                                                 BEGIN

                                                    SELECT COUNT(*)
                                                    INTO l_cuenta_asma
                                                    FROM ZSTPARA
                                                    WHERE 1 = 1
                                                    AND zstpara_mapa_id ='ASMA_MAT'
                                                    AND zstpara_param_desc ='Q'||vl_qa_avance
                                                    AND zstpara_param_id = materia.id_programa;

                                                 EXCEPTION WHEN OTHERS THEN
                                                    NULL;
                                                 END;

                                                  DBMS_OUTPUT.PUT_LINE('Cuenta asma '||l_cuenta_asma);

                                                 IF l_cuenta_asma > 0 THEN

                                                     BEGIN

                                                        SELECT DISTINCT zstpara_param_valor
                                                        INTO vl_asignacion
                                                        FROM zstpara
                                                        WHERE 1 = 1
                                                        AND zstpara_mapa_id ='ASMA_MAT'
                                                        AND zstpara_param_desc ='Q'||vl_qa_avance
                                                        AND zstpara_param_id = materia.id_programa;

                                                     EXCEPTION WHEN OTHERS THEN
                                                        NULL;
                                                     END;

                                                 ELSE

                                                    BEGIN

                                                        SELECT COUNT(*)
                                                        INTO l_cuenta_asma
                                                        FROM sztasma
                                                        WHERE 1 = 1
                                                        AND SZTASMA_CAMP_CODE = alumno.campus
                                                        AND SZTASMA_LEVL_CODE = alumno.nivel
                                                        AND SZTASMA_PROGRAMA =materia.id_programa
                                                        AND SZTASMA_PTRM_CODE = l_ptrm_pi;

                                                    exception when others then
                                                        l_cuenta_asma:=0;
                                                    end;


                                                    DBMS_OUTPUT.PUT_LINE('Cuenta asma '||l_cuenta_asma||' avance '||vl_qa_avance);


                                                    IF l_cuenta_asma > 0  AND vl_qa_avance > 5 then

                                                        DBMS_OUTPUT.PUT_LINE('Entra  a asma xx1 '||l_cuenta_asma);



                                                        BEGIN
                                                              SELECT distinct (sztasma_crse_numb + nvl(sztasma_opt_numb,0) ) asignacion
                                                              INTO vl_asignacion
                                                              FROM sztasma
                                                              WHERE sztasma_camp_code = alumno.campus
                                                              AND sztasma_levl_code = alumno.nivel
                                                              AND sztasma_qnumb = 'Q'||vl_qa_avance
                                                              AND sztasma_bim_numb IS NULL
                                                              AND sztasma_inso_code = vl_tip_ini
                                                              AND SZTASMA_PROGRAMA =materia.id_programa;
--                                                              AND SZTASMA_PTRM_CODE = alumno.ID_PERIODO;

                                                              DBMS_OUTPUT.PUT_LINE('Entra  al 43 vl_asignacion uno '||vl_asignacion);
                                                        EXCEPTION WHEN OTHERS THEN
                                                            vl_asignacion :=0;

                                                             IF alumno.campus ='UMM' THEN
                                                                 vl_asignacion :=3;
                                                             END IF;

                                                        END;

                                                         --cuANDo pasa del maximo q
                                                       IF vl_qa_avance   >= val_max then

                                                          vl_asignacion:=4;

                                                       end IF;

                                                       IF vl_asignacion  IS NULL OR vl_asignacion = 0 THEN

                                                           vl_asignacion:=2;

                                                       END IF;

                                                       DBMS_OUTPUT.PUT_LINE('Entra  al 43 vl_asignacion dos '||vl_asignacion);

                                                    else

                                                       DBMS_OUTPUT.PUT_LINE('Entra  a asma xx2 '||l_cuenta_asma);

                                                       IF alumno.periodicidad = 1 THEN

                                                            DBMS_OUTPUT.PUT_LINE('VALIDACION PARA CONFIGURACION POR BIMESTRE 2837');

                                                            -- VALIDACION PARA CONFIGURACION POR BIMESTRE Y DISTINCION POR ASMA
--
--                                                            IF alumno.id_programa in ('UTLMADVFED','UTSMSVBNAS','UTLMAAIFED','UTSMSAINAS') then
--
--                                                                l_bim:=2;
--
--                                                            end IF;

                                                            l_valida_asma:=0;

                                                            BEGIN
                                                                  SELECT COUNT(*)
                                                                  INTO l_valida_asma
                                                                  FROM sztasma
                                                                  WHERE sztasma_camp_code = alumno.campus
                                                                  AND sztasma_levl_code = alumno.nivel
                                                                  AND sztasma_qnumb = 'Q'||vl_qa_avance
                                                                  AND sztasma_bim_numb ='B'||l_bim
                                                                  AND sztasma_inso_code = vl_tip_ini
                                                                  AND SZTASMA_PROGRAMA = materia.id_programa
                                                                  AND SZTASMA_PTRM_CODE = l_ptrm_pi;

                                                                  DBMS_OUTPUT.PUT_LINE('Entra  al 43 vl_asignacion OCHO '||vl_asignacion);
                                                            EXCEPTION WHEN OTHERS THEN
                                                                null;

                                                            END;

                                                            DBMS_OUTPUT.PUT_LINE(' valida asma '||l_valida_asma||' campus  '||alumno.campus||' nivel  '||alumno.nivel||' avance '||vl_qa_avance||' Bim '||l_bim||' Tipo Ini  '||vl_tip_ini||' Ptrm '||alumno.ID_PERIODO);

                                                            IF l_valida_asma = 0 then



                                                                     BEGIN
                                                                          SELECT (sztasma_crse_numb + nvl(sztasma_opt_numb,0) ) asignacion
                                                                          INTO vl_asignacion
                                                                          FROM sztasma
                                                                          WHERE sztasma_camp_code = alumno.campus
                                                                          AND sztasma_levl_code = alumno.nivel
                                                                          AND sztasma_qnumb = 'Q'||vl_qa_avance
                                                                          AND sztasma_bim_numb = 'B'||l_bim
                                                                          AND sztasma_inso_code = vl_tip_ini
                                                                          and SZTASMA_PTRM_CODE = l_ptrm_pi
                                                                          AND SZTASMA_PROGRAMA IS NULL;

                                                                     EXCEPTION WHEN OTHERS THEN
                                                                         vl_asignacion :=0;

                                                                          IF alumno.campus ='UMM' THEN
                                                                              vl_asignacion :=3;

                                                                          END IF;

                                                                     END;

                                                                     DBMS_OUTPUT.PUT_LINE(' ENTRA 1  en este lugar vl_tip_ini '||vl_tip_ini||' l_ptrm_pi '||l_ptrm_pi||' vl_asignacion '||vl_asignacion);

                                                                     if vl_qa_avance > 5 then

                                                                        vl_asignacion:=2;

                                                                     end if;

                                                                     --cuANDo pasa del maximo q
                                                                     IF vl_qa_avance   >= val_max then

                                                                        vl_asignacion:=4;

                                                                     end IF;

                                                                     DBMS_OUTPUT.PUT_LINE(' ENTRA campus  '||alumno.campus||' total materias '||vl_asignacion);

                                                                     IF alumno.campus ='INC' then
                                                                        vl_asignacion :=2;
                                                                      end IF;

                                                            elsIF l_valida_asma > 0 then

                                                            DBMS_OUTPUT.PUT_LINE('Entra 2');

                                                                -- REVISIAR CON ALDO POR QUE NO ESTABA CON LA CONFIGURACION M1A 010047009
                                                                 BEGIN
                                                                      SELECT (sztasma_crse_numb + nvl(sztasma_opt_numb,0) ) asignacion
                                                                      INTO vl_asignacion
                                                                      FROM sztasma
                                                                      WHERE sztasma_camp_code = alumno.campus
                                                                      AND sztasma_levl_code = alumno.nivel
                                                                      AND sztasma_qnumb = 'Q'||vl_qa_avance
                                                                      AND sztasma_bim_numb ='B'||l_bim
                                                                      AND sztasma_inso_code = vl_tip_ini
                                                                      AND SZTASMA_PROGRAMA = materia.id_programa
                                                                      AND SZTASMA_PTRM_CODE = l_ptrm_pi;

                                                                      DBMS_OUTPUT.PUT_LINE('Entra  al 43 vl_asignacion tres '||vl_asignacion);
                                                                 EXCEPTION WHEN OTHERS THEN
                                                                     vl_asignacion :=0;

                                                                      IF alumno.campus ='UMM' THEN
                                                                          vl_asignacion :=3;
                                                                      END IF;

                                                                 END;

                                                            end IF;

                                                             DBMS_OUTPUT.PUT_LINE('Entra  al 43 vl_asignacion '||vl_asignacion||'2868');

                                                       ELSE
                                                            DBMS_OUTPUT.PUT_LINE('Entra  al 43 tipo ini  '||vl_tip_ini||' Programa '||materia.id_programa);

                                                            IF alumno.nivel ='DO' then

                                                                DBMS_OUTPUT.PUT_LINE('Entra  a Doctorado campus '||alumno.campus||' Nivel '||alumno.nivel||' Avance '||vl_qa_avance||' ini '||vl_tip_ini||' programa '||materia.id_programa);


                                                                 BEGIN
                                                                      SELECT (sztasma_crse_numb + nvl(sztasma_opt_numb,0) ) asignacion
                                                                      INTO vl_asignacion
                                                                      FROM sztasma
                                                                      WHERE sztasma_camp_code = alumno.campus
                                                                      AND sztasma_levl_code = alumno.nivel
                                                                      AND sztasma_qnumb = 'Q'||vl_qa_avance
                                                                      AND sztasma_bim_numb IS NULL
                                                                      AND sztasma_inso_code = vl_tip_ini;
                                                                    --  AND SZTASMA_PROGRAMA = materia.id_programa;
                                                                    --  AND SZTASMA_PTRM_CODE = alumno.ID_PERIODO;

                                                                      DBMS_OUTPUT.PUT_LINE('Entra  al 43 vl_asignacion cuatro '||vl_asignacion);
                                                                 EXCEPTION WHEN OTHERS THEN
                                                                     vl_asignacion :=0;

                                                                      IF alumno.campus ='UMM' THEN
                                                                          vl_asignacion :=3;
                                                                      END IF;

                                                                 END;
--
                                                                 dbms_output.put_line('Excepciones '||vl_qa_avance||' maximo '||val_max||' Total materias 1.0 --> '||vl_asignacion);

                                                                 IF vl_qa_avance   >= val_max then

                                                                    vl_asignacion:=4;

                                                                 end IF;

                                                            else

                                                                 BEGIN
                                                                      SELECT distinct(sztasma_crse_numb + nvl(sztasma_opt_numb,0) ) asignacion
                                                                      INTO vl_asignacion
                                                                      FROM sztasma
                                                                      WHERE sztasma_camp_code = alumno.campus
                                                                      AND sztasma_levl_code = alumno.nivel
                                                                      AND sztasma_qnumb = 'Q'||vl_qa_avance
                                                                      AND sztasma_bim_numb IS NULL
                                                                      AND sztasma_inso_code = vl_tip_ini
                                                                     -- and SZTASMA_PTRM_CODE = alumno.ID_PERIODO
                                                                      AND SZTASMA_PROGRAMA IS NULL;

                                                                      DBMS_OUTPUT.PUT_LINE('Entra  al 43 vl_asignacion cinco '||vl_asignacion);
                                                                 EXCEPTION WHEN OTHERS THEN
                                                                     vl_asignacion :=0;

                                                                      IF alumno.campus ='UMM' THEN
                                                                          vl_asignacion :=3;
                                                                      END IF;

                                                                 END;

                                                                 --cuANDo pasa del maximo q
                                                                 dbms_output.put_line('Excepciones '||vl_qa_avance||' maximo '||val_max||' Total materias '||vl_asignacion);

                                                                 IF vl_qa_avance   >= val_max then

                                                                    vl_asignacion:=4;

                                                                 end IF;

                                                             end IF;

                                                             DBMS_OUTPUT.PUT_LINE('Asignacion '||vl_asignacion);

                                                        END IF;

                                                    end IF;


                                                 END IF;

                                                 DBMS_OUTPUT.PUT_LINE('Periodicidad '||alumno.PERIODICIDAD||' Periodo 2'||alumno.ID_PERIODO);

                                                 BEGIN

                                                    SELECT COUNT(*)
                                                    INTO l_cuenta_prop
                                                    FROM sztptrm
                                                    WHERE 1 = 1
                                                    AND sztptrm_propedeutico = 1
                                                    AND sztptrm_term_code =materia.id_ciclo
                                                    AND sztptrm_ptrm_code =alumno.id_periodo
                                                    AND sztptrm_program =materia.id_programa;

                                                 exception when others then
                                                    null;
                                                 end;

                                                 DBMS_OUTPUT.PUT_LINE('Periodo '||materia.ID_CICLO||' Ptrm '||alumno.ID_PERIODO||' Programa '||materia.ID_PROGRAMA||' Matricula '||materia.ID_ALUMNO||' Prope '||l_cuenta_prop);
                                                 --macana1

                                                 BEGIN

                                                    SELECT COUNT(*)
                                                    INTO l_cuenta_sfr
                                                    FROM SFRSTCR
                                                    WHERE 1 = 1
                                                    AND sfrstcr_pidm = materia.svrproy_pidm
                                                    AND sfrstcr_stsp_key_sequence =materia.study_path
                                                    AND sfrstcr_rsts_code ='RE';

                                                 EXCEPTION WHEN OTHERS THEN
                                                    NULL;
                                                 END;

                                                 DBMS_OUTPUT.PUT_LINE('Entra  al asma '||l_cuenta_prop||' cuenta matyerias '||l_cuenta_sfr||' Avance '||vl_qa_avance);

                                                IF l_cuenta_prop >= 1 /*AND vl_qa_avance =1*/ AND materia.estatus IN('N','F','R') AND l_cuenta_sfr = 0 then

                                                      DBMS_OUTPUT.PUT_LINE('Entra  al 47000 '||l_cuenta_prop);

                                                      BEGIN
                                                                  INSERT INTO sztprono VALUES ( materia.svrproy_pidm,
                                                                                                materia.id_alumno,
                                                                                                materia.id_ciclo,
                                                                                                materia.id_programa,
                                                                                                'M1HB401',
                                                                                                vl_contador,
                                                                                                alumno.id_periodo,
                                                                                                'M1HB401',
                                                                                                'x',
                                                                                                materia.fecha_inicio,
                                                                                                'B'||l_bim,
                                                                                                null,
                                                                                                vl_avance,
                                                                                                p_regla,
                                                                                                user,
                                                                                                materia.study_path,
                                                                                                alumno.rate,
                                                                                                alumno.jornada_com,
                                                                                                sysdate,
                                                                                                'Q'||vl_qa_avance,
                                                                                                vl_tip_ini,
                                                                                                vl_tipo_jornada,
                                                                                                'N',
                                                                                                'N',
                                                                                                materia.estatus,
                                                                                                'N',
                                                                                                null,
                                                                                                materia.secuencia
                                                                                                );
                                                      Commit;

                                                      EXCEPTION WHEN OTHERS THEN
                                                         DBMS_OUTPUT.PUT_LINE('Entra  al 47000 Error insert prono:'||sqlerrm);
                                                      END;

                                                    EXIT WHEN vl_contador=1;

                                                ELSE

                                                      DBMS_OUTPUT.PUT_LINE('Entra  al 48000 '||l_cuenta_prop);


                                                      BEGIN
                                                                  INSERT INTO sztprono VALUES ( materia.svrproy_pidm,
                                                                                                materia.id_alumno,
                                                                                                materia.id_ciclo,
                                                                                                materia.id_programa,
                                                                                                materia.materia,
                                                                                                l_secuencia,
                                                                                                alumno.id_periodo,
                                                                                                materia.materia_banner,
                                                                                                'x',
                                                                                                materia.fecha_inicio,
                                                                                                'B'||l_bim,
                                                                                                null,
                                                                                                vl_avance,
                                                                                                p_regla,
                                                                                                user,
                                                                                                materia.study_path,
                                                                                                alumno.rate,
                                                                                                alumno.jornada_com,
                                                                                                sysdate,
                                                                                                'Q'||vl_qa_avance,
                                                                                                vl_tip_ini,
                                                                                                vl_tipo_jornada,
                                                                                                'N',
                                                                                                'N',
                                                                                                materia.estatus,
                                                                                                'N',
                                                                                                null,
                                                                                                materia.secuencia
                                                                                                );

--                                                        commit;
                                                      EXCEPTION  WHEN OTHERS THEN
                                                         NULL;
                                                      END;


                                                      DBMS_OUTPUT.PUT_LINE('Macana Semis '||l_semis||' Programa  '||materia.ID_PROGRAMA||' Ptrm'||alumno.ID_PERIODO||' Contador '||vl_contador||' Asignacion '||vl_asignacion);

                                                      COMMIT;


                                                    EXIT WHEN vl_contador=vl_asignacion;

                                                END IF;
                                                 --bANDa


                                          END LOOP Materia;
                                          vl_contador :=0;
                                          l_bim:=null;

                            dbms_output.put_line ('Entra a Maestria Parte de bimestre ' ||vl_parte_bim);

                    END IF;


                    l_cuenta_para_campus:=null;

                    BEGIN

                        SELECT COUNT(*)
                        INTO l_cuenta_para_campus
                        FROM zstpara
                        WHERE 1 = 1
                        AND zstpara_mapa_id='CAMP_PRONO'
                        AND zstpara_param_id  = alumno.campus
                        AND zstpara_param_valor = alumno.nivel
                        AND zstpara_param_valor IN ('EC','ID');

                    EXCEPTION WHEN OTHERS THEN
                        l_cuenta_para_campus:=0;
                    END;

                    IF l_cuenta_para_campus > 0 THEN

                         dbms_output.put_line ('Entra a Ec');

                         vl_contador :=0;

                         For materia in (
                                         SELECT DISTINCT a.id_alumno,
                                                         a.id_ciclo,
                                                         a.id_programa,
                                                         a.clave_materia_agp materia,
                                                         a.secuencia,
                                                         a.svrproy_pidm,--, a.ID_PERIODO,
                                                         a.clave_materia materia_banner,
                                                         a.fecha_inicio,
                                                         c.study_path,
                                                         a.rel_alumnos_x_asignar_cuatri cuatrimestre,
                                                         rel_programaxalumno_estatus estatus,
                                                         a.ID_PERIODO,
                                                         C.FECHA_INICIO fecha_inicio_2
                                         FROM rel_alumnos_x_asignar a,
                                              rel_programaxalumno c
                                         WHERE 1 = 1
                                         AND a.svrproy_pidm = alumno.svrproy_pidm
                                         AND a.materias_excluidas = 0
                                         AND c.sgbstdn_pidm= a.svrproy_pidm
                                         AND a.id_periodo is not null
                                         AND a.rel_alumnos_x_asignar_no_regla  = rel_programaxalumno_no_regla
                                         AND a.rel_alumnos_x_asignar_no_regla = p_regla
            --                             AND a.ID_ALUMNO='010044146'
                                         ORDER BY 1, cuatrimestre ,secuencia , materia

                                          ) LOOP

                                            DBMS_OUTPUT.PUT_LINE('Entra  Ec 2');

                                              BEGIN
                                                   SELECT (sztasma_crse_numb + nvl(sztasma_opt_numb,0) ) asignacion
                                                   INTO vl_asignacion
                                                   FROM sztasma
                                                   WHERE sztasma_camp_code = alumno.campus
                                                   AND sztasma_levl_code = alumno.nivel
                                                   AND sztasma_qnumb = 'Q'||1
                                                   AND sztasma_bim_numb ='B'||1
                                                   AND sztasma_inso_code = 'NO'
                                                   AND SZTASMA_PROGRAMA = materia.ID_PROGRAMA
                                                   AND SZTASMA_PTRM_CODE = alumno.ID_PERIODO;

                                                   DBMS_OUTPUT.PUT_LINE('Entra  al 43 vl_asignacion cinco '||vl_asignacion);
                                              EXCEPTION WHEN OTHERS THEN
                                                null;

                                              END;

                                              DBMS_OUTPUT.PUT_LINE('Entra  Ec 2 asignacion '||vl_asignacion);

                                              BEGIN

                                                  SELECT nvl(max(sztprono_secuencia),0)+1
                                                  INTO l_secuencia
                                                  FROM sztprono
                                                  WHERE 1 = 1
                                                  AND sztprono_no_regla = P_REGLA
                                                  AND sztprono_pidm = materia.SVRPROY_PIDM;

                                              exception when others then
                                                  null;
                                              end;

                                              BEGIN

                                               INSERT INTO sztprono VALUES ( materia.SVRPROY_PIDM,
                                                                            materia.ID_ALUMNO,
                                                                            materia.ID_CICLO,
                                                                            materia.ID_PROGRAMA,
                                                                            materia.materia,
                                                                            l_secuencia,
                                                                            materia.ID_PERIODO,
                                                                            materia.materia_banner,
                                                                            'a',
                                                                            materia.fecha_inicio,
                                                                            'B'||1,
                                                                            materia.fecha_inicio,
                                                                            vl_avance,
                                                                            P_REGLA,
                                                                            USER,
                                                                            materia.STUDY_PATH,
                                                                            alumno.RATE,
                                                                            alumno.jornada_com,
                                                                            sysdate,
                                                                            'Q'||vl_qa_avance,
                                                                            vl_tip_ini,
                                                                            vl_tipo_jornada,
                                                                            'N',
                                                                            'N',
                                                                            materia.estatus,
                                                                            'N',
                                                                            null,
                                                                            materia.secuencia
                                                                             );

                                              EXCEPTION WHEN OTHERS THEN
                                                  dbms_output.put_line('Error -->'||sqlerrm);
                                                  null;
                                              END;

                                          END LOOP;

                    END IF;


                 End IF;

            Else
                     null;
              dbms_output.put_line ('Entra a Maestria Parte de bimestre ' ||vl_parte_bim);
            End IF;

            DBMS_OUTPUT.PUT_LINE('Itera  '||l_itera);


      END LOOP alumno;

      commit;

    if p_incl_ali then --Jpg@Modify@Oct22 separación ejecucion curriculares vs alianzas
      BEGIN
        P_Track_Prono(p_regla,'Inicia Pronostico de Alianzas');
        p_alianzas_pronostico(p_regla);
        P_Track_Prono(p_regla,'Finaliza Pronostico de Alianzas');
      end;
    end if;

     --Jpg@Create@Dic2021 procedimiento de pronostico de alumnos oyentes
        p_oyentes(p_regla,1);

--      BEGIN
--          p_ajuste_130 (p_regla);
--          Commit;
--      End;
--

 END P_PROYECCION_MATERIAS;
 --
 --

    PROCEDURE p_materias_profesor (p_regla NUMBER) IS



    l_id_prof          VARCHAR2(15);
    l_nom_prof         VARCHAR2(120);
    l_contar           NUMBER;
    l_periodo_actual   VARCHAR2(1000);
    l_periodo_anterior VARCHAR2(1000);
    l_periodo_WHERE    VARCHAR2(1000);
    l_periodo_WHERE2   VARCHAR2(1000);
    l_periodo_WHERE3   VARCHAR2(1000);
    l_cadena           VARCHAR2(1000);
    l_cadena2          VARCHAR2(1000);
    l_sql              VARCHAR2(32767);
    vlCOUNT            VARCHAR2(32767);
    l_cuenta_asma      number;

    BEGIN

         BEGIN
           DELETE FROM SZCARGA
           WHERE SZCARGA_no_regla=p_regla;

        exception when others then
            null;
        end;

        dbms_output.put_line('entra 1');

            FOR C_CARGA IN(
                            SELECT distinct SZTPRONO_ID Matricula
                                      ,SZTPRONO_MATERIA_LEGAL Materia
                                     ,SZTPRONO_PROGRAM Programa_Banner
                                     ,SZTPRONO_TERM_CODE Periodo
                                     ,SZTPRONO_PTRM_CODE Parte_Periodo
                                     ,'01' grupo
                                     ,null calIFic
                                     ,null Prof
                                     ,user USUARIO
                                     ,sysdate FECHA_INSERTA
                                     ,to_char (SZTPRONO_FECHA_INICIO, 'dd/mm/yyyy') Fecha_Inicio,
                                     p_regla REGLA
                            FROM sztprono a,
                                    REL_PROGRAMAXALUMNO b,
                                    SZTDTEC c,
                                    REL_ALUMNOS_X_ASIGNAR d,
                                    sztalgo e
                            WHERE a.SZTPRONO_PTRM_CODE = (SELECT max (a1.SZTPRONO_PTRM_CODE)
                                                          FROM SZTPRONO a1
                                                          WHERE 1 = 1
                                                          AND a1.SZTPRONO_ID = a.SZTPRONO_ID
                                                          AND a1.SZTPRONO_TERM_CODE = a.SZTPRONO_TERM_CODE
                                                          AND a1.SZTPRONO_NO_REGLA=p_regla)
                            AND a.SZTPRONO_ID = b.ID_ALUMNO
                            AND a.SZTPRONO_PROGRAM = b.PROGRAMA
                            AND b.PROGRAMA = c.SZTDTEC_PROGRAM
                            AND b.PERIODO_CATALOGO   = c.SZTDTEC_TERM_CODE
                            AND a.SZTPRONO_ID = d.ID_ALUMNO
                            AND a.SZTPRONO_PROGRAM = d.ID_PROGRAMA
                            AND a.SZTPRONO_MATERIA_BANNER = d.CLAVE_MATERIA
                            AND b.campus = e.SZTALGO_CAMP_CODE
                            AND b.FECHA_INICIO >= e.SZTALGO_FECHA_ANT
                            AND a.SZTPRONO_NO_REGLA=p_regla
                            )
                            LOOP



                                BEGIN
                                    INSERT INTO szcarga VALUES(
                                                               c_carga.matricula,
                                                               c_carga.materia,
                                                               c_carga.programa_banner,
                                                               c_carga.periodo,
                                                               c_carga.parte_periodo,
                                                               c_carga.grupo,
                                                               c_carga.calIFic,
                                                               c_carga.prof,
                                                               c_carga.usuario,
                                                               c_carga.fecha_INSERTa,
                                                               c_carga.fecha_inicio,
                                                               c_carga.regla,
                                                               null
                                                               );
                                EXCEPTION
                                    WHEN OTHERS THEN
                                       raise_application_error (-20002,'Error al actualizar   tabla de paso con valor SZCARGA  '|| SQLCODE||' Error: '||SQLERRM);
                                END;

                            END LOOP;

        BEGIN
            DELETE saturn.sztprof
            WHERE 1 = 1
            AND sztprof_no_regla = p_regla;
        EXCEPTION
            WHEN OTHERS THEN  NULL;
        END;

        SELECT pkg_algoritmo.F_PERIDOD_ANTERIOR(p_regla) anterior
        INTO l_periodo_anterior
        FROM dual;

        SELECT TRIM(PKG_ALGORITMO.F_PERIDOD_ANTERIOR_COMA(p_regla))
        INTO l_periodo_WHERE
        FROM DUAL;

        COMMIT;

        for c in (SELECT DISTINCT szcarga_materia materia,
                    szcarga_term_code periodo
                    FROM szcarga
                    WHERE 1 = 1
                    AND szcarga_no_regla=p_regla
                    )
                    loop

                        INSERT INTO SZTPRPS  VALUES(c.materia,p_regla);


                    END LOOP;

          IF l_periodo_anterior is null then

            l_periodo_anterior:='012141';

          end IF;


         l_sql:='INSERT INTO SZTPROF
                SELECT  DISTINCT sirasgn_pidm,
                        SPRIDEN_ID,
                        spriden_last_name||spriden_first_name nombre,
                        materia_legal,
                        ROUND(((apro*100)/tot_alumnos),2) porcapro,
                        CASE WHEN CASE WHEN substr('||l_periodo_anterior||',5,2)=41 THEN TO_NUMBER(TO_NUMBER(SUBSTR('||l_periodo_anterior||',3,2))-1||43)
                        ELSE SUBSTR('||l_periodo_anterior||',3,4) - 1 END = SUBSTR('||l_periodo_anterior||',3,4) THEN 2 ELSE 1 END PonCiclo,
                        0,
                        USER,
                        NULL,
                        4,
                        '||p_regla||',
                        50,
                        '||CHR(39)||'A'||CHR(39)||',
                        SYSDATE,
                         ROUND(((total_retencion)*100/tot_alumnos),2) porcentaje_retencion
                            FROM(
                                SELECT
                                        COUNT(sfrstcr_pidm) tot_alumnos,
                                        COUNT(apro_ccal)  Apro,
                                        COUNT(repro_ccal)+ COUNT(repro_scal)+COUNT(repro_ccalp)+COUNT(repro_baja) repro,
                                        COUNT(total_retencion) total_retencion,
                                        COUNT(total_abANDono) toatal_desercion,
                                        sirasgn_pidm,
                                        materia_legal,
                                        materia
                                FROM(
                                        SELECT DISTINCT ssbsect_subj_code || ssbsect_crse_numb  materia,
                                                                    sfrstcr_pidm,
                                                                    sfrstcr_grde_code,
                                                                    sfrstcr_term_code,
                                                                    sfrstcr_rsts_code,
                                                                    sirasgn_pidm,
                                                                    sztmaco_matpadre materia_legal,
                                                                    CASE WHEN  sfrstcr_rsts_code = '||CHR(39)||'RE'||CHR(39)||'  THEN 1
                                                                    ELSE null
                                                                    END total_retencion,
                                                                    CASE WHEN  sfrstcr_rsts_code <> '||CHR(39)||'RE'||CHR(39)||'  THEN 1
                                                                    ELSE null
                                                                    END total_abANDono,
                                                                    CASE WHEN shrgrde_passed_ind ='||CHR(39)||'Y'||CHR(39)||' THEN
                                                                        CASE WHEN sfrstcr_rsts_code ='||CHR(39)||'RE'||CHR(39)||'  THEN
                                                                            CASE WHEN sfrstcr_term_code not like '||CHR(39)||'%'||CHR(39)||'||'||l_periodo_anterior||'||'||CHR(39)||'%'||CHR(39)||' THEN 1
                                                                            END
                                                                        END
                                                                    END Apro_ccal,
                                                                    CASE WHEN shrgrde_passed_ind ='||CHR(39)||'Y'||CHR(39)||' THEN
                                                                        CASE WHEN sfrstcr_rsts_code ='||CHR(39)||'RE'||CHR(39)||'  THEN
                                                                            CASE WHEN sfrstcr_term_code  like '||CHR(39)||'%'||CHR(39)||'||'||l_periodo_anterior||'||'||CHR(39)||'%'||CHR(39)||' THEN 1
                                                                            END
                                                                        END
                                                                    END Apro_ccalp,
                                                                    CASE WHEN sfrstcr_rsts_code ='||CHR(39)||'RE'||CHR(39)||'  THEN
                                                                        CASE WHEN sfrstcr_term_code like '|| CHR(39)||'%'||CHR(39)||'||'||l_periodo_anterior||'||'||CHR(39)||'%'||CHR(39)||' THEN
                                                                            CASE WHEN sfrstcr_grde_code IS NULL THEN 1
                                                                            END
                                                                        END
                                                                    END Apro_scal,
                                                                    CASE WHEN shrgrde_passed_ind ='||CHR(39)||'N'||CHR(39)||' THEN
                                                                         CASE WHEN sfrstcr_rsts_code ='||CHR(39)||'RE'||CHR(39)||'  THEN
                                                                            CASE WHEN sfrstcr_term_code not like '||CHR(39)||'%'||CHR(39)||'||'||l_periodo_anterior||'||'||CHR(39)||'%'||CHR(39)||' THEN 1
                                                                            END
                                                                         END
                                                                    END Repro_ccal,
                                                                    CASE WHEN shrgrde_passed_ind ='||CHR(39)||'N'||CHR(39)||' THEN
                                                                         CASE WHEN sfrstcr_rsts_code ='||CHR(39)||'RE'||CHR(39)||'  THEN
                                                                            CASE WHEN sfrstcr_term_code  like '||CHR(39)||'%'||CHR(39)||'||'||l_periodo_anterior||'||'||CHR(39)||'%'||CHR(39)||' THEN 1
                                                                            END
                                                                         END
                                                                    END Repro_ccalp,
                                                                    CASE WHEN sfrstcr_rsts_code ='||CHR(39)||'RE'||CHR(39)||'  THEN
                                                                        CASE WHEN sfrstcr_term_code not like '||CHR(39)||'%'||CHR(39)||'||'||l_periodo_anterior||'||'||CHR(39)||'%'||CHR(39)||' THEN
                                                                            CASE WHEN sfrstcr_grde_code IS NULL THEN 1
                                                                            END
                                                                        END
                                                                    END Repro_scal,
                                                                     CASE WHEN  sfrstcr_rsts_code IN('||CHR(39)||'DD'||CHR(39)||','||CHR(39)||'BD'||CHR(39)||') THEN  1
                                                                    ELSE NULL
                                                                    END repro_baja
                                                    FROM ssbsect,
                                                         sfrstcr,
                                                         sirasgn,
                                                         shrgrde,
                                                         sztmaco
                                                   WHERE 1 = 1
                                                    AND ssbsect_subj_code ||ssbsect_crse_numb IN  (SELECT DISTINCT MATERIA FROM SZTPRPS WHERE 1 = 1 AND regla ='||p_regla||')
                                                   AND sfrstcr_term_code = ssbsect_term_code
--                                                   AND SSBSECT_TERM_CODE IN(SELECT DISTINCT erm.SOBTERM_term_code periodo
--                                                                                FROM  SOBTERM erm,
--                                                                                      SOBPTRM trm
--                                                                                WHERE 1 = 1
--                                                                                AND erm.SOBTERM_term_code = trm.SOBPTRM_term_code
--                                                                                AND trm.SOBPTRM_END_DATE > SYSDATE
--                                                                                AND TO_CHAR(trm.SOBPTRM_START_DATE,'||CHR(39)||'YYYY'||CHR(39)||')=TO_CHAR(SYSDATE,'||CHR(39)||'YYYY'||CHR(39)||')
--                                                                                AND TO_CHAR(trm.SOBPTRM_END_DATE,'||CHR(39)||'YYYY'||CHR(39)||')=TO_CHAR(SYSDATE,'||CHR(39)||'YYYY'||CHR(39)||'))
                                                   AND sfrstcr_crn = ssbsect_crn
                                                   AND ssbsect_crn = sirasgn_crn (+)
                                                   AND ssbsect_term_code = sirasgn_term_code
                                                   AND sfrstcr_levl_code = shrgrde_levl_code(+)
                                                   AND sfrstcr_grde_code = shrgrde_code (+)
                                                   AND ssbsect_subj_code ||ssbsect_crse_numb  = sztmaco_mathijo
                                                   )
                                GROUP BY sirasgn_pidm,
                                         materia_legal,
                                         materia) x
                            , SZCARGA a,
                            spriden
                            WHERE 1 = 1
                            AND  materia_legal  = a.szcarga_materia
                            AND  spriden_pidm = sirasgn_pidm
                            AND  SPRIDEN_CHANGE_IND IS NULL
                            AND  a.szcarga_id = (SELECT MAX (a1.szcarga_id)
                                                FROM szcarga a1
                                                WHERE 1 = 1
                                                AND  a.szcarga_materia = a1.szcarga_materia
                                                AND a.szcarga_no_regla= a1.szcarga_no_regla)
                            AND  a.szcarga_no_regla= '||p_regla||'
                            GROUP BY tot_alumnos,
                                    apro,
                                    repro,
                                    total_retencion,
                                    toatal_desercion,
                                    sirasgn_pidm,
                                    materia_legal,
                                    materia,
                                    SPRIDEN_ID,
                                    spriden_last_name,
                                    spriden_first_name';

           DBMS_OUTPUT.PUT_LINE(l_sql);


           EXECUTE IMMEDIATE l_sql;


      COMMIT;

    END p_materias_profesor;

    /*PROCEDURE p_materias_profesor (p_regla NUMBER) IS

    CURSOR c1 IS
    SELECT DISTINCT szcarga_materia,
                    szcarga_term_code
    FROM szcarga
    WHERE 1 = 1
    AND szcarga_no_regla=p_regla
    ORDER BY 1;

    CURSOR c2 (p_mat_legal VARCHAR2,p_periodo_anterior varchar2) IS--, P_PERIODO_CARGA VARCHAR2) i
    SELECT  tot_alumnos,
            apro,
            repro ,
            total_retencion,
            toatal_desercion,
            sirasgn_pidm,
            materia_legal,
            materia,
            ROUND(((apro*10)/tot_alumnos),2) porcapro,
            ROUND(((total_retencion)*100/tot_alumnos),2) porcentaje_retencion,
            ROUND((apro)*10/(tot_alumnos),2)  CalProf,
            CASE WHEN CASE WHEN substr(p_periodo_anterior,5,2)=41 THEN TO_NUMBER(TO_NUMBER(SUBSTR(p_periodo_anterior,3,2))-1||43)
            ELSE SUBSTR(p_periodo_anterior,3,4) - 1 END = SUBSTR(p_periodo_anterior,3,4) THEN 2 ELSE 1 END PonCiclo
    FROM(
        SELECT
                COUNT(sfrstcr_pidm) tot_alumnos,
                COUNT(apro_ccal) Apro,
                COUNT(repro_ccal)+ COUNT(repro_scal)+COUNT(repro_ccalp)+COUNT(repro_baja) repro,
                COUNT(total_retencion) total_retencion,
                COUNT(total_abANDono) toatal_desercion,
                sirasgn_pidm,
                materia_legal,
                materia
        FROM(
                SELECT DISTINCT ssbsect_subj_code || ssbsect_crse_numb  materia,
                                            sfrstcr_pidm,
                                            sfrstcr_grde_code,
                                            sfrstcr_term_code,
                                            sfrstcr_rsts_code,
                                            sirasgn_pidm,
                                            sztmaco_matpadre materia_legal,
                                            CASE WHEN  sfrstcr_rsts_code = 'RE'  THEN 1
                                            ELSE null
                                            END total_retencion,
                                            CASE WHEN  sfrstcr_rsts_code <> 'RE' THEN 1
                                            ELSE null
                                            END total_abANDono,
                                            CASE WHEN shrgrde_passed_ind ='Y' THEN
                                                CASE WHEN sfrstcr_rsts_code ='RE' THEN
                                                    CASE WHEN sfrstcr_term_code not like '%'||p_periodo_anterior||'%' THEN 1
                                                    END
                                                END
                                            END Apro_ccal,
                                            CASE WHEN shrgrde_passed_ind ='Y' THEN
                                                CASE WHEN sfrstcr_rsts_code ='RE' THEN
                                                    CASE WHEN sfrstcr_term_code  like '%'||p_periodo_anterior||'%' THEN 1
                                                    END
                                                END
                                            END Apro_ccalp,
                                            CASE WHEN sfrstcr_rsts_code ='RE' THEN
                                                CASE WHEN sfrstcr_term_code like '%'||p_periodo_anterior||'%' THEN
                                                    CASE WHEN sfrstcr_grde_code IS NULL THEN 1
                                                    END
                                                END
                                            END Apro_scal,
                                            CASE WHEN shrgrde_passed_ind ='N' THEN
                                                 CASE WHEN sfrstcr_rsts_code ='RE' THEN
                                                    CASE WHEN sfrstcr_term_code not like '%'||p_periodo_anterior||'%' THEN 1
                                                    END
                                                 END
                                            END Repro_ccal,
                                            CASE WHEN shrgrde_passed_ind ='N' THEN
                                                 CASE WHEN sfrstcr_rsts_code ='RE' THEN
                                                    CASE WHEN sfrstcr_term_code  like '%'||p_periodo_anterior||'%' THEN 1
                                                    END
                                                 END
                                            END Repro_ccalp,
                                            CASE WHEN sfrstcr_rsts_code ='RE' THEN
                                                CASE WHEN sfrstcr_term_code not like '%'||p_periodo_anterior||'%' THEN
                                                    CASE WHEN sfrstcr_grde_code IS NULL THEN 1
                                                    END
                                                END
                                            END Repro_scal,
                                             CASE WHEN  sfrstcr_rsts_code IN('DD','BD') THEN  1
                                            ELSE NULL
                                            END repro_baja
                            FROM ssbsect,
                                 sfrstcr,
                                 sirasgn,
                                 shrgrde,
                                 sztmaco
                           WHERE 1 = 1
                            AND ssbsect_subj_code ||ssbsect_crse_numb =p_mat_legal
--                               AND SIRASGN_PIDM=29447
                           AND sfrstcr_term_code = ssbsect_term_code
                           AND sfrstcr_term_code IN (SELECT DISTINCT erm.SOBTERM_term_code periodo
                                                        FROM  SOBTERM erm,
                                                              SOBPTRM trm
                                                        WHERE 1 = 1
                                                        AND erm.SOBTERM_term_code = trm.SOBPTRM_term_code
                                                        AND trm.SOBPTRM_END_DATE > SYSDATE
                                                        AND TO_CHAR(trm.SOBPTRM_START_DATE,'YYYY')=TO_CHAR(SYSDATE,'YYYY')
                                                        AND TO_CHAR(trm.SOBPTRM_END_DATE,'YYYY')=TO_CHAR(SYSDATE,'YYYY')
                                                        )
                           AND sfrstcr_crn = ssbsect_crn
                           AND ssbsect_crn = sirasgn_crn (+)
                           AND ssbsect_term_code = sirasgn_term_code
                           AND sfrstcr_levl_code = shrgrde_levl_code(+)
                           AND sfrstcr_grde_code = shrgrde_code (+)
                           AND ssbsect_subj_code ||ssbsect_crse_numb  = sztmaco_mathijo
                           )
        GROUP BY sirasgn_pidm,
                 materia_legal,
                 materia) x
    , SZCARGA a
    WHERE 1 = 1
    AND  materia_legal  = a.szcarga_materia
    AND  a.szcarga_id = (SELECT MAX (a1.szcarga_id)
                        FROM szcarga a1
                        WHERE 1 = 1
                        AND  a.szcarga_materia = a1.szcarga_materia
                        AND a.szcarga_no_regla= a1.szcarga_no_regla)
    AND  a.szcarga_no_regla= p_regla
    GROUP BY tot_alumnos,
            apro,
            repro,
            total_retencion,
            toatal_desercion,
            sirasgn_pidm,
            materia_legal,
            materia;

    vc_cont          NUMBER:=0;
    vc_id_prof       VARCHAR2(15);
    vc_nom_prof      VARCHAR2(120);
    vc_existe        NUMBER;
    vc_pond_max      NUMBER;
    No_materias      NUMBER:=0;
    No_materias2     NUMBER:=-1;
    l_contar         NUMBER;
    l_periodo_actual VARCHAR2(1000);
    l_periodo_anterior VARCHAR2(1000);

    BEGIN

        BEGIN
            DELETE FROM SZCARGA
            WHERE SZCARGA_no_regla=p_regla;
        exception when others then
            null;
        end;


            FOR C_CARGA IN(
                            SELECT distinct SZTPRONO_ID Matricula
                                      ,SZTPRONO_MATERIA_LEGAL Materia
                                     ,SZTPRONO_PROGRAM Programa_Banner
                                     ,SZTPRONO_TERM_CODE Periodo
                                     ,SZTPRONO_PTRM_CODE Parte_Periodo
                                     ,'01' grupo
                                     ,null calIFic
                                     ,null Prof
                                     ,user USUARIO
                                     ,sysdate FECHA_INSERTA
                                     ,to_char (SZTPRONO_FECHA_INICIO, 'dd/mm/yyyy') Fecha_Inicio,
                                     p_regla REGLA
                            FROM sztprono a,
                                    REL_PROGRAMAXALUMNO b,
                                    SZTDTEC c,
                                    REL_ALUMNOS_X_ASIGNAR d,
                                    sztalgo e
                            WHERE a.SZTPRONO_PTRM_CODE = (SELECT max (a1.SZTPRONO_PTRM_CODE)
                                                          FROM SZTPRONO a1
                                                          WHERE 1 = 1
                                                          AND a1.SZTPRONO_ID = a.SZTPRONO_ID
                                                          AND a1.SZTPRONO_TERM_CODE = a.SZTPRONO_TERM_CODE
                                                          AND a1.SZTPRONO_NO_REGLA=p_regla)
                            AND a.SZTPRONO_ID = b.ID_ALUMNO
                            AND a.SZTPRONO_PROGRAM = b.PROGRAMA
                            AND b.PROGRAMA = c.SZTDTEC_PROGRAM
                            AND b.PERIODO_CATALOGO   = c.SZTDTEC_TERM_CODE
                            AND a.SZTPRONO_ID = d.ID_ALUMNO
                            AND a.SZTPRONO_PROGRAM = d.ID_PROGRAMA
                            AND a.SZTPRONO_MATERIA_BANNER = d.CLAVE_MATERIA
                            AND b.campus = e.SZTALGO_CAMP_CODE
                            AND b.FECHA_INICIO >= e.SZTALGO_FECHA_ANT
                            AND a.SZTPRONO_NO_REGLA=p_regla
                            )
                            LOOP


                                BEGIN
                                    INSERT INTO SZCARGA VALUES(
                                                               c_carga.matricula,
                                                               c_carga.materia,
                                                               c_carga.programa_banner,
                                                               c_carga.periodo,
                                                               c_carga.parte_periodo,
                                                               c_carga.grupo,
                                                               c_carga.calIFic,
                                                               c_carga.prof,
                                                               c_carga.usuario,
                                                               c_carga.fecha_INSERTa,
                                                               c_carga.fecha_inicio,
                                                               c_carga.regla
                                                               );
                                exception
                                    when others then
                                       raise_application_error (-20002,'Error al actualizar   tabla de paso con valor SPBPERS  '|| SQLCODE||' Error: '||SQLERRM);
                                end;

                            END LOOP;

        commit;

        BEGIN
            DELETE saturn.sztprof
            WHERE 1 = 1
            AND sztprof_no_regla = p_regla;
        EXCEPTION
            WHEN OTHERS THEN  NULL;
        END;


        SELECT pkg_algoritmo.F_PERIDOD_ANTERIOR(p_regla) anterior
        INTO l_periodo_anterior
        FROM dual;

      --  RAISE_APPLICATION_ERROR (-20002,'cadena peridos anteriores '||l_periodo_anterior);

        FOR x IN c1 LOOP

           FOR y IN c2(x.szcarga_materia,l_periodo_anterior) LOOP

               vc_id_prof:=null;
               vc_nom_prof:=null;
               No_materias :=0;
               no_materias2:=-1;

               BEGIN

                   SELECT spriden_id id,
                          spriden_last_name||' '||spriden_first_name nombre
                   INTO vc_id_prof,
                        vc_nom_prof
                   FROM spriden,
                        sibinst
                   WHERE 1 = 1
                   AND sibinst_pidm=spriden_pidm
                   AND SUBSTR(spriden_id,1,2)='01'
                   --AND sibinst_fcst_code='AC'
                   AND spriden_change_ind is null
                   AND spriden_pidm = y.sirasgn_pidm;

               EXCEPTION
                 WHEN OTHERS THEN  NULL;
               END;


               SELECT COUNT(*)
               INTO vc_existe
               FROM sztprof
               WHERE 1 = 1
               AND sztprof_pidm = y.sirasgn_pidm
               AND sztprof_materia = y.materia_legal
               AND sztprof_no_regla = p_regla;

               IF vc_existe=0 AND vc_id_prof IS NOT NULL THEN

                   -- RAISE_APPLICATION_ERROR (-20002,'CAL '||y.calprof|| SQLERRM||' '||SQLCODE);
                    BEGIN

                      --   RAISE_APPLICATION_ERROR (-20002,'CAL '||y.calprof|| SQLERRM||' '||SQLCODE);

                        INSERT INTO sztprof VALUES(y.sirasgn_pidm,
                                                   vc_id_prof,
                                                   vc_nom_prof,
                                                   y.materia_legal,
                                                   y.calprof,
                                                   y.ponciclo,
                                                   0,
                                                   USER,
                                                   NULL,
                                                   4,
                                                   p_regla,
                                                  50,
                                                  'A',
                                                  SYSDATE,
                                                  y.porcentaje_retencion
                                               );


                    EXCEPTION
                       WHEN OTHERS THEN
                           vc_id_prof := NULL;
                          -- RAISE_APPLICATION_ERROR (-20002,'Error al INSERTar a tabla de paso 0000 '|| SQLERRM||' '||SQLCODE);
                    END;

                    BEGIN

                        UPDATE szcarga set szcarga_id_prof = vc_id_prof
                        WHERE 1 = 1
                        AND szcarga_materia = y.materia_legal
                        AND szcarga_no_regla=p_regla;

                    EXCEPTION
                       WHEN OTHERS THEN
                           vc_id_prof := NULL;
                       --    RAISE_APPLICATION_ERROR (-20002,'Error al INSERTar a tabla de paso 1111 '|| SQLERRM||' '||SQLCODE);
                    END;

               END IF;

           END LOOP;

           IF VC_id_PROF IS NULL THEN

               BEGIN

                   SELECT sztprof_id,
                          MAX(sztprof_ponde_apro+sztprof_ponde_ciclos)
                   INTO vc_id_prof ,
                        vc_pond_max
                   FROM sztprof
                   WHERE 1=1
                   AND sztprof_materia= x.szcarga_materia
                   AND sztprof_id IS NOT NULL
                   AND sztprof_no_regla = p_regla
                   GROUP BY sztprof_id;

               EXCEPTION
                  WHEN OTHERS THEN
                  --   raise_application_error (-20002,'Error al INSERTar a tabla de paso 1111 '||  X.SZCARGA_TERM_CODE);
                     vc_id_prof := NULL;
               END;

               IF vc_id_prof IS NOT NULL THEN

                  BEGIN

                    UPDATE szcarga SET szcarga_id_prof = vc_id_prof
                    WHERE  1 = 1
                    AND szcarga_materia = x.szcarga_materia
                    AND szcarga_no_regla=p_regla;

                  EXCEPTION
                      WHEN OTHERS THEN
                      raise_application_error (-20002,'Error al INSERTar a tabla de paso 2222 '|| SQLERRM||' '||SQLCODE);
                  END;

                   COMMIT;

               END IF;

           END IF;

        END LOOP;

      COMMIT;

    END p_materias_profesor;

--
-- */

  PROCEDURE p_previo_lic (p_regla NUMBER,
                          p_fecha_inicio varchar2)
  IS
    l_cuenta_nivel          NUMBER;
    l_cuenta_grupo          NUMBER;
    l_monto_pago            NUMBER;
    l_recorre               NUMBER;
    l_suma_alumno           NUMBER;
    l_recoree               NUMBER;
    l_resta                 NUMBER;
    l_contar                NUMBER;
    l_contar2               NUMBER;
    l_contar3               NUMBER;
    l_contar4               NUMBER;
    l_resta_grupo           NUMBER;
    l_faltante              NUMBER;
    l_max_grupos            NUMBER;
    l_mejor_pidm            NUMBER;
    l_mejor_id              NUMBER;
    l_contar_prof           NUMBER;
    l_dIFerencia_alumno     NUMBER;
    l_iteraciones           NUMBER;
    l_resta_grupo2          NUMBER;
    l_faltante2             NUMBER;
    l_mod                   NUMBER;
    l_divide                NUMBER;
    l_final_alumnos         NUMBER;
    l_numero_grupos         NUMBER;
    l_maximo_alumno         NUMBER;
    vl_resta                NUMBER;
    l_monto_tope            NUMBER;
    l_campus                VARCHAR2(3);
    l_nivel                 VARCHAR2(3);
    l_costo_final           NUMBER;

BEGIN

    DELETE sztconf
    WHERE 1 = 1
    AND sztconf_no_regla = p_regla
    AND SZTCONF_FECHA_INICIO =p_fecha_inicio;
    COMMIT;

    SELECT COUNT (1)
    INTO l_cuenta_nivel
    FROM SZTALGO
    WHERE SZTALGO_NO_REGLA = p_regla
    AND  SZTALGO_LEVL_CODE = 'LI';


    IF l_cuenta_nivel >= 1 then


        for c_lic in( SELECT sum (x.no_alumnos) no_alumnos ,
                               x.clave_materia ,
                               x.periodicidad
                          FROM (
                             SELECT   COUNT(ra.sztprono_id) no_alumnos,
                                     ra.sztprono_materia_legal clave_materia,
                                     'B' periodicidad
                                FROM sztprono ra,
                                     rel_programaxalumno rp,
                                     sztdtec  sd
                                WHERE 1 = 1
                                AND sztprono_no_regla = p_regla
                                AND ra.sztprono_pidm = rp.sgbstdn_pidm
                                AND ra.sztprono_program = rp.programa
                                AND rp.programa = sd.sztdtec_program
                                AND rp.periodo_catalogo= sd.sztdtec_term_code
                                AND rp.rel_programaxalumno_no_regla  = ra.sztprono_no_regla
--                                AND ra.SZTPRONO_MATERIA_LEGAL in('L1MK101')
                                AND ra.SZTPRONO_FECHA_INICIO =p_fecha_inicio
                                GROUP BY ra.sztprono_materia_legal,
--                                         rp.campus,rp.nivel,
                                         sd.sztdtec_periodicidad
                               ) x,
                                sztmaco
                                WHERE 1 = 1
                               AND sztmaco_matpadre  =  x.clave_materia
                               AND sztmaco_mathijo   =  x.clave_materia
                                group  by x.clave_materia ,
                                          x.periodicidad,
                                          sztmaco_camp_code,
                                          sztmaco_levl_code)
            loop



                l_cuenta_grupo:=0;
                l_suma_alumno:=0;
                l_contar:=0;
                l_contar2:=0;
                l_contar3:=0;
                l_resta_grupo2:=0;
                l_faltante2:=0;

                BEGIN
                    SELECT DISTINCT SZTALGO_CAMP_CODE
                    INTO l_campus
                    FROM SZTALGO
                    WHERE 1 = 1
                    AND SZTALGO_NO_REGLA  = p_regla
                    AND ROWNUM = 1;

                    IF l_campus ='UTS' THEN

                        l_campus:='UTL';

                    END IF;

               EXCEPTION WHEN OTHERS THEN
                l_campus:='UTL';
               END;

                 FOR c_prof IN (SELECT     DISTINCT sztprof_pidm prof_pidm,
                                              sztprof_id id_prof,
                                              sztprof_id matricula,
                                              sztprof_no_grupos max_grupo,
                                              sztprof_cupo tope,
                                              sztprof_materia materia,
                                              sztprof_ponde_apro,
                                              sztprof_porcentaje_retencion,
                                              sztprof_ponde_ciclos
                                              ,sztprof_idioma idioma
                                        FROM sztprof
                                        WHERE 1 = 1
                                        AND sztprof_no_regla = p_regla
                                        AND sztprof_materia = c_lic.clave_materia
                                        ORDER BY sztprof_materia,
                                                 sztprof_ponde_apro DESC,
                                                 sztprof_porcentaje_retencion DESC,
                                                 sztprof_ponde_ciclos,
                                                 sztprof_pidm)
                   loop



                        IF c_lic.no_alumnos > c_prof.tope then

                           l_cuenta_grupo:=l_cuenta_grupo+1;


                           FOR i in 1..c_prof.max_grupo LOOP

                                l_suma_alumno:=l_suma_alumno+ c_prof.tope;

                                IF c_lic.no_alumnos > l_suma_alumno then

                                   BEGIN

                                       SELECT sztcost_cost
                                       INTO l_monto_pago
                                       FROM sztcost
                                       WHERE 1 = 1
                                       AND sztcost_num_groups = i
                                       AND sztcost_levl_code  ='LI'
                                       AND sztcost_camp_code =l_campus
                                       AND sztcost_min_cupo <= c_prof.tope
                                       AND sztcost_max_cupo >= c_prof.tope
                                       AND SZTCOST_RMT_CODE=c_lic.periodicidad
                                       AND sztcost_active='S';

                                   EXCEPTION WHEN OTHERS THEN
                                       NULL;
                                   END;

                                   INSERT INTO  SZTCONF VALUES(
                                                                             c_lic.clave_materia,
                                                                             i,
                                                                             c_prof.tope,
                                                                             c_prof.prof_pidm,
                                                                             l_monto_pago,
                                                                             'UTEL 1',
                                                                             SYSDATE,
                                                                             USER,
                                                                             SYSDATE,
                                                                             p_regla,
                                                                             c_lic.periodicidad,
                                                                             'N',
                                                                             c_prof.id_prof,
                                                                             p_fecha_inicio,
                                                                             0,
                                                                             null,
                                                                             null, c_prof.idioma
                                                                            );



                                  l_resta:=c_lic.no_alumnos-l_suma_alumno;

                                  EXIT WHEN l_suma_alumno>= c_lic.no_alumnos;

                                end IF;

                           END LOOP;

                        ELSIF c_lic.no_alumnos < c_prof.tope then

                            l_contar:=l_contar+1;

                                    BEGIN

                                       SELECT sztcost_cost
                                       INTO l_monto_pago
                                       FROM sztcost
                                       WHERE 1 = 1
                                       AND sztcost_num_groups = 1
                                       AND sztcost_levl_code  ='LI'
                                       AND sztcost_camp_code =l_campus
                                       AND sztcost_min_cupo <= c_lic.no_alumnos
                                       AND sztcost_max_cupo >= c_lic.no_alumnos
                                       AND SZTCOST_RMT_CODE=c_lic.periodicidad
                                       AND sztcost_active='S';

                                    EXCEPTION WHEN OTHERS THEN
                                        NULL;
                                    END;


                                     INSERT INTO  SZTCONF VALUES(
                                                                  c_lic.clave_materia,
                                                                  1,
                                                                  c_lic.no_alumnos,
                                                                  c_prof.prof_pidm,
                                                                  l_monto_pago,
                                                                  'UTEL 2',
                                                                  SYSDATE,
                                                                  USER,
                                                                  SYSDATE,
                                                                  p_regla,
                                                                  c_lic.periodicidad,
                                                                  'N',
                                                                  c_prof.id_prof,
                                                                  p_fecha_inicio,
                                                                  0,
                                                                  null,
                                                                  null, null
                                                                 );
                          EXIT WHEN l_contar = 1;

                        end IF;

                   END LOOP;

                  commit;

                   FOR c_prof IN (SELECT DISTINCT sztprof_pidm prof_pidm,
                                                  sztprof_id id_prof,
                                                  sztprof_id matricula,
                                                  sztprof_no_grupos max_grupo,
                                                  sztprof_cupo tope,
                                                  sztprof_materia materia,
                                                  sztprof_ponde_apro,
                                                  sztprof_porcentaje_retencion,
                                                  sztprof_ponde_ciclos
                                                  ,sztprof_idioma idioma
                                        FROM sztprof
                                        WHERE 1 = 1
                                        AND sztprof_no_regla = p_regla
                                        AND sztprof_materia = c_lic.clave_materia
                                        ORDER BY sztprof_materia,
                                                 sztprof_ponde_apro DESC,
                                                 sztprof_porcentaje_retencion DESC,
                                                 sztprof_ponde_ciclos,
                                                 sztprof_pidm)
                   loop

                    --   l_contar2:=l_contar2+1;

                       BEGIN

                          SELECT SUM(sztconf_student_numb)
                          INTO l_resta_grupo
                          FROM sztconf
                          WHERE 1 = 1
                          AND sztconf_no_regla =p_regla
                          AND sztconf_subj_code = c_lic.clave_materia;

                       EXCEPTION WHEN OTHERS THEN
                            NULL;
                       END;

                       l_faltante:=c_lic.no_alumnos - l_resta_grupo;

                       IF l_faltante> 0 THEN

                          --  DBMS_OUTPUT.PUT_LINE('Entra 13 maAXIMO '||l_max_grupos||' Profesor '||c_prof.prof_pidm||' tope '||c_prof.tope||' sobrante '||l_faltante);

                            BEGIN

                               SELECT max(SZTCONF_GROUP)+1
                               INTO l_max_grupos
                               FROM sztconf
                               WHERE 1 = 1
                               AND sztconf_no_regla = p_regla
                               AND SZTCONF_SUBJ_CODE=c_lic.clave_materia
                               AND SZTCONF_PIDM= c_prof.prof_pidm;

                            EXCEPTION WHEN OTHERS THEN
                              DBMS_OUTPUT.PUT_LINE('Entra 13 maAXIMO '||sqlerrm);
                            END;

                            IF l_max_grupos is null then

                                l_max_grupos:=0;

                            end IF;

                            IF l_max_grupos < c_prof.max_grupo then

                                l_contar2:=l_contar2+1;


                                BEGIN

                                   SELECT max(SZTCONF_GROUP)+1
                                   INTO l_max_grupos
                                   FROM sztconf
                                   WHERE 1 = 1
                                   AND sztconf_no_regla = p_regla
                                   AND SZTCONF_SUBJ_CODE=c_lic.clave_materia
                                   AND SZTCONF_PIDM= c_prof.prof_pidm;

                                EXCEPTION WHEN OTHERS THEN
                                  DBMS_OUTPUT.PUT_LINE('Entra 13 maAXIMO '||sqlerrm);
                                END;

                                --DBMS_OUTPUT.PUT_LINE('Entra 13 maAXIMO '||l_max_grupos||' pimd '||c_prof.id_prof);

                                IF l_max_grupos IS NULL THEN
                                    l_max_grupos:=1;
                                END IF;

                                IF  l_faltante< c_prof.tope then

                                   BEGIN

                                       SELECT sztcost_cost
                                       INTO l_monto_pago
                                       FROM sztcost
                                       WHERE 1 = 1
                                       AND sztcost_num_groups = l_max_grupos
                                       AND sztcost_levl_code  ='LI'
                                       AND sztcost_camp_code  =l_campus
                                       AND sztcost_min_cupo <= l_faltante
                                       AND sztcost_max_cupo >= l_faltante
                                       AND SZTCOST_RMT_CODE=c_lic.periodicidad
                                       AND sztcost_active='S';

                                   EXCEPTION WHEN OTHERS THEN
                                       NULL;
                                   END;

                                   INSERT INTO  SZTCONF VALUES(
                                                                c_lic.clave_materia,
                                                                l_max_grupos,
                                                                l_faltante,
                                                                c_prof.prof_pidm,
                                                                l_monto_pago,
                                                                'UTEL 3',
                                                                SYSDATE,
                                                                USER,
                                                                SYSDATE,
                                                                p_regla,
                                                                c_lic.periodicidad,
                                                                'N',
                                                                c_prof.id_prof,
                                                                p_fecha_inicio,
                                                                0,
                                                                null,
                                                                null, c_prof.idioma
                                                               );


                                end IF;

                                EXIT WHEN l_contar2=1;

                            end IF;


                       END IF;


                   END LOOP;


                   for c_smat in(SELECT sum (x.no_alumnos)  no_alumnos ,
                                     x.clave_materia clave_materia,
                                     x.periodicidad  periodicidad,
                                     x.regla         REGLA
                            FROM (
                                   SELECT   COUNT(ra.sztprono_id) no_alumnos,
                                           ra.sztprono_materia_legal clave_materia,
                                           'B' periodicidad,
                                           sztprono_no_regla regla
                                   FROM sztprono ra,
                                           rel_programaxalumno rp,
                                           sztdtec  sd
                                   WHERE 1 = 1
                                   AND sztprono_no_regla = p_regla
                                   AND ra.sztprono_pidm = rp.sgbstdn_pidm
                                   AND ra.sztprono_program = rp.programa
                                   AND rp.programa = sd.sztdtec_program
                                   AND rp.periodo_catalogo= sd.sztdtec_term_code
                                   AND ra.SZTPRONO_FECHA_INICIO =p_fecha_inicio
                                   AND rp.rel_programaxalumno_no_regla  = ra.sztprono_no_regla
                                   AND ra.SZTPRONO_MATERIA_LEGAL in(SELECT clave_materia
                                                                    FROM
                                                                    (
                                                                    SELECT  sum (x.no_alumnos) no_alumnos ,
                                                                    x.clave_materia,
                                                                    x.regla
                                                                    FROM (
                                                                          SELECT   COUNT(ra.sztprono_id) no_alumnos,
                                                                                 ra.sztprono_materia_legal clave_materia,
                                                                                 'B' periodicidad,
                                                                                 sztprono_no_regla regla
                                                                            FROM sztprono ra,
                                                                                 rel_programaxalumno rp,
                                                                                 sztdtec  sd
                                                                            WHERE 1 = 1
                                                                            AND sztprono_no_regla = p_regla
                                                                            AND ra.sztprono_pidm = rp.sgbstdn_pidm
                                                                            AND ra.sztprono_program = rp.programa
                                                                            AND rp.programa = sd.sztdtec_program
                                                                            AND ra.SZTPRONO_FECHA_INICIO =p_fecha_inicio
                                                                            AND rp.periodo_catalogo= sd.sztdtec_term_code
                                                                            AND rp.rel_programaxalumno_no_regla  = ra.sztprono_no_regla
                                                                        --    AND ra.SZTPRONO_MATERIA_LEGAL in('O1CA302')
                                                                            AND ra.SZTPRONO_MATERIA_LEGAL  in(SELECT
                                                                                                                      sztprof_materia materia
                                                                                                                FROM sztprof
                                                                                                                WHERE 1 = 1
                                                                                                                AND sztprof_no_regla = p_regla
                                                                                                                AND sztprof_materia =ra.SZTPRONO_MATERIA_LEGAL
                                                                                                                )
                                                                            GROUP BY ra.sztprono_materia_legal,
                                                                                     rp.campus,rp.nivel,
                                                                                     sd.sztdtec_periodicidad,
                                                                                     sztprono_no_regla
                                                                           ) x,
                                                                sztmaco
                                                                WHERE 1 = 1
                                                               AND sztmaco_matpadre  =  x.clave_materia
                                                               AND sztmaco_mathijo   =  x.clave_materia
                                                                group  by x.clave_materia ,
                                                                          x.periodicidad,
                                                                          sztmaco_camp_code,
                                                                          sztmaco_levl_code,
                                                                          x.regla
                                UNION
                                SELECT
                                       SUM(- SZTCONF_STUDENT_NUMB) no_alumnos,
                                       SZTCONF_SUBJ_CODE MATERIA,
                                       sztconf_NO_REGLA regla
                                FROM sztconf
                                WHERE 1 = 1
                                AND sztconf_NO_REGLA = p_regla
                                GROUP BY  SZTCONF_SUBJ_CODE,
                                           sztconf_NO_REGLA
                                                             )
                                WHERE 1 = 1
                                group by clave_materia
                                                                    )
                                                                    GROUP BY ra.sztprono_materia_legal,
                                                                             rp.campus,rp.nivel,
                                                                             sd.sztdtec_periodicidad,
                                                                             sztprono_no_regla
                                                           ) x,
                            sztmaco
                            WHERE 1 = 1
                            AND x.clave_materia=c_lic.clave_materia
                            AND sztmaco_matpadre  =  x.clave_materia
                            AND sztmaco_mathijo   =  x.clave_materia
                            group  by x.clave_materia ,
                                      x.periodicidad,
                                      sztmaco_camp_code,
                                      sztmaco_levl_code,
                                      regla
                           HAVING SUM(no_alumnos) >0 )
                        loop

                             BEGIN

                                 SELECT SUM(sztconf_student_numb)
                                 INTO l_resta_grupo
                                 FROM sztconf
                                 WHERE 1 = 1
                                 AND sztconf_no_regla =p_regla
                                 AND sztconf_subj_code = c_smat.clave_materia;


                             EXCEPTION WHEN OTHERS THEN
                                   NULL;
                             END;

                            l_faltante:=c_smat.no_alumnos - l_resta_grupo;

                            IF l_faltante > 0 THEN

                                IF l_faltante <= 50 THEN

                                   BEGIN

                                       SELECT sztcost_cost
                                       INTO l_monto_pago
                                       FROM sztcost
                                       WHERE 1 = 1
                                       AND sztcost_num_groups = 1
                                       AND sztcost_levl_code  ='LI'
                                       AND sztcost_camp_code  =l_campus
                                       AND sztcost_min_cupo <= l_faltante
                                       AND sztcost_max_cupo >= l_faltante
                                       AND SZTCOST_RMT_CODE=c_smat.periodicidad
                                       AND sztcost_active='S';

                                   EXCEPTION WHEN OTHERS THEN
                                       NULL;
                                   END;

                                    INSERT INTO  SZTCONF VALUES(
                                                                             c_smat.clave_materia,
                                                                             1,
                                                                             l_faltante,
                                                                             29806,
                                                                             l_monto_pago,
                                                                             'UTEL 3',
                                                                             SYSDATE,
                                                                             USER,
                                                                             SYSDATE,
                                                                             p_regla,
                                                                             c_smat.periodicidad,
                                                                             'N',
                                                                             019814933,
                                                                             p_fecha_inicio,
                                                                             0,
                                                                             null,
                                                                             null, null
                                                                            );
                                ELSIF l_faltante > 50 then


                                     l_iteraciones:=ROUND(l_faltante/50);

                                     IF l_iteraciones<= 4 THEN

                                        l_iteraciones:=ROUND(l_faltante/50);

                                     ELSIF l_iteraciones > 4 THEN

                                           l_iteraciones:=ROUND(l_faltante/50)-1;

                                     END IF;

                                     l_contar4:=0;

                                     FOR I IN 1..l_iteraciones LOOP

                                           l_contar4:=l_contar4+1;

                                           BEGIN

                                               SELECT sztcost_cost
                                               INTO l_monto_pago
                                               FROM sztcost
                                               WHERE 1 = 1
                                               AND sztcost_num_groups = l_contar4
                                               AND sztcost_levl_code  ='LI'
                                               AND sztcost_camp_code=l_campus
                                               AND sztcost_min_cupo <= 50
                                               AND sztcost_max_cupo >= 50
                                               AND SZTCOST_RMT_CODE=c_smat.periodicidad
                                               AND sztcost_active='S';

                                           EXCEPTION WHEN OTHERS THEN
                                               NULL;
                                           END;

                                            INSERT INTO  SZTCONF VALUES(
                                                                                 c_smat.clave_materia,
                                                                                 l_contar4,
                                                                                 50,
                                                                                 29806,
                                                                                 l_monto_pago,
                                                                                 'UTEL 3',
                                                                                 SYSDATE,
                                                                                 USER,
                                                                                 SYSDATE,
                                                                                 p_regla,
                                                                                 c_smat.periodicidad,
                                                                                 'N',
                                                                                 019814933,
                                                                                 p_fecha_inicio,
                                                                                 0,
                                                                                 null,
                                                                                 null, null
                                                                                );

                                            --DBMS_OUTPUT.PUT_LINE('Contador  '||l_contar4);

                                            IF l_contar4>= 4 then

                                                l_contar4:=0;

                                            end IF;

                                     END LOOP;

                                     BEGIN

                                         SELECT SUM(sztconf_student_numb)
                                         INTO l_resta_grupo2
                                         FROM sztconf
                                         WHERE 1 = 1
                                         AND sztconf_no_regla =p_regla
                                         AND sztconf_subj_code = c_smat.clave_materia;


                                     EXCEPTION WHEN OTHERS THEN
                                           NULL;
                                     END;

                                    l_faltante2:=c_smat.no_alumnos - l_resta_grupo2;

                                    IF l_faltante2 <=50 THEN


                                         BEGIN

                                             SELECT sztcost_cost
                                             INTO l_monto_pago
                                             FROM sztcost
                                             WHERE 1 = 1
                                             AND sztcost_num_groups = 1
                                             AND sztcost_levl_code  ='LI'
                                             AND sztcost_camp_code  =l_campus
                                             AND sztcost_min_cupo <= l_faltante2
                                             AND sztcost_max_cupo >= l_faltante2
                                             AND SZTCOST_RMT_CODE=c_smat.periodicidad
                                             AND sztcost_active='S';

                                         EXCEPTION WHEN OTHERS THEN
                                             NULL;
                                         END;

                                          INSERT INTO  SZTCONF VALUES(
                                                                                 c_smat.clave_materia,
                                                                                 1,
                                                                                 l_faltante2,
                                                                                 29806,
                                                                                 l_monto_pago,
                                                                                 'UTEL 3',
                                                                                 SYSDATE,
                                                                                 USER,
                                                                                 SYSDATE,
                                                                                 p_regla,
                                                                                 c_smat.periodicidad,
                                                                                 'N',
                                                                                 019814933,
                                                                                 p_fecha_inicio,
                                                                                 0,
                                                                                 null,
                                                                                 null, null
                                                                                );
                                    elsIF l_faltante2> 50 then

                                         l_mod:= MOD(l_faltante2,2);

                                     --   DBMS_OUTPUT.PUT_LINE('Materia '||c_smat.clave_materia||'  INSERTados '||l_resta_grupo2||' faltan '||l_faltante2||' Totales '||c_smat.no_alumnos||' MOD'||l_mod);

                                        IF l_mod = 0 THEN

                                            FOR I IN 1..2 LOOP

                                                l_divide:=l_faltante2/2;

                                                 BEGIN

                                                     SELECT sztcost_cost
                                                     INTO l_monto_pago
                                                     FROM sztcost
                                                     WHERE 1 = 1
                                                     AND sztcost_num_groups = I
                                                     AND sztcost_levl_code  ='LI'
                                                     AND sztcost_camp_code = l_campus
                                                     AND sztcost_min_cupo <= l_divide
                                                     AND sztcost_max_cupo >= l_divide
                                                     AND SZTCOST_RMT_CODE=c_smat.periodicidad
                                                     AND sztcost_active='S';

                                                 EXCEPTION WHEN OTHERS THEN
                                                     NULL;
                                                 END;

                                                   INSERT INTO  SZTCONF VALUES(
                                                                                 c_smat.clave_materia,
                                                                                 I,
                                                                                 l_divide,
                                                                                 29806,
                                                                                 l_monto_pago,
                                                                                 'UTEL 3',
                                                                                 SYSDATE,
                                                                                 USER,
                                                                                 SYSDATE,
                                                                                 p_regla,
                                                                                 c_smat.periodicidad,
                                                                                 'N',
                                                                                 019814933,
                                                                                 p_fecha_inicio,
                                                                                 0,
                                                                                 null,
                                                                                 null, null
                                                                                );

                                            END LOOP;

                                        ELSIF l_mod = 1 THEN

                                             l_divide:=ROUND(l_faltante2/2);


                                                 BEGIN

                                                     SELECT sztcost_cost
                                                     INTO l_monto_pago
                                                     FROM sztcost
                                                     WHERE 1 = 1
                                                     AND sztcost_num_groups = 1
                                                     AND sztcost_levl_code  ='LI'
                                                     AND sztcost_camp_code =l_campus
                                                     AND sztcost_min_cupo <= l_divide
                                                     AND sztcost_max_cupo >= l_divide
                                                     AND SZTCOST_RMT_CODE=c_smat.periodicidad
                                                     AND sztcost_active='S';

                                                 EXCEPTION WHEN OTHERS THEN
                                                     NULL;
                                                 END;

                                                   INSERT INTO  SZTCONF VALUES(
                                                                                 c_smat.clave_materia,
                                                                                 1,
                                                                                 l_divide,
                                                                                 29806,
                                                                                 l_monto_pago,
                                                                                 'UTEL 3',
                                                                                 SYSDATE,
                                                                                 USER,
                                                                                 SYSDATE,
                                                                                 p_regla,
                                                                                 c_smat.periodicidad,
                                                                                 'N',
                                                                                 019814933,
                                                                                 p_fecha_inicio,
                                                                                 0,
                                                                                 null,
                                                                                 null, null
                                                                                );

                                             BEGIN

                                                 SELECT SUM(sztconf_student_numb)
                                                 INTO l_resta_grupo2
                                                 FROM sztconf
                                                 WHERE 1 = 1
                                                 AND sztconf_no_regla =p_regla
                                                 AND sztconf_subj_code = c_smat.clave_materia;


                                             EXCEPTION WHEN OTHERS THEN
                                                   NULL;
                                             END;

                                            l_final_alumnos:=  c_smat.NO_ALUMNOS - l_resta_grupo2;

                                            -- DBMS_OUTPUT.PUT_LINE('Materia '||c_smat.clave_materia||'  INSERTados '||l_resta_grupo2||' faltan '||l_faltante2||' Totales '||c_smat.no_alumnos||' MOD '||l_mod||' Divide '||l_divide||' Ultimo '||l_final_alumnos);

                                            BEGIN

                                                SELECT sztcost_cost
                                                INTO l_monto_pago
                                                FROM sztcost
                                                WHERE 1 = 1
                                                AND sztcost_num_groups = 2
                                                AND sztcost_levl_code  ='LI'
                                                AND sztcost_camp_code  =l_campus
                                                AND sztcost_min_cupo <= l_final_alumnos
                                                AND sztcost_max_cupo >= l_final_alumnos
                                                AND SZTCOST_RMT_CODE=c_smat.periodicidad
                                                AND sztcost_active='S';

                                            EXCEPTION WHEN OTHERS THEN
                                                NULL;
                                            END;

                                                   INSERT INTO  SZTCONF VALUES(
                                                                                 c_smat.clave_materia,
                                                                                 2,
                                                                                 l_final_alumnos,
                                                                                 29806,
                                                                                 l_monto_pago,
                                                                                 'UTEL 3',
                                                                                 SYSDATE,
                                                                                 USER,
                                                                                 SYSDATE,
                                                                                 p_regla,
                                                                                 c_smat.periodicidad,
                                                                                 'N',
                                                                                 019814933,
                                                                                 p_fecha_inicio,
                                                                                 0,
                                                                                 null,
                                                                                 null, null
                                                                                );


                                        END IF;

                                    END IF;

                                END IF;


                            END IF;


                        END LOOP;

            END LOOP;

           commit;

--           FOR c_falta in ( SELECT sum (x.no_alumnos) no_alumnos, x.clave_materia, x.periodicidad, SZTMACO_CAMP_CODE campus , SZTMACO_LEVL_CODE nivel
--                                    FROM (
--                                    SELECT   COUNT(ra.sztprono_id) no_alumnos,
--                                                             ra.sztprono_materia_legal clave_materia,
--                                                            'B' periodicidad
--                                                        FROM sztprono ra,
--                                                             rel_programaxalumno rp,
--                                                             sztdtec  sd
--                                                        WHERE 1 = 1
--                                                        AND sztprono_no_regla = p_regla
--                                                        AND ra.sztprono_pidm = rp.sgbstdn_pidm
--                                                        AND ra.sztprono_program = rp.programa
--                                                        AND rp.programa = sd.sztdtec_program
--                                                        AND rp.periodo_catalogo= sd.sztdtec_term_code
----                                                        AND ra.sztprono_materia_legal in( 'L1MK101','L2DE117','L2DE123')
--                                                        AND ra.SZTPRONO_FECHA_INICIO =p_fecha_inicio
--                                                        AND ra.sztprono_materia_legal NOT IN (SELECT sztconf_subj_code
--                                                                                              FROM sztconf
--                                                                                              WHERE sztconf_no_regla= p_regla)
--                                                        GROUP BY ra.sztprono_materia_legal,
--                                                                 sd.sztdtec_periodicidad
--                                                        ORDER BY 1,clave_materia) x, sztmaco
--                                    WHERE 1 = 1
--                                   AND SZTMACO_MATPADRE =  x.clave_materia
--                                    AND SZTMACO_MATHIJO =  x.clave_materia
--                                    group  by x.clave_materia , x.periodicidad, SZTMACO_CAMP_CODE, SZTMACO_LEVL_CODE )
--                        LOOP
--
--                     --
--
--                           BEGIN
--
--                             SELECT nvl(COUNT(*),1)+1
--                             INTO l_numero_grupos
--                             FROM sztconf
--                             WHERE 1 = 1
--                             AND sztconf_rmt_code = c_falta.periodicidad
--                             AND sztconf_PIDM = NULL
--                             AND sztconf_no_regla = p_regla;
--
--                           EXCEPTION WHEN NO_DATA_FOUND THEN
--                                 l_numero_grupos:=1;
--                           END;
--
--
--
--
--                           BEGIN
--
--                              SELECT sztcost_cost,
--                                     sztcost_maximo_alumnos
--                              INTO l_monto_pago,
--                                   l_maximo_alumno
--                              FROM sztcost
--                              WHERE 1 = 1
--                              AND sztcost_num_groups = l_numero_grupos
--                              AND sztcost_levl_code =c_falta.nivel
--                              AND sztcost_camp_code =c_falta.campus
--                              AND sztcost_min_cupo  <= c_falta.no_alumnos
--                              AND sztcost_max_cupo  >=c_falta.no_alumnos
--                              AND SZTCOST_RMT_CODE=c_falta.periodicidad
--                              AND sztcost_active='S';
--
--                           EXCEPTION WHEN NO_DATA_FOUND THEN
--                                 DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 1 '||c_falta.clave_materia);
--                                 ROLLBACK;
--
--                           END;
--
--          BEGIN
--              SELECT sztconf_student_numb
--              INTO vl_resta
--              FROM sztconf
--              WHERE 1 = 1
--              AND sztconf_subj_code = c_falta.clave_materia
--              AND sztconf_no_regla  = p_regla;
--
--          EXCEPTION
--              WHEN  OTHERS THEN
--               vl_resta :=0;
--          END;
--
--          l_monto_tope := c_falta.no_alumnos - vl_resta;
--
--             INSERT INTO  SZTCONF VALUES(
--                                               c_falta.clave_materia,
--                                               l_numero_grupos,
--                                               l_monto_tope,
--                                               NULL,
--                                               l_monto_pago,
--                                               USER,
--                                               SYSDATE,
--                                               USER,
--                                               SYSDATE,
--                                               p_regla,
--                                               c_falta.periodicidad,
--                                               'N',
--                                               null,
--                                               p_fecha_inicio,
--                                               0
--                                              );
--
--
--           DBMS_OUTPUT.PUT_LINE('Entra 10000 '||c_falta.clave_materia);
--
--
--        END LOOP;

--        FOR c_falta in ( SELECT sum (x.no_alumnos) no_alumnos, x.clave_materia, x.periodicidad, SZTMACO_CAMP_CODE campus , SZTMACO_LEVL_CODE nivel
--                                    FROM (
--                                    SELECT   COUNT(ra.sztprono_id) no_alumnos,
--                                                             ra.sztprono_materia_legal clave_materia,
--                                                            'B' periodicidad
--                                                        FROM sztprono ra,
--                                                             rel_programaxalumno rp,
--                                                             sztdtec  sd
--                                                        WHERE 1 = 1
--                                                        AND sztprono_no_regla = p_regla
--                                                        AND ra.sztprono_pidm = rp.sgbstdn_pidm
--                                                        AND ra.sztprono_program = rp.programa
--                                                        AND rp.programa = sd.sztdtec_program
--                                                        AND rp.periodo_catalogo= sd.sztdtec_term_code
----                                                        AND ra.sztprono_materia_legal in( 'L1MK101','L2DE117','L2DE123')
--                                                        AND ra.SZTPRONO_FECHA_INICIO =p_fecha_inicio
--                                                        AND ra.sztprono_materia_legal NOT IN (SELECT sztconf_subj_code
--                                                                                              FROM sztconf
--                                                                                              WHERE sztconf_no_regla= p_regla)
--                                                        GROUP BY ra.sztprono_materia_legal,
--                                                                 sd.sztdtec_periodicidad
--                                                        ORDER BY 1,clave_materia) x, sztmaco
--                                    WHERE 1 = 1
--                                   AND SZTMACO_MATPADRE =  x.clave_materia
--                                    AND SZTMACO_MATHIJO =  x.clave_materia
--                                    group  by x.clave_materia , x.periodicidad, SZTMACO_CAMP_CODE, SZTMACO_LEVL_CODE )
--                        LOOP
--
--                     --
--
--                           BEGIN
--
--                             SELECT nvl(COUNT(*),1)+1
--                             INTO l_numero_grupos
--                             FROM sztconf
--                             WHERE 1 = 1
--                             AND sztconf_rmt_code = c_falta.periodicidad
--                             AND sztconf_PIDM = NULL
--                             AND sztconf_no_regla = p_regla;
--
--                           EXCEPTION WHEN NO_DATA_FOUND THEN
--                                 l_numero_grupos:=1;
--                           END;
--
--
--
--
--                           BEGIN
--
--                              SELECT sztcost_cost,
--                                     sztcost_maximo_alumnos
--                              INTO l_monto_pago,
--                                   l_maximo_alumno
--                              FROM sztcost
--                              WHERE 1 = 1
--                              AND sztcost_num_groups = l_numero_grupos
--                              AND sztcost_levl_code =c_falta.nivel
--                              AND sztcost_camp_code =c_falta.campus
--                              AND sztcost_min_cupo  <= c_falta.no_alumnos
--                              AND sztcost_max_cupo  >=c_falta.no_alumnos
--                              AND SZTCOST_RMT_CODE=c_falta.periodicidad
--                              AND sztcost_active='S';
--
--                           EXCEPTION WHEN NO_DATA_FOUND THEN
--                                 DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 1 '||c_falta.clave_materia);
--                                -- ROLLBACK;
--
--                           END;
--
--          BEGIN
--              SELECT sztconf_student_numb
--              INTO vl_resta
--              FROM sztconf
--              WHERE 1 = 1
--              AND sztconf_subj_code = c_falta.clave_materia
--              AND sztconf_no_regla  = p_regla;
--
--          EXCEPTION
--              WHEN  OTHERS THEN
--               vl_resta :=0;
--          END;
--
--          l_monto_tope := c_falta.no_alumnos - vl_resta;
--
--             INSERT INTO  SZTCONF VALUES(
--                                               c_falta.clave_materia,
--                                               l_numero_grupos,
--                                               l_monto_tope,
--                                               NULL,
--                                               l_monto_pago,
--                                               USER,
--                                               SYSDATE,
--                                               USER,
--                                               SYSDATE,
--                                               p_regla,
--                                               c_falta.periodicidad,
--                                               'N',
--                                               null,
--                                               p_fecha_inicio,
--                                               0
--                                              );
--
--
--           DBMS_OUTPUT.PUT_LINE('Entra 10000 '||c_falta.clave_materia);
--
--
--        END LOOP;
--
--        l_campus:=null;
--
--         for c in(SELECT MAX(SZTCONF_GROUP) grupos,
--                   sztconf_pidm prof_pidm,
--                   sztconf_no_regla regla
--                   FROM sztconf
--            WHERE 1 = 1
--            AND sztconf_no_regla = p_regla
--            GROUP BY sztconf_pidm ,
--                     sztconf_no_regla
--            )
--        loop
--
--            IF c.grupos > 1 then
--
--
--               BEGIN
--                    SELECT DISTINCT SZTALGO_CAMP_CODE,
--                                    SZTALGO_LEVL_CODE
--                    INTO l_campus,
--                         l_nivel
--                    FROM SZTALGO
--                    WHERE 1 = 1
--                    AND SZTALGO_NO_REGLA  = p_regla
--                    AND ROWNUM = 1;
--
--                    IF l_campus ='UTS' THEN
--
--                        l_campus:='UTL';
--
--                    END IF;
--
--                    IF l_nivel ='MS' THEN
--
--                        l_nivel:='MA';
--
--                    END IF;
--
--               EXCEPTION WHEN OTHERS THEN
--                l_nivel:='UTL';
--               END;
--
--               for d in (SELECT SZTCONF_GROUP grupos,
--                               sztconf_pidm prof_pidm,
--                               SZTCONF_SUBJ_CODE materia,
--                               SZTCONF_STUDENT_NUMB alumnos,
--                               SZTCONF_RMT_CODE periodicidad
--                        FROM sztconf
--                        WHERE 1 = 1
--                        AND sztconf_no_regla = p_regla
--                            )loop
--
--                              BEGIN
--
--                                SELECT SZTCOST_COST
--                                INTO l_costo_final
--                                FROM SZTCOST
--                                WHERE 1 = 1
--                                AND SZTCOST_NUM_GROUPS = c.grupos
--                                AND sztcost_levl_code =l_nivel
--                                AND sztcost_camp_code =l_campus
--                                AND sztcost_min_cupo <= d.alumnos
--                                AND sztcost_max_cupo >= d.alumnos
--                                AND SZTCOST_RMT_CODE = d.periodicidad
--                                AND sztcost_active='S';
--
--                              EXCEPTION WHEN NO_DATA_FOUND THEN
--
--                                     DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago final '||d.materia);
--                                    -- ROLLBACK;
--                                    null;
--
--                              END;
--
--                                update sztconf set SZTCONF_COST= l_costo_final
--                                WHERE 1 = 1
--                                AND sztconf_pidm =C.prof_pidm
--                                AND sztconf_student_numb = d.alumnos
--                                AND sztconf_no_regla = c.regla;
--
--
--                           END LOOP;
--
--
--
--
--            end IF;
--
--        END LOOP;


    COMMIT;

    END IF;

END P_PREVIO_LIC;
--
--

  PROCEDURE carga_inscrip_preview ( p_regla NUMBER,
                                    p_fecha_inicio varchar2)
    IS/*
        CURSOR c_materias
        IS
            SELECT sum (x.no_alumnos) no_alumnos ,
                   x.clave_materia ,
                   x.periodicidad,
                   sztmaco_camp_code campus ,
                   sztmaco_levl_code nivel
            FROM (
                 SELECT   COUNT(ra.sztprono_id) no_alumnos,
                         ra.sztprono_materia_legal clave_materia,
                         DECODE(sd.sztdtec_periodicidad,1,'B',2,'C',3,'S',4,'A') periodicidad
                    FROM sztprono ra,
                         rel_programaxalumno rp,
                         sztdtec  sd
                    WHERE 1 = 1
                    AND sztprono_no_regla = p_regla
                    AND ra.sztprono_pidm = rp.sgbstdn_pidm
                    AND ra.sztprono_program = rp.programa
                    AND rp.programa = sd.sztdtec_program
                    AND rp.periodo_catalogo= sd.sztdtec_term_code
                    AND rp.rel_programaxalumno_no_regla  = ra.sztprono_no_regla
                    AND ra.SZTPRONO_FECHA_INICIO =p_fecha_inicio
--                    AND ra.SZTPRONO_MATERIA_LEGAL in ('M1ED102')
--                    AND sd.sztdtec_periodicidad =2
--                                                      'M2AN103'
--                                                        )
                    GROUP BY ra.sztprono_materia_legal,
                             rp.campus,rp.nivel,
                             sd.sztdtec_periodicidad
                   ) x,
                    sztmaco
                    WHERE 1 = 1
                   AND sztmaco_matpadre =  x.clave_materia
                    AND sztmaco_mathijo =   x.clave_materia
                    group  by x.clave_materia ,
                              x.periodicidad,
                              sztmaco_camp_code,
                              sztmaco_levl_code;

        l_materia         varchar2(100);
        l_monto_pago      number(10,2);
        l_numero_grupos   number;
        l_maximo_alumno   number;
        l_alumnos_divide_uno    number;
        l_alumnos_total_normal  number(10,2);
        l_alumnos_divide_normal number(10,2);
        l_monto_pago_uno        number(10,2);
        l_monto_pago_dos        number(10,2);
        l_monto_pago_new        number(10,2);
        l_cuenta                number;
        l_monto_tope            number;
        l_monto_tope2           number;
        vl_resta                number:=0;
        l_materia_prof          varchar2(250);
        l_monto_pago2           Number;
        l_contar                number:=0;
        l_restante              number;
        l_grupo_max             NUMBER;
        l_resultado             NUMBER;
        l_total_alumnos         NUMBER;
        l_total_restante        NUMBER;
        l_restante2             NUMBER;
        l_resta_final           NUMBER;
        l_grupo_max_final       NUMBER;
        l_resta_grupo           NUMBER;
        l_restante_grupo        NUMBER;
        l_maximo_grupo          NUMBER;
        l_iteraciones           NUMBER;
        l_max_grupos_otr        NUMBER;
        l_contar2               NUMBER;
        l_mejor_pidm            NUMBER;
        l_total2                NUMBER;
        l_dIFe_alumnos2         NUMBER;
        l_total3                NUMBER;
        l_monto_pago3           NUMBER;
        l_numero_grupos2        NUMBER;
        l_total4                NUMBER;
        l_INSERTa_faltante      NUMBER;
        l_mod                   NUMBER;
        l_INSERTa_mod           NUMBER;
        l_monto_pago_mod1       NUMBER;
        l_monto_pago_mod2       NUMBER;
        l_mejor_id              VARCHAR2(30);
        l_existe_materi_tabla   NUMBER;

        l_max_cupo_costo        NUMBER;
        l_maximo_alumno_costo   NUMBER;
        l_cuenta_nivel          NUMBER;

        l_costo_final           NUMBER;
        l_campus                VARCHAR2(3);
        l_nivel                 VARCHAR2(3);

    BEGIN

        DBMS_OUTPUT.PUT_LINE('Entra Inicio ');

        DELETE sztconf
        WHERE 1 = 1
        AND sztconf_no_regla = p_regla
        AND sztconf_FECHA_INICIO= p_fecha_inicio;
        COMMIT;

        SELECT COUNT (1)
        INTO l_cuenta_nivel
        FROM SZTALGO
        WHERE SZTALGO_NO_REGLA = p_regla
        AND SZTALGO_CAMP_CODE IN('UTL','UMM')
        AND  SZTALGO_LEVL_CODE = 'LI';

        IF l_cuenta_nivel >= 1 then


            P_PREVIO_LIC (P_REGLA,p_fecha_inicio);
            null;

        ELSE

            --raise_application_error (-20002,'Error al INSERTar  tabla de paso  ');

            FOR l_materias IN c_materias LOOP

                DBMS_OUTPUT.PUT_LINE('Entra Inicio  3');

                l_monto_tope:=0;
                l_monto_tope2:=0;
                l_materia_prof := null;
                vl_resta := 0;
                l_alumnos_divide_uno:=0;
                l_total_alumnos:=0;
                l_total_restante:=0;
                l_restante2:=0;
                l_resta_final:=0;
                l_grupo_max_final:=0;
                l_numero_grupos:=0;
                l_restante_grupo:=0;
                l_resta_grupo:=0;
                l_iteraciones:=0;
                l_max_grupos_otr:=0;
                l_contar2:=0;
                l_mejor_pidm:=0;
                l_total2:=0;
                l_dIFe_alumnos2:=0;
                l_contar:=0;
                l_total3:=0;
                l_monto_pago:=0;
               -- l_numero_grupos:=0;
               l_monto_pago3:=0;
               l_numero_grupos:=0;
               l_total4:=0;
               l_INSERTa_faltante:=0;
               l_mod:=0;
               l_INSERTa_mod:=0;
               l_monto_pago_mod1:=0;
               l_monto_pago_mod2:=0;
               l_mejor_id:=NULL;
               l_existe_materi_tabla:=0;
               l_max_cupo_costo:=0;
                l_maximo_alumno_costo:=0;

                FOR c_prof IN (SELECT     DISTINCT sztprof_pidm prof_pidm,
                                          sztprof_id id_prof,
                                          sztprof_id matricula,
                                          sztprof_no_grupos max_grupo,
                                          sztprof_cupo tope,
                                          sztprof_materia materia,
                                          sztprof_ponde_apro,
                                          sztprof_porcentaje_retencion,
                                          sztprof_ponde_ciclos
                                    FROM sztprof
                                    WHERE 1 = 1
                                    AND sztprof_no_regla = p_regla
                                    AND sztprof_materia = l_materias.clave_materia
                                    ORDER BY sztprof_materia,
                                             sztprof_ponde_apro DESC,
                                             sztprof_porcentaje_retencion DESC,
                                             sztprof_ponde_ciclos,
                                             sztprof_pidm)
                    LOOP

                        DBMS_OUTPUT.PUT_LINE('Entra Inicio  40000');


                       DBMS_OUTPUT.PUT_LINE('Entra --> materia prof '||l_materias.clave_materia||' Maximo grupos '||c_prof.max_grupo );

                        IF l_materia_prof IS NULL THEN

                            l_materia_prof := c_prof.materia;

                            DBMS_OUTPUT.PUT_LINE('Entra 1 ');


                        ELSE

                         l_materia_prof := NULL;

                         DBMS_OUTPUT.PUT_LINE('Entra 2 ');

                            IF l_total_alumnos >= l_materias.no_alumnos then

                                exit;

                            END IF;

                            IF l_total_restante >= l_materias.no_alumnos then

                                exit;

                            END IF;

                            IF l_resta_grupo < l_materias.no_alumnos then

                                    exit;

                            END IF;

                        end IF;

                        BEGIN



                         SELECT nvl(COUNT(*),1)+1
                         INTO l_numero_grupos
                         FROM sztconf
                         WHERE 1 = 1
                         AND sztconf_pidm = c_prof.prof_pidm
                         AND sztconf_rmt_code = l_materias.periodicidad
                         AND sztconf_no_regla = p_regla;

                          DBMS_OUTPUT.PUT_LINE('Entra 3 no grupos '||l_numero_grupos||' Maximo de grupos '||c_prof.max_grupo);

                        EXCEPTION WHEN NO_DATA_FOUND THEN
                             l_numero_grupos:=1;
                        END;

                        BEGIN

                            SELECT COUNT(SZTCONF_STUDENT_NUMB)
                            INTO l_existe_materi_tabla
                            FROM sztconf
                            WHERE 1 = 1
                            AND SZTCONF_NO_REGLA = p_regla
                            AND SZTCONF_STUDENT_NUMB = c_prof.materia;

                        EXCEPTION WHEN OTHERS THEN
                            NULL;
                         END;

                        DBMS_OUTPUT.PUT_LINE('l_existe_materi_tabla '||l_existe_materi_tabla);

                        IF l_existe_materi_tabla = 0 then

                            l_numero_grupos:=1;

                        end IF;

                        IF l_numero_grupos >= c_prof.max_grupo    then

                            l_numero_grupos:=1;

                            DBMS_OUTPUT.PUT_LINE('Entra 3000000');

                        end IF;


                       BEGIN

                            IF l_numero_grupos  <  c_prof.max_grupo then

                                 IF  l_materias.nivel='LI' AND  l_materias.campus IN('UTL','UMM') THEN

                                    BEGIN

                                        SELECT MAX(sztcost_max_cupo) maximo
                                        INTO l_max_cupo_costo
                                        FROM sztcost
                                        WHERE 1 = 1
                                        AND sztcost_num_groups = l_numero_grupos
                                        AND sztcost_levl_code  =l_materias.nivel
                                        AND sztcost_camp_code  =l_materias.campus;

                                    EXCEPTION WHEN OTHERS THEN
                                        DBMS_OUTPUT.PUT_LINE('Entra error 1 '||sqlerrm);
                                    END;

                                    IF l_materias.no_alumnos > l_max_cupo_costo then

                                       l_maximo_alumno_costo:= l_max_cupo_costo;

                                    end IF;

                                    BEGIN

                                         SELECT sztcost_cost,
                                                sztcost_maximo_alumnos
                                         INTO l_monto_pago,
                                              l_maximo_alumno
                                         FROM sztcost
                                         WHERE 1 = 1
                                         AND sztcost_num_groups = l_numero_grupos
                                         AND sztcost_levl_code  =l_materias.nivel
                                         AND sztcost_camp_code  =l_materias.campus
                                         AND sztcost_min_cupo <= l_max_cupo_costo
                                         AND sztcost_max_cupo >= l_max_cupo_costo
                                         AND SZTCOST_RMT_CODE ='B'
                                         AND sztcost_active='S';

                                     EXCEPTION WHEN OTHERS THEN
                                        DBMS_OUTPUT.PUT_LINE('Entra error 2 '||sqlerrm);
                                    END;

                                 ELSE

                                    BEGIN

                                         SELECT sztcost_cost,
                                                sztcost_maximo_alumnos
                                         INTO l_monto_pago,
                                              l_maximo_alumno
                                         FROM sztcost
                                         WHERE 1 = 1
                                         AND sztcost_num_groups = l_numero_grupos
                                         AND sztcost_levl_code  =l_materias.nivel
                                         AND sztcost_camp_code  =l_materias.campus
                                         AND sztcost_min_cupo <= l_materias.no_alumnos
                                         AND sztcost_max_cupo >= l_materias.no_alumnos
                                         AND SZTCOST_RMT_CODE=l_materias.periodicidad
                                         AND sztcost_active='S';

                                    EXCEPTION WHEN OTHERS THEN
                                        DBMS_OUTPUT.PUT_LINE('Entra error 3 '||sqlerrm);

                                    END;

                                 END IF;

                            END IF;

                               DBMS_OUTPUT.PUT_LINE('Entra 4');

                       EXCEPTION WHEN NO_DATA_FOUND THEN


                            DBMS_OUTPUT.PUT_LINE('costo de pago 1000 '||l_materias.clave_materia||' Numero de grupos '||l_numero_grupos||' Nvel '||l_materias.nivel||' Alumnos '||l_materias.no_alumnos||' periodicidad '||l_materias.periodicidad);

                       END;

                        IF l_materias.no_alumnos <=l_maximo_alumno THEN

                            DBMS_OUTPUT.PUT_LINE('Entra 5');

                            IF l_materias.no_alumnos > c_prof.tope THEN

                                l_monto_tope:= c_prof.tope;

                                l_restante:= l_materias.no_alumnos-l_monto_tope;

                                DBMS_OUTPUT.PUT_LINE('Entra 6');

                            ELSIF l_materias.no_alumnos = c_prof.tope THEN

                                l_monto_tope:= c_prof.tope;

                                DBMS_OUTPUT.PUT_LINE('Entra 7');

                            ELSIF l_materias.no_alumnos < c_prof.tope THEN


                                 l_monto_tope:= l_materias.no_alumnos;

                                 DBMS_OUTPUT.PUT_LINE('Entra 8');


                            END IF;


                            IF l_materia_prof IS NULL THEN

                                DBMS_OUTPUT.PUT_LINE('Entra 9');

                                BEGIN
                                    SELECT sztconf_student_numb
                                    INTO vl_resta
                                    FROM sztconf
                                    WHERE 1 = 1
                                    AND sztconf_subj_code = l_materias.clave_materia
                                    AND sztconf_no_regla  = p_regla;

                                    DBMS_OUTPUT.PUT_LINE('Entra 10');

                                EXCEPTION
                                    WHEN  OTHERS THEN
                                     vl_resta :=0;
                                END;

                                l_monto_tope := l_materias.no_alumnos - vl_resta;

                                DBMS_OUTPUT.PUT_LINE('Entra 11');

                            END IF;

                                   INSERT INTO  SZTCONF VALUES(
                                                                     l_materias.clave_materia,
                                                                     l_numero_grupos,
                                                                     l_monto_tope,
                                                                     c_prof.prof_pidm,
                                                                     l_monto_pago,
                                                                     'UTEL 10000',
                                                                     SYSDATE,
                                                                     USER,
                                                                     SYSDATE,
                                                                     p_regla,
                                                                     l_materias.periodicidad,
                                                                     'N',
                                                                     c_prof.id_prof,
                                                                     p_fecha_inicio,
                                                                     0,
                                                                     null,
                                                                     null
                                                                    );
                            commit;

                            DBMS_OUTPUT.PUT_LINE('Entra 12');

                        ELSIF l_materias.no_alumnos = c_prof.max_grupo THEN

                            BEGIN
                             SELECT nvl(COUNT(*),1)+1
                             INTO l_numero_grupos
                             FROM sztconf
                             WHERE 1 = 1
                             AND sztconf_pidm = c_prof.prof_pidm
                             AND sztconf_rmt_code = l_materias.periodicidad
                             AND sztconf_no_regla = p_regla;

                              DBMS_OUTPUT.PUT_LINE('Entra 3');

                            EXCEPTION WHEN NO_DATA_FOUND THEN
                                 l_numero_grupos:=1;
                            END;

                            BEGIN

                               SELECT sztcost_cost,
                                        sztcost_maximo_alumnos
                                 INTO l_monto_pago,
                                      l_maximo_alumno
                                 FROM sztcost
                                 WHERE 1 = 1
                                 AND sztcost_num_groups = l_numero_grupos
                                 AND sztcost_levl_code  =l_materias.nivel
                                 AND sztcost_camp_code  =l_materias.campus
                                 AND sztcost_min_cupo <= l_materias.no_alumnos
                                 AND sztcost_max_cupo >= l_materias.no_alumnos
                                 AND SZTCOST_RMT_CODE=l_materias.periodicidad
                                 AND sztcost_active='S';
                            EXCEPTION WHEN NO_DATA_FOUND THEN
                                   NULL;
                            END;

                              DBMS_OUTPUT.PUT_LINE('Entra 300');

                               EXIT;

                        ELSIF l_materias.no_alumnos > l_maximo_alumno THEN

                           l_alumnos_divide_uno:=l_materias.no_alumnos/2;


                            IF l_alumnos_divide_uno < l_maximo_alumno THEN

                                l_mod:= MOD(l_materias.no_alumnos,2);

                                 DBMS_OUTPUT.PUT_LINE('Mooooood '||l_mod);

                               IF  l_mod = 1 THEN

                                    l_alumnos_divide_uno:=ROUND(l_materias.no_alumnos/2);

                                    l_INSERTa_mod:=l_materias.no_alumnos -l_alumnos_divide_uno;

                                    BEGIN

                                          SELECT sztcost_cost
                                          INTO l_monto_pago_mod1
                                          FROM sztcost
                                          WHERE 1 = 1
                                          AND sztcost_num_groups = 1
                                          AND sztcost_levl_code  =l_materias.nivel
                                          AND sztcost_camp_code  =l_materias.campus
                                          AND sztcost_min_cupo <= l_alumnos_divide_uno
                                          AND sztcost_max_cupo >= l_alumnos_divide_uno
                                          AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                          AND sztcost_active='S';

                                          DBMS_OUTPUT.PUT_LINE('Entra 14');

                                    EXCEPTION WHEN NO_DATA_FOUND THEN

                                          DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 2');

                                    END;

                                    INSERT INTO  SZTCONF VALUES(
                                                                     l_materias.clave_materia,
                                                                     1,
                                                                     l_alumnos_divide_uno,
                                                                     c_prof.prof_pidm,
                                                                     l_monto_pago_mod1,
                                                                     'UTEL 2',
                                                                     SYSDATE,
                                                                     USER,
                                                                     SYSDATE,
                                                                     p_regla,
                                                                     l_materias.periodicidad,
                                                                     'N',
                                                                     c_prof.id_prof,
                                                                     p_fecha_inicio,
                                                                     0,
                                                                     null,
                                                                     null
                                                                    );

                                    BEGIN

                                          SELECT sztcost_cost
                                          INTO l_monto_pago_mod2
                                          FROM sztcost
                                          WHERE 1 = 1
                                          AND sztcost_num_groups = 2
                                          AND sztcost_levl_code  =l_materias.nivel
                                          AND sztcost_camp_code  =l_materias.campus
                                          AND sztcost_min_cupo <= l_alumnos_divide_uno
                                          AND sztcost_max_cupo >= l_alumnos_divide_uno
                                          AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                          AND sztcost_active='S';

                                          DBMS_OUTPUT.PUT_LINE('Entra 14');

                                    EXCEPTION WHEN NO_DATA_FOUND THEN

                                          DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 2');

                                    END;

                                    INSERT INTO  SZTCONF VALUES(
                                                                     l_materias.clave_materia,
                                                                     2,
                                                                     l_INSERTa_mod,
                                                                     c_prof.prof_pidm,
                                                                     l_monto_pago_mod2,
                                                                     'UTEL 3',
                                                                     SYSDATE,
                                                                     USER,
                                                                     SYSDATE,
                                                                     p_regla,
                                                                     l_materias.periodicidad,
                                                                     'N',
                                                                     c_prof.id_prof,
                                                                     p_fecha_inicio,
                                                                     0,
                                                                     null,
                                                                     null
                                                                    );


                               ELSIF l_mod <> 1 THEN

                                   FOR I IN 1..2 LOOP

                                        DBMS_OUTPUT.PUT_LINE('Entra 13');

                                       l_contar:=l_contar+1;

                                       BEGIN

                                          SELECT sztcost_cost
                                          INTO l_monto_pago2
                                          FROM sztcost
                                          WHERE 1 = 1
                                          AND sztcost_num_groups = l_contar
                                          AND sztcost_levl_code  =l_materias.nivel
                                          AND sztcost_camp_code  =l_materias.campus
                                          AND sztcost_min_cupo <= l_alumnos_divide_uno
                                          AND sztcost_max_cupo >= l_alumnos_divide_uno
                                          AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                          AND sztcost_active='S';

                                          DBMS_OUTPUT.PUT_LINE('Entra 14');

                                       EXCEPTION WHEN NO_DATA_FOUND THEN
                                             DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 2');
                                       END;


                                        INSERT INTO  SZTCONF VALUES(
                                                                     l_materias.clave_materia,
                                                                     l_contar,
                                                                     l_alumnos_divide_uno,
                                                                     c_prof.prof_pidm,
                                                                     l_monto_pago2,
                                                                     'UTEL 4',
                                                                     SYSDATE,
                                                                     USER,
                                                                     SYSDATE,
                                                                     p_regla,
                                                                     l_materias.periodicidad,
                                                                     'N',
                                                                     c_prof.id_prof,
                                                                     p_fecha_inicio,
                                                                     0,
                                                                     null,
                                                                     null
                                                                    );
                                    commit;

                                    l_total_alumnos:= nvl(l_total_alumnos,0) + l_alumnos_divide_uno;

                                    DBMS_OUTPUT.PUT_LINE('Entra 15 ');

                                   END LOOP;

                               END IF;

                            ELSIF l_alumnos_divide_uno > l_maximo_alumno THEN

                                l_contar:=l_contar+1;

                                l_iteraciones:= ROUND(l_materias.no_alumnos/c_prof.tope) -1;


                                IF l_contar  <= c_prof.max_grupo THEN

                                    DBMS_OUTPUT.PUT_LINE('Entra 16 iteraciones '||l_iteraciones||' No Alumnos '||l_materias.no_alumnos||' Tope '||c_prof.tope||' Maximo Alumnos '||l_maximo_alumno);

                                    DBMS_OUTPUT.PUT_LINE('Contar '||l_contar);

                                    FOR I IN 1..l_iteraciones LOOP

                                       l_contar2:=l_contar2+1;

                                       DBMS_OUTPUT.PUT_LINE('Entra 17');

                                       IF  l_contar2 <= c_prof.max_grupo THEN

                                            DBMS_OUTPUT.PUT_LINE('Entra 18 ');

                                           BEGIN

                                            DBMS_OUTPUT.PUT_LINE('Entra 19 ');

                                              SELECT sztcost_cost
                                              INTO l_monto_pago2
                                              FROM sztcost
                                              WHERE 1 = 1
                                              AND sztcost_num_groups = l_contar2
                                              AND sztcost_levl_code  =l_materias.nivel
                                              AND sztcost_camp_code  =l_materias.campus
                                              AND sztcost_min_cupo <= l_alumnos_divide_uno
                                              AND sztcost_max_cupo >= l_alumnos_divide_uno
                                              AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                              AND sztcost_active='S';


                                           EXCEPTION WHEN NO_DATA_FOUND THEN

                                                 DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 2');
                                                 ROLLBACK;

                                           END;

                                          --  IF l_iteraciones  <= c_prof.max_grupo then

                                                INSERT INTO  SZTCONF VALUES(
                                                                             l_materias.clave_materia,
                                                                             I,
                                                                             c_prof.tope,
                                                                             c_prof.prof_pidm,
                                                                             l_monto_pago2,
                                                                             'UTEL 5',
                                                                             SYSDATE,
                                                                             USER,
                                                                             SYSDATE,
                                                                             p_regla,
                                                                             l_materias.periodicidad,
                                                                             'N',
                                                                             c_prof.id_prof,
                                                                             p_fecha_inicio,
                                                                             0,
                                                                             null,
                                                                             null
                                                                             );
                                                commit;

                                               DBMS_OUTPUT.PUT_LINE('Entra 20  ITERACIONES '||I);
                                           -- end IF;

                                       END IF;

                                    END LOOP;

                                    BEGIN

                                        SELECT sum(sztconf_student_numb)
                                        INTO l_resta_grupo
                                        FROM SZTCONF
                                        WHERE 1 = 1
                                        AND SZTCONF_NO_REGLA =P_REGLA
                                        AND SZTCONF_SUBJ_CODE = l_materias.clave_materia;

                                        DBMS_OUTPUT.PUT_LINE('Entra 21 ingresados '||l_resta_grupo);

                                    EXCEPTION WHEN OTHERS THEN
                                        NULL;
                                    END;

                                    IF l_resta_grupo > c_prof.tope then

                                        DBMS_OUTPUT.PUT_LINE(' Entra aqui mero ');

                                    end IF;


                                    BEGIN
                                        SELECT max(sztconf_group)
                                        INTO l_max_grupos_otr
                                        FROM sztconf
                                        WHERE 1 = 1
                                        AND sztconf_subj_code = l_materias.clave_materia
                                        AND sztconf_no_regla  = p_regla;

                                        DBMS_OUTPUT.PUT_LINE('Entra 22 max '||l_max_grupos_otr);

                                    EXCEPTION WHEN OTHERS THEN
                                        NULL;
                                    END;

                                    DBMS_OUTPUT.PUT_LINE('Entra 23 total de alumnos empujados '||l_resta_grupo);

                                    l_restante_grupo:= l_materias.no_alumnos - NVL(l_resta_grupo,0);

                                    IF l_resta_grupo < l_materias.no_alumnos then

                                        DBMS_OUTPUT.PUT_LINE('Entra 24 resta  '||l_restante_grupo||' maximo '||l_materias.no_alumnos);

                                        l_contar :=0;

                                        IF l_max_grupos_otr <= c_prof.max_grupo then

                                            DBMS_OUTPUT.PUT_LINE('Entra 25 maximo '||l_max_grupos_otr||' cursor maximo  '||c_prof.max_grupo);

                                            IF  l_contar2 > c_prof.max_grupo THEN

                                               DBMS_OUTPUT.PUT_LINE('Entra 26  contar  '||l_contar2||' cursor maximo  '||c_prof.max_grupo);

                                               l_contar:=l_contar+1;

                                               BEGIN

                                                   SELECT SZTPROF_PIDM,
                                                          SZTPROF_ID
                                                   INTO l_mejor_pidm,
                                                        l_mejor_id
                                                   FROM sztprof
                                                   WHERE 1 = 1
                                                   AND sztprof_no_regla = p_regla
                                                   AND SZTPROF_MATERIA = l_materias.clave_materia
                                                   AND sztprof_PIDM NOT IN ( SELECT sztconf_PIDM
                                                                                FROM sztconf
                                                                                WHERE 1 = 1
                                                                                AND sztconf_no_regla = p_regla)
                                                   AND ROWNUM = 1
                                                   ORDER BY sztprof_materia,
                                                            sztprof_ponde_apro DESC,
                                                            sztprof_porcentaje_retencion DESC,
                                                            sztprof_ponde_ciclos,
                                                            sztprof_pidm;

                                                  DBMS_OUTPUT.PUT_LINE('Entra 27 ');

                                               EXCEPTION WHEN OTHERS THEN
                                                   NULL;
                                               END;

                                               BEGIN

                                                      SELECT sztcost_cost
                                                      INTO l_monto_pago2
                                                      FROM sztcost
                                                      WHERE 1 = 1
                                                      AND sztcost_num_groups =l_contar
                                                      AND sztcost_levl_code  =l_materias.nivel
                                                      AND sztcost_camp_code  =l_materias.campus
                                                      AND sztcost_min_cupo <= l_alumnos_divide_uno
                                                      AND sztcost_max_cupo >= l_alumnos_divide_uno
                                                      AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                                      AND sztcost_active='S';

                                                      DBMS_OUTPUT.PUT_LINE('Entra 28 ');

                                               EXCEPTION WHEN NO_DATA_FOUND THEN

                                                     DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 2');
                                                     ROLLBACK;

                                               END;

                                                    INSERT INTO  SZTCONF VALUES(
                                                                             l_materias.clave_materia,
                                                                             l_contar,
                                                                             c_prof.tope,
                                                                             l_mejor_pidm,
                                                                             l_monto_pago2,
                                                                             'UTEL 6',
                                                                             SYSDATE,
                                                                             USER,
                                                                             SYSDATE,
                                                                             p_regla,
                                                                             l_materias.periodicidad,
                                                                             'N',
                                                                             l_mejor_id,
                                                                             p_fecha_inicio,
                                                                             0,
                                                                             null,
                                                                             null
                                                                         );
                                            COMMIT;

                                                   DBMS_OUTPUT.PUT_LINE('Entra 29 ');

                                                    BEGIN

                                                        SELECT sum(sztconf_student_numb)
                                                        INTO l_total2
                                                        FROM sztconf
                                                        WHERE 1 = 1
                                                        AND sztconf_no_regla = p_regla
                                                        AND sztconf_subj_code = l_materias.clave_materia;

                                                        DBMS_OUTPUT.PUT_LINE('Entra 30 ');

                                                    EXCEPTION WHEN OTHERS THEN
                                                        NULL;
                                                    END;

                                                    l_dIFe_alumnos2 := l_materias.no_alumnos - l_total2;


                                                        DBMS_OUTPUT.PUT_LINE('Entra 31 dIFerencia alumno '||l_dIFe_alumnos2||' maximo '||c_prof.tope);

                                                IF l_dIFe_alumnos2 >  c_prof.tope then


                                                     l_contar:=l_contar+1;

                                                   BEGIN

                                                       SELECT SZTPROF_PIDM,
                                                              SZTPROF_ID
                                                       INTO l_mejor_pidm,
                                                            l_mejor_id
                                                       FROM sztprof
                                                       WHERE 1 = 1
                                                       AND sztprof_no_regla = p_regla
                                                       AND SZTPROF_MATERIA = l_materias.clave_materia
                                                       AND sztprof_PIDM NOT IN ( SELECT sztconf_PIDM
                                                                                    FROM sztconf
                                                                                    WHERE 1 = 1
                                                                                    AND sztconf_no_regla = p_regla)
                                                       AND ROWNUM = 1
                                                       ORDER BY sztprof_materia,
                                                                sztprof_ponde_apro DESC,
                                                                sztprof_porcentaje_retencion DESC,
                                                                sztprof_ponde_ciclos,
                                                                sztprof_pidm;

                                                      DBMS_OUTPUT.PUT_LINE('Entra 27 ');

                                                   EXCEPTION WHEN OTHERS THEN
                                                       NULL;
                                                   END;

                                                   BEGIN

                                                          SELECT sztcost_cost
                                                          INTO l_monto_pago2
                                                          FROM sztcost
                                                          WHERE 1 = 1
                                                          AND sztcost_num_groups =l_contar
                                                          AND sztcost_levl_code  =l_materias.nivel
                                                          AND sztcost_camp_code  =l_materias.campus
                                                          AND sztcost_min_cupo <= l_alumnos_divide_uno
                                                          AND sztcost_max_cupo >= l_alumnos_divide_uno
                                                          AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                                          AND sztcost_active='S';

                                                          DBMS_OUTPUT.PUT_LINE('Entra 28 ');

                                                   EXCEPTION WHEN NO_DATA_FOUND THEN

                                                         DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 2');
                                                         ROLLBACK;

                                                   END;

                                                        INSERT INTO  SZTCONF VALUES(
                                                                                 l_materias.clave_materia,
                                                                                 l_contar,
                                                                                 c_prof.tope,
                                                                                 l_mejor_pidm,
                                                                                 l_monto_pago2,
                                                                                 'UTEL 7',
                                                                                 SYSDATE,
                                                                                 USER,
                                                                                 SYSDATE,
                                                                                 p_regla,
                                                                                 l_materias.periodicidad,
                                                                                 'N',
                                                                                 l_mejor_id,
                                                                                 p_fecha_inicio,
                                                                                 0,
                                                                                 null,
                                                                                 null
                                                                             );

                                                   BEGIN
                                                        SELECT sum(SZTCONF_STUDENT_NUMB)
                                                        INTO l_resta_grupo
                                                        FROM SZTCONF
                                                        WHERE 1 = 1
                                                        AND SZTCONF_NO_REGLA =P_REGLA
                                                        AND SZTCONF_SUBJ_CODE = l_materias.clave_materia;

                                                   EXCEPTION WHEN OTHERS THEN
                                                    NULL;
                                                   END;

                                                   l_dIFe_alumnos2:=l_materias.no_alumnos- l_resta_grupo;

                                                   DBMS_OUTPUT.PUT_LINE('Dieferencia de grupo '||l_dIFe_alumnos2);

                                                    IF  l_dIFe_alumnos2 <= c_prof.tope THEN

                                                      l_contar:=l_contar+1;

                                                       BEGIN

                                                              SELECT sztcost_cost
                                                              INTO l_monto_pago2
                                                              FROM sztcost
                                                              WHERE 1 = 1
                                                              AND sztcost_num_groups = l_contar
                                                              AND sztcost_levl_code  =l_materias.nivel
                                                              AND sztcost_camp_code  =l_materias.campus
                                                              AND sztcost_min_cupo <= l_alumnos_divide_uno
                                                              AND sztcost_max_cupo >= l_alumnos_divide_uno
                                                              AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                                              AND sztcost_active='S';

                                                              DBMS_OUTPUT.PUT_LINE('Entra 32 ');

                                                       EXCEPTION WHEN NO_DATA_FOUND THEN

                                                             DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 2');
                                                             ROLLBACK;

                                                       END;


                                                        INSERT INTO  SZTCONF VALUES(
                                                                             l_materias.clave_materia,
                                                                             l_contar,
                                                                             l_dIFe_alumnos2,
                                                                             l_mejor_pidm,
                                                                             l_monto_pago2,
                                                                             'UTEL 8',
                                                                             SYSDATE,
                                                                             USER,
                                                                             SYSDATE,
                                                                             p_regla,
                                                                             l_materias.periodicidad,
                                                                             'N',
                                                                             l_mejor_id,
                                                                             p_fecha_inicio,
                                                                             0,
                                                                             null,
                                                                             null
                                                                         );
                                                     commit;

                                                        DBMS_OUTPUT.PUT_LINE('Entra 33 ');

                                                    end IF;

                                                end IF;

                                                BEGIN
                                                        SELECT sum(SZTCONF_STUDENT_NUMB)
                                                        INTO l_resta_grupo
                                                        FROM SZTCONF
                                                        WHERE 1 = 1
                                                        AND SZTCONF_NO_REGLA =P_REGLA
                                                        AND SZTCONF_SUBJ_CODE = l_materias.clave_materia;

                                                        DBMS_OUTPUT.PUT_LINE('Total -->  '||l_resta_grupo);

                                                EXCEPTION WHEN OTHERS THEN
                                                    NULL;
                                                END;

                                                IF l_materias.no_alumnos > l_resta_grupo  then

                                                    IF l_dIFe_alumnos2 <=  c_prof.tope THEN

                                                         l_contar:=l_contar+1;

                                                         DBMS_OUTPUT.PUT_LINE('Entra 34 contar '||l_contar);

                                                         BEGIN

                                                             SELECT sztcost_cost
                                                             INTO l_monto_pago2
                                                             FROM sztcost
                                                             WHERE 1 = 1
                                                             AND sztcost_num_groups = l_contar
                                                             AND sztcost_levl_code  =l_materias.nivel
                                                             AND sztcost_camp_code  =l_materias.campus
                                                             AND sztcost_min_cupo <= l_alumnos_divide_uno
                                                             AND sztcost_max_cupo >= l_alumnos_divide_uno
                                                             AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                                             AND sztcost_active='S';

                                                             DBMS_OUTPUT.PUT_LINE('monto  '||l_monto_pago2);

                                                         EXCEPTION WHEN NO_DATA_FOUND THEN
                                                               DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 2');

                                                         END;

                                                          INSERT INTO  SZTCONF VALUES(
                                                                                 l_materias.clave_materia,
                                                                                 l_contar,
                                                                                 l_dIFe_alumnos2,
                                                                                 l_mejor_pidm,
                                                                                 l_monto_pago2,
                                                                                 'UTEL 9',
                                                                                 SYSDATE,
                                                                                 USER,
                                                                                 SYSDATE,
                                                                                 p_regla,
                                                                                 l_materias.periodicidad,
                                                                                 'N',
                                                                                 l_mejor_id,
                                                                                 p_fecha_inicio,
                                                                                 0,
                                                                                 null,
                                                                                 null
                                                                             );


                                                    END IF;

                                                END IF;

                                                IF  l_dIFe_alumnos2 > c_prof.tope THEN

                                                    l_contar:= l_contar+1;

                                                    DBMS_OUTPUT.PUT_LINE('Entra 36 maximo '||l_contar);

                                                   BEGIN

                                                       SELECT SZTPROF_PIDM,
                                                              SZTPROF_ID
                                                       INTO l_mejor_pidm,
                                                            l_mejor_id
                                                       FROM sztprof
                                                       WHERE 1 = 1
                                                       AND sztprof_no_regla = p_regla
                                                       AND SZTPROF_MATERIA = l_materias.clave_materia
                                                       AND sztprof_PIDM NOT IN ( SELECT sztconf_PIDM
                                                                                    FROM sztconf
                                                                                    WHERE 1 = 1
                                                                                    AND sztconf_no_regla = p_regla)
                                                       AND ROWNUM = 1
                                                       ORDER BY sztprof_materia,
                                                                sztprof_ponde_apro DESC,
                                                                sztprof_porcentaje_retencion DESC,
                                                                sztprof_ponde_ciclos,
                                                                sztprof_pidm;

                                                      DBMS_OUTPUT.PUT_LINE('Entra 27 ');

                                                   EXCEPTION WHEN OTHERS THEN
                                                       NULL;
                                                   END;

                                                    BEGIN

                                                         SELECT sztcost_cost
                                                         INTO l_monto_pago2
                                                         FROM sztcost
                                                         WHERE 1 = 1
                                                         AND sztcost_num_groups = l_contar
                                                         AND sztcost_levl_code  =l_materias.nivel
                                                         AND sztcost_camp_code  =l_materias.campus
                                                         AND sztcost_min_cupo <= l_alumnos_divide_uno
                                                         AND sztcost_max_cupo >= l_alumnos_divide_uno
                                                         AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                                         AND sztcost_active='S';

                                                         DBMS_OUTPUT.PUT_LINE('monto  '||l_monto_pago2);

                                                    EXCEPTION WHEN NO_DATA_FOUND THEN

                                                          DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 2');
                                                          ROLLBACK;

                                                    END;

                                                    INSERT INTO  SZTCONF VALUES(
                                                                             l_materias.clave_materia,
                                                                             l_contar,
                                                                             c_prof.tope,
                                                                             l_mejor_pidm,
                                                                             l_monto_pago2,
                                                                             'UTEL 10',
                                                                             SYSDATE,
                                                                             USER,
                                                                             SYSDATE,
                                                                             p_regla,
                                                                             l_materias.periodicidad,
                                                                             'N',
                                                                             l_mejor_id,
                                                                             p_fecha_inicio,
                                                                             0,
                                                                             null,
                                                                             null
                                                                         );

                                                   BEGIN

                                                        SELECT sum(SZTCONF_STUDENT_NUMB)
                                                        INTO l_resta_grupo
                                                        FROM SZTCONF
                                                        WHERE 1 = 1
                                                        AND SZTCONF_NO_REGLA =P_REGLA
                                                        AND SZTCONF_SUBJ_CODE = l_materias.clave_materia;

                                                        DBMS_OUTPUT.PUT_LINE('Total de alumnos empuejados '||l_resta_grupo);

                                                   EXCEPTION WHEN OTHERS THEN
                                                       NULL;
                                                   END;

                                                     l_restante_grupo:= l_materias.no_alumnos-  l_resta_grupo;

                                                     l_contar:=l_contar+1;


                                                    IF l_materias.no_alumnos > l_resta_grupo  then

                                                       l_iteraciones:= c_prof.max_grupo;

                                                       l_contar:=0;

                                                        FOR I in 1.. l_iteraciones loop

                                                            l_contar:=l_contar+1;

                                                            BEGIN

                                                                SELECT SZTPROF_PIDM
                                                                INTO l_mejor_pidm
                                                                FROM sztprof
                                                                WHERE 1 = 1
                                                                AND sztprof_no_regla = p_regla
                                                                AND SZTPROF_MATERIA = l_materias.clave_materia
                                                                AND sztprof_PIDM NOT IN ( SELECT sztconf_PIDM
                                                                                             FROM sztconf
                                                                                             WHERE 1 = 1
                                                                                             AND sztconf_no_regla = p_regla)
                                                                AND ROWNUM = 1
                                                                ORDER BY sztprof_materia,
                                                                         sztprof_ponde_apro DESC,
                                                                         sztprof_porcentaje_retencion DESC,
                                                                         sztprof_ponde_ciclos,
                                                                         sztprof_pidm;

                                                               DBMS_OUTPUT.PUT_LINE('l_mejor_pidm  '||l_mejor_pidm);

                                                            EXCEPTION WHEN OTHERS THEN
                                                                 DBMS_OUTPUT.PUT_LINE('l_mejor_pidm  '||l_mejor_pidm);
                                                                NULL;
                                                            END;

                                                            BEGIN

                                                                  SELECT sztcost_cost
                                                                  INTO l_monto_pago2
                                                                  FROM sztcost
                                                                  WHERE 1 = 1
                                                                  AND sztcost_num_groups = l_contar
                                                                  AND sztcost_levl_code  =l_materias.nivel
                                                                  AND sztcost_camp_code  =l_materias.campus
                                                                  AND sztcost_min_cupo <= l_alumnos_divide_uno
                                                                  AND sztcost_max_cupo >= l_alumnos_divide_uno
                                                                  AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                                                  AND sztcost_active='S';

                                                                  DBMS_OUTPUT.PUT_LINE('Monto '||l_monto_pago2||' Vueltas '||l_contar);

                                                            EXCEPTION WHEN NO_DATA_FOUND THEN

                                                                 DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 2');
                                                                 ROLLBACK;

                                                            END;

                                                             INSERT INTO  SZTCONF VALUES(
                                                                             l_materias.clave_materia,
                                                                             l_contar,
                                                                             c_prof.tope,
                                                                             l_mejor_pidm,
                                                                             l_monto_pago2,
                                                                             'UTEL 11',
                                                                             SYSDATE,
                                                                             USER,
                                                                             SYSDATE,
                                                                             p_regla,
                                                                             l_materias.periodicidad,
                                                                             'N',
                                                                             l_mejor_id,
                                                                             p_fecha_inicio,
                                                                             0,
                                                                             null,
                                                                             null
                                                                         );
                                                                 commit;

                                                        END LOOP;

                                                       BEGIN

                                                            SELECT sum(SZTCONF_STUDENT_NUMB)
                                                            INTO l_resta_grupo
                                                            FROM SZTCONF
                                                            WHERE 1 = 1
                                                            AND SZTCONF_NO_REGLA =P_REGLA
                                                            AND SZTCONF_SUBJ_CODE = l_materias.clave_materia;

                                                            DBMS_OUTPUT.PUT_LINE('Total de alumnos empuejados  --> 1010 '||l_resta_grupo);

                                                       EXCEPTION WHEN OTHERS THEN
                                                           NULL;
                                                       END;

                                                       l_restante_grupo:= l_materias.no_alumnos-  l_resta_grupo;

                                                        DBMS_OUTPUT.PUT_LINE('Resta Grupos '||l_restante_grupo);

                                                    end IF;

                                                    l_iteraciones := ROUND(l_restante_grupo/c_prof.tope);

                                                    FOR I IN 1..  l_iteraciones LOOP

                                                        l_contar:=0;

                                                        l_contar:=l_contar+1;

                                                            BEGIN

                                                                SELECT SZTPROF_PIDM,
                                                                       SZTPROF_ID
                                                                INTO l_mejor_pidm,
                                                                      l_mejor_id
                                                                FROM sztprof
                                                                WHERE 1 = 1
                                                                AND sztprof_no_regla = p_regla
                                                                AND SZTPROF_MATERIA = l_materias.clave_materia
                                                                AND sztprof_PIDM NOT IN ( SELECT sztconf_PIDM
                                                                                             FROM sztconf
                                                                                             WHERE 1 = 1
                                                                                             AND sztconf_no_regla = p_regla)
                                                                AND ROWNUM = 1
                                                                ORDER BY sztprof_materia,
                                                                         sztprof_ponde_apro DESC,
                                                                         sztprof_porcentaje_retencion DESC,
                                                                         sztprof_ponde_ciclos,
                                                                         sztprof_pidm;

                                                               DBMS_OUTPUT.PUT_LINE('l_mejor_pidm  '||l_mejor_pidm);

                                                            EXCEPTION WHEN OTHERS THEN
                                                                 DBMS_OUTPUT.PUT_LINE('l_mejor_pidm  '||l_mejor_pidm);
                                                                NULL;
                                                            END;

                                                            BEGIN

                                                                  SELECT sztcost_cost
                                                                  INTO l_monto_pago2
                                                                  FROM sztcost
                                                                  WHERE 1 = 1
                                                                  AND sztcost_num_groups = l_contar
                                                                  AND sztcost_levl_code  =l_materias.nivel
                                                                  AND sztcost_camp_code  =l_materias.campus
                                                                  AND sztcost_min_cupo <= l_alumnos_divide_uno
                                                                  AND sztcost_max_cupo >= l_alumnos_divide_uno
                                                                  AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                                                  AND sztcost_active='S';

                                                                  DBMS_OUTPUT.PUT_LINE('Monto '||l_monto_pago2||' Vueltas '||l_contar);

                                                            EXCEPTION WHEN NO_DATA_FOUND THEN

                                                                 DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 2');
                                                                 ROLLBACK;

                                                            END;

                                                             INSERT INTO  SZTCONF VALUES(
                                                                             l_materias.clave_materia,
                                                                             l_contar,
                                                                             c_prof.tope,
                                                                             l_mejor_pidm,
                                                                             l_monto_pago2,
                                                                             'UTEL 11',
                                                                             SYSDATE,
                                                                             USER,
                                                                             SYSDATE,
                                                                             p_regla,
                                                                             l_materias.periodicidad,
                                                                             'N',
                                                                             l_mejor_id,
                                                                             p_fecha_inicio,
                                                                             0,
                                                                             null,
                                                                             null
                                                                         );
                                                                 commit;

                                                    END LOOP;

                                                   BEGIN

                                                        SELECT sum(SZTCONF_STUDENT_NUMB)
                                                        INTO l_resta_grupo
                                                        FROM SZTCONF
                                                        WHERE 1 = 1
                                                        AND SZTCONF_NO_REGLA =P_REGLA
                                                        AND SZTCONF_SUBJ_CODE = l_materias.clave_materia;

                                                        DBMS_OUTPUT.PUT_LINE('Total de alumnos empuejados '||l_resta_grupo);

                                                   EXCEPTION WHEN OTHERS THEN
                                                       NULL;
                                                   END;

                                                   l_iteraciones:=l_materias.no_alumnos - l_resta_grupo;

                                                   IF l_iteraciones> 0 THEN

                                                        BEGIN

                                                                SELECT SZTPROF_PIDM,
                                                                       SZTPROF_ID
                                                                INTO l_mejor_pidm,
                                                                      l_mejor_id
                                                                FROM sztprof
                                                                WHERE 1 = 1
                                                                AND sztprof_no_regla = p_regla
                                                                AND SZTPROF_MATERIA = l_materias.clave_materia
                                                                AND sztprof_PIDM NOT IN ( SELECT sztconf_PIDM
                                                                                             FROM sztconf
                                                                                             WHERE 1 = 1
                                                                                             AND sztconf_no_regla = p_regla)
                                                                AND ROWNUM = 1
                                                                ORDER BY sztprof_materia,
                                                                         sztprof_ponde_apro DESC,
                                                                         sztprof_porcentaje_retencion DESC,
                                                                         sztprof_ponde_ciclos,
                                                                         sztprof_pidm;

                                                               DBMS_OUTPUT.PUT_LINE('l_mejor_pidm  '||l_mejor_pidm);

                                                        EXCEPTION WHEN OTHERS THEN
                                                             DBMS_OUTPUT.PUT_LINE('l_mejor_pidm  '||l_mejor_pidm);
                                                            NULL;
                                                        END;

                                                        BEGIN

                                                                  SELECT sztcost_cost
                                                                  INTO l_monto_pago2
                                                                  FROM sztcost
                                                                  WHERE 1 = 1
                                                                  AND sztcost_num_groups = 1
                                                                  AND sztcost_levl_code  =l_materias.nivel
                                                                  AND sztcost_camp_code  =l_materias.campus
                                                                  AND sztcost_min_cupo <= l_alumnos_divide_uno
                                                                  AND sztcost_max_cupo >= l_alumnos_divide_uno
                                                                  AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                                                  AND sztcost_active='S';

                                                                  DBMS_OUTPUT.PUT_LINE('Monto '||l_monto_pago2||' Vueltas '||l_contar);

                                                        EXCEPTION WHEN NO_DATA_FOUND THEN

                                                             DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 2');
                                                             ROLLBACK;

                                                        END;

                                                             INSERT INTO  SZTCONF VALUES(
                                                                             l_materias.clave_materia,
                                                                             1,
                                                                             l_iteraciones,
                                                                             l_mejor_pidm,
                                                                             l_monto_pago2,
                                                                             'UTEL 11',
                                                                             SYSDATE,
                                                                             USER,
                                                                             SYSDATE,
                                                                             p_regla,
                                                                             l_materias.periodicidad,
                                                                             'N',
                                                                             l_mejor_id,
                                                                             p_fecha_inicio,
                                                                             0,
                                                                             null,
                                                                             null
                                                                         );
                                                                 commit;


                                                   END IF;



                                                end IF;

                                            ELSIF l_contar2 <=  c_prof.max_grupo THEN


                                                DBMS_OUTPUT.PUT_LINE('Entra 34 contar '||l_contar2||' cursor maximo  '||c_prof.max_grupo);


                                                IF l_restante_grupo > c_prof.tope THEN

                                                    DBMS_OUTPUT.PUT_LINE('Entra 35 resta '||l_restante_grupo||' tope '||c_prof.tope||' maximo de grupos '||c_prof.max_grupo);

                                                    BEGIN
                                                        SELECT max(SZTCONF_GROUP)+1
                                                            INTO l_max_grupos_otr
                                                            FROM sztconf
                                                            WHERE 1 = 1
                                                            AND sztconf_subj_code = l_materias.clave_materia
                                                            AND sztconf_no_regla  = p_regla;

                                                            DBMS_OUTPUT.PUT_LINE('Entra 36 maximo '||l_max_grupos_otr);

                                                    EXCEPTION WHEN OTHERS THEN
                                                        NULL;
                                                    END;

                                                    IF l_max_grupos_otr >c_prof.max_grupo  THEN

                                                        l_contar:=l_contar+1;

                                                           BEGIN

                                                               SELECT SZTPROF_PIDM,
                                                                      SZTPROF_ID
                                                               INTO l_mejor_pidm,
                                                                    l_mejor_id
                                                               FROM sztprof
                                                               WHERE 1 = 1
                                                               AND sztprof_no_regla = p_regla
                                                               AND SZTPROF_MATERIA = l_materias.clave_materia
                                                               AND sztprof_PIDM NOT IN ( SELECT sztconf_PIDM
                                                                                            FROM sztconf
                                                                                            WHERE 1 = 1
                                                                                            AND sztconf_no_regla = p_regla)
                                                               AND ROWNUM = 1
                                                               ORDER BY sztprof_materia,
                                                                        sztprof_ponde_apro DESC,
                                                                        sztprof_porcentaje_retencion DESC,
                                                                        sztprof_ponde_ciclos,
                                                                        sztprof_pidm;

                                                              DBMS_OUTPUT.PUT_LINE('Entra 27 ');

                                                           EXCEPTION WHEN OTHERS THEN
                                                               NULL;
                                                           END;

                                                           BEGIN

                                                                  SELECT sztcost_cost
                                                                  INTO l_monto_pago2
                                                                  FROM sztcost
                                                                  WHERE 1 = 1
                                                                  AND sztcost_num_groups =l_contar
                                                                  AND sztcost_levl_code  =l_materias.nivel
                                                                  AND sztcost_camp_code  =l_materias.campus
                                                                  AND sztcost_min_cupo <= l_alumnos_divide_uno
                                                                  AND sztcost_max_cupo >= l_alumnos_divide_uno
                                                                  AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                                                  AND sztcost_active='S';

                                                                  DBMS_OUTPUT.PUT_LINE('Entra 28 ');

                                                           EXCEPTION WHEN NO_DATA_FOUND THEN
                                                                 DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 2');

                                                           END;

                                                                INSERT INTO  SZTCONF VALUES(
                                                                                         l_materias.clave_materia,
                                                                                         l_contar,
                                                                                         c_prof.tope,
                                                                                         l_mejor_pidm,
                                                                                         l_monto_pago2,
                                                                                         'UTEL 12',
                                                                                         SYSDATE,
                                                                                         USER,
                                                                                         SYSDATE,
                                                                                         p_regla,
                                                                                         l_materias.periodicidad,
                                                                                         'N',
                                                                                         l_mejor_id,
                                                                                         p_fecha_inicio,
                                                                                         0,
                                                                                         null,
                                                                                         null
                                                                                     );
                                                        COMMIT;


                                                    ELSIF l_max_grupos_otr <= c_prof.max_grupo THEN

                                                        BEGIN

                                                                  SELECT sztcost_cost
                                                                  INTO l_monto_pago2
                                                                  FROM sztcost
                                                                  WHERE 1 = 1
                                                                  AND sztcost_num_groups = l_max_grupos_otr
                                                                  AND sztcost_levl_code  =l_materias.nivel
                                                                  AND sztcost_camp_code  =l_materias.campus
                                                                  AND sztcost_min_cupo <= l_alumnos_divide_uno
                                                                  AND sztcost_max_cupo >= l_alumnos_divide_uno
                                                                  AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                                                  AND sztcost_active='S';

                                                                  DBMS_OUTPUT.PUT_LINE('Entra 37 ');

                                                        EXCEPTION WHEN NO_DATA_FOUND THEN
                                                            DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 2  restante '||l_restante_grupo);
                                                        END;


                                                          INSERT INTO  SZTCONF VALUES(
                                                                                 l_materias.clave_materia,
                                                                                 l_max_grupos_otr,
                                                                                 c_prof.tope,
                                                                                 c_prof.prof_pidm,
                                                                                 l_monto_pago2,
                                                                                 USER,-- vuelta despues de las iteraciones para el residuo
                                                                                 SYSDATE,
                                                                                'UTEL 13',
                                                                                 SYSDATE,
                                                                                 p_regla,
                                                                                 l_materias.periodicidad,
                                                                                 'N',
                                                                                 c_prof.id_prof,
                                                                                 p_fecha_inicio,
                                                                                 0,
                                                                                 null,
                                                                                 null
                                                                             );

                                                       DBMS_OUTPUT.PUT_LINE('Entra 38 OTR '||l_max_grupos_otr||' prof '||c_prof.prof_pidm||' Total '||c_prof.tope);

                                                       commit;

                                                    END IF;

                                                    BEGIN

                                                        SELECT sum(sztconf_student_numb)
                                                        INTO l_total3
                                                        FROM SZTCONF
                                                        WHERE 1 = 1
                                                        AND sztconf_no_regla = p_regla
                                                        AND sztconf_subj_code = l_materias.clave_materia;

                                                        DBMS_OUTPUT.PUT_LINE('Entra 39 total '||l_total3);

                                                    EXCEPTION WHEN OTHERS THEN
                                                        NULL;
                                                    END;

                                                   l_total3:= l_materias.no_alumnos -l_total3;

                                                   l_numero_grupos2:=0;

                                                    DBMS_OUTPUT.PUT_LINE('Entra 100 total '||l_total3);




                                                        BEGIN

                                                            SELECT max(sztconf_group)+1
                                                            INTO l_max_grupos_otr
                                                            FROM sztconf
                                                            WHERE 1 = 1
                                                            AND sztconf_subj_code = l_materias.clave_materia
                                                            AND sztconf_no_regla  = p_regla;

                                                            DBMS_OUTPUT.PUT_LINE('Entra 40 total '||l_total3);

                                                        EXCEPTION WHEN OTHERS THEN
                                                            NULL;
                                                        END;

                                                        IF l_max_grupos_otr > c_prof.max_grupo then


                                                            l_contar:=l_contar+1;



                                                           BEGIN

                                                                SELECT sum(sztconf_student_numb)
                                                                INTO l_resta_grupo
                                                                FROM sztconf
                                                                WHERE 1 = 1
                                                                AND sztconf_no_regla =p_regla
                                                                AND sztconf_subj_code = l_materias.clave_materia;

                                                           EXCEPTION WHEN OTHERS THEN
                                                                NULL;
                                                           END;

                                                           l_INSERTa_faltante:=l_materias.no_alumnos-l_resta_grupo;

                                                           DBMS_OUTPUT.PUT_LINE('Faltante '||l_resta_grupo);

                                                           BEGIN

                                                              SELECT sztcost_cost
                                                              INTO l_monto_pago2
                                                              FROM sztcost
                                                              WHERE 1 = 1
                                                              AND sztcost_num_groups =l_contar
                                                              AND sztcost_levl_code  =l_materias.nivel
                                                              AND sztcost_camp_code  =l_materias.campus
                                                              AND sztcost_min_cupo <= l_INSERTa_faltante
                                                              AND sztcost_max_cupo >= l_INSERTa_faltante
                                                              AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                                              AND sztcost_active='S';

                                                           EXCEPTION WHEN NO_DATA_FOUND THEN

                                                                 DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 2');
                                                                 ROLLBACK;

                                                           END;

                                                           BEGIN

                                                               SELECT sztprof_pidm,
                                                                      sztprof_id
                                                               INTO l_mejor_pidm,
                                                                    l_mejor_id
                                                               FROM sztprof
                                                               WHERE 1 = 1
                                                               AND sztprof_no_regla = p_regla
                                                               AND sztprof_PIDM NOT IN ( SELECT sztconf_PIDM
                                                                                            FROM sztconf
                                                                                            WHERE 1 = 1
                                                                                            AND sztconf_no_regla = p_regla)
                                                               AND SZTPROF_MATERIA = l_materias.clave_materia
                                                               AND ROWNUM = 1
                                                               ORDER BY sztprof_materia,
                                                                        sztprof_ponde_apro DESC,
                                                                        sztprof_porcentaje_retencion DESC,
                                                                        sztprof_ponde_ciclos,
                                                                        sztprof_pidm;

                                                           EXCEPTION WHEN OTHERS THEN
                                                               NULL;
                                                           END;

                                                           DBMS_OUTPUT.PUT_LINE('resta '||l_resta_grupo);

                                                            INSERT INTO  SZTCONF VALUES(
                                                                                     l_materias.clave_materia,
                                                                                     l_contar,
                                                                                     l_INSERTa_faltante,
                                                                                     l_mejor_pidm,
                                                                                     l_monto_pago2,
                                                                                     'UTEL 14',
                                                                                     SYSDATE,
                                                                                     USER,
                                                                                     SYSDATE,
                                                                                     p_regla,
                                                                                     l_materias.periodicidad,
                                                                                     'N',
                                                                                     l_mejor_id,
                                                                                     p_fecha_inicio,
                                                                                     0,
                                                                                     null,
                                                                                     null
                                                                                 );

                                                        else

                                                            BEGIN

                                                                      SELECT sztcost_cost
                                                                      INTO l_monto_pago3
                                                                      FROM sztcost
                                                                      WHERE 1 = 1
                                                                      AND sztcost_num_groups = l_max_grupos_otr
                                                                      AND sztcost_levl_code  =l_materias.nivel
                                                                      AND sztcost_camp_code  =l_materias.campus
                                                                      AND sztcost_min_cupo <= l_total3
                                                                      AND sztcost_max_cupo >= l_total3
                                                                      AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                                                      AND sztcost_active='S';

                                                                DBMS_OUTPUT.PUT_LINE('Entra 41 ');

                                                            EXCEPTION WHEN NO_DATA_FOUND THEN

                                                                DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 2 --> ');
                                                                ROLLBACK;

                                                            END;

                                                            INSERT INTO  SZTCONF VALUES(
                                                                                     l_materias.clave_materia,
                                                                                     l_max_grupos_otr,
                                                                                     l_total3,
                                                                                     c_prof.prof_pidm,
                                                                                     l_monto_pago3,
                                                                                    'UTEL 15',
                                                                                     SYSDATE,
                                                                                     USER,
                                                                                     SYSDATE,
                                                                                     p_regla,
                                                                                     l_materias.periodicidad,
                                                                                     'N',
                                                                                     c_prof.id_prof,
                                                                                     p_fecha_inicio,
                                                                                     0,
                                                                                     null,
                                                                                     null
                                                                                 );

                                                            DBMS_OUTPUT.PUT_LINE('Entra 42  Maximo '||l_max_grupos_otr);

                                                            commit;
                                                        end IF;

                                                ELSIF  l_restante_grupo <= c_prof.tope AND l_max_grupos_otr > c_prof.max_grupo  THEN

                                                    DBMS_OUTPUT.PUT_LINE('Entra 42  restante '||l_restante_grupo);

                                                    l_contar :=nvl(l_contar,0)+1;

                                                    BEGIN

                                                            SELECT sztprof_pidm,
                                                                   sztprof_id
                                                            INTO l_mejor_pidm,
                                                                  l_mejor_id
                                                            FROM sztprof
                                                            WHERE 1 = 1
                                                            AND sztprof_no_regla = p_regla
                                                            AND sztprof_PIDM NOT IN ( SELECT sztconf_PIDM
                                                                                         FROM sztconf
                                                                                         WHERE 1 = 1
                                                                                         AND sztconf_no_regla = p_regla)
                                                            AND SZTPROF_MATERIA = l_materias.clave_materia
                                                            AND ROWNUM = 1
                                                            ORDER BY sztprof_materia,
                                                                     sztprof_ponde_apro DESC,
                                                                     sztprof_porcentaje_retencion DESC,
                                                                     sztprof_ponde_ciclos,
                                                                     sztprof_pidm;

                                                            DBMS_OUTPUT.PUT_LINE('Entra 43 ');

                                                    EXCEPTION WHEN OTHERS THEN
                                                        NULL;
                                                    END;

                                                    BEGIN
                                                        SELECT max(sztconf_group)+1
                                                                INTO l_max_grupos_otr
                                                                FROM sztconf
                                                                WHERE 1 = 1
                                                                AND sztconf_subj_code = l_materias.clave_materia
                                                                AND sztconf_no_regla  = p_regla;

                                                        DBMS_OUTPUT.PUT_LINE('Entra 44 ');

                                                    EXCEPTION WHEN OTHERS THEN
                                                        NULL;
                                                    END;

                                                    BEGIN

                                                            SELECT sztcost_cost
                                                            INTO l_monto_pago3
                                                            FROM sztcost
                                                            WHERE 1 = 1
                                                            AND sztcost_num_groups = l_contar
                                                            AND sztcost_levl_code  =l_materias.nivel
                                                            AND sztcost_camp_code  =l_materias.campus
                                                            AND sztcost_min_cupo <= l_restante_grupo
                                                            AND sztcost_max_cupo >= l_restante_grupo
                                                            AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                                            AND sztcost_active='S';

                                                            DBMS_OUTPUT.PUT_LINE('Entra 45 ');

                                                    EXCEPTION WHEN NO_DATA_FOUND THEN
                                                        DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago --> 210');
                                                    END;

                                                     INSERT INTO  SZTCONF VALUES(
                                                                                 l_materias.clave_materia,
                                                                                 l_contar,
                                                                                 l_restante_grupo,
                                                                                 l_mejor_pidm,
                                                                                 l_monto_pago3,
                                                                                 'UTEL 16',
                                                                                 SYSDATE,
                                                                                 USER,
                                                                                 SYSDATE,
                                                                                 p_regla,
                                                                                 l_materias.periodicidad,
                                                                                 'N',
                                                                                 l_mejor_id,
                                                                                 p_fecha_inicio,
                                                                                 0,
                                                                                 null,
                                                                                 null
                                                                         );
                                                  DBMS_OUTPUT.PUT_LINE('Entra 46');

                                                  commit;

                                                ELSIF  l_restante_grupo <= c_prof.tope /*AND l_max_grupos_otr <=  c_prof.max_grupo  THEN

                                                    DBMS_OUTPUT.PUT_LINE('Restante  '||l_restante_grupo||' Tope '||c_prof.tope||' max grupo '||l_max_grupos_otr||' prof grupo'|| c_prof.max_grupo);


                                                    BEGIN
                                                        SELECT max(sztconf_group)+1
                                                                INTO l_max_grupos_otr
                                                                FROM sztconf
                                                                WHERE 1 = 1
                                                                AND sztconf_subj_code = l_materias.clave_materia
                                                                AND sztconf_no_regla  = p_regla;

                                                        DBMS_OUTPUT.PUT_LINE('Entra 47 '||l_max_grupos_otr);

                                                    EXCEPTION WHEN OTHERS THEN
                                                        NULL;
                                                    END;

                                                    IF l_max_grupos_otr > c_prof.max_grupo then


                                                        l_contar:= l_contar +1;

                                                        BEGIN

                                                            SELECT sztprof_pidm,
                                                                   sztprof_id
                                                            INTO l_mejor_pidm,
                                                                 l_mejor_id
                                                            FROM sztprof
                                                            WHERE 1 = 1
                                                            AND sztprof_no_regla = p_regla
                                                            AND sztprof_PIDM NOT IN ( SELECT sztconf_PIDM
                                                                                         FROM sztconf
                                                                                         WHERE 1 = 1
                                                                                         AND sztconf_no_regla = p_regla)
                                                            AND SZTPROF_MATERIA = l_materias.clave_materia
                                                            AND ROWNUM = 1
                                                            ORDER BY sztprof_materia,
                                                                     sztprof_ponde_apro DESC,
                                                                     sztprof_porcentaje_retencion DESC,
                                                                     sztprof_ponde_ciclos,
                                                                     sztprof_pidm;

                                                        EXCEPTION WHEN OTHERS THEN
                                                            DBMS_OUTPUT.PUT_LINE('Entra 43 '||l_mejor_pidm);
                                                        END;

                                                        BEGIN

                                                            SELECT sztcost_cost
                                                            INTO l_monto_pago3
                                                            FROM sztcost
                                                            WHERE 1 = 1
                                                            AND sztcost_num_groups = l_contar
                                                            AND sztcost_levl_code  =l_materias.nivel
                                                            AND sztcost_camp_code  =l_materias.campus
                                                            AND sztcost_min_cupo <= l_restante_grupo
                                                            AND sztcost_max_cupo >= l_restante_grupo
                                                            AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                                            AND sztcost_active='S';

                                                            DBMS_OUTPUT.PUT_LINE('Entra 45 ');

                                                        EXCEPTION WHEN NO_DATA_FOUND THEN
                                                            DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago --> 210');
                                                        END;

                                                         INSERT INTO  SZTCONF VALUES(
                                                                                 l_materias.clave_materia,
                                                                                 l_contar,
                                                                                 l_restante_grupo,
                                                                                 l_mejor_pidm,
                                                                                 l_monto_pago3,
                                                                                 'UTEL 17',
                                                                                 SYSDATE,
                                                                                 USER,
                                                                                 SYSDATE,
                                                                                 p_regla,
                                                                                 l_materias.periodicidad,
                                                                                 'N',
                                                                                 l_mejor_id,
                                                                                 p_fecha_inicio,
                                                                                 0,
                                                                                 null,
                                                                                 null
                                                                                 );
                                                    end IF;

                                                    BEGIN

                                                            SELECT sztcost_cost
                                                            INTO l_monto_pago3
                                                            FROM sztcost
                                                            WHERE 1 = 1
                                                            AND sztcost_num_groups = l_contar
                                                            AND sztcost_levl_code  =l_materias.nivel
                                                            AND sztcost_camp_code  =l_materias.campus
                                                            AND sztcost_min_cupo <= l_restante_grupo
                                                            AND sztcost_max_cupo >= l_restante_grupo
                                                            AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                                            AND sztcost_active='S';

                                                            DBMS_OUTPUT.PUT_LINE('Entra 48 ');

                                                    EXCEPTION WHEN NO_DATA_FOUND THEN
                                                        DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago --> 215 ');
                                                    END;

                                                    IF  l_max_grupos_otr <=  c_prof.max_grupo  then

                                                        BEGIN
                                                            SELECT max(sztconf_group)+1
                                                                    INTO l_max_grupos_otr
                                                                    FROM sztconf
                                                                    WHERE 1 = 1
                                                                    AND sztconf_subj_code = l_materias.clave_materia
                                                                    AND sztconf_no_regla  = p_regla;

                                                            DBMS_OUTPUT.PUT_LINE('Entra 44 ');

                                                        EXCEPTION WHEN OTHERS THEN
                                                            NULL;
                                                        END;


                                                        BEGIN

                                                            SELECT sztcost_cost
                                                            INTO l_monto_pago3
                                                            FROM sztcost
                                                            WHERE 1 = 1
                                                            AND sztcost_num_groups = l_max_grupos_otr
                                                            AND sztcost_levl_code  =l_materias.nivel
                                                            AND sztcost_camp_code  =l_materias.campus
                                                            AND sztcost_min_cupo <= l_restante_grupo
                                                            AND sztcost_max_cupo >= l_restante_grupo
                                                            AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                                            AND sztcost_active='S';

                                                            DBMS_OUTPUT.PUT_LINE('Entra 48 ');

                                                        EXCEPTION WHEN NO_DATA_FOUND THEN
                                                            DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago --> 215 ');
                                                        END;


                                                     INSERT INTO  SZTCONF VALUES(
                                                                                 l_materias.clave_materia,
                                                                                 l_max_grupos_otr,
                                                                                 l_restante_grupo,
                                                                                 c_prof.prof_pidm,
                                                                                 l_monto_pago3,
                                                                                 'UTEL 18',
                                                                                 SYSDATE,
                                                                                 USER,
                                                                                 SYSDATE,
                                                                                 p_regla,
                                                                                 l_materias.periodicidad,
                                                                                 'N',
                                                                                 c_prof.id_prof,
                                                                                 p_fecha_inicio,
                                                                                 0,
                                                                                 null,
                                                                                 null
                                                                         );


                                                    ELSIF  l_max_grupos_otr > 4  THEN

                                                        DBMS_OUTPUT.PUT_LINE('Entra 1042  restante '||l_restante_grupo);

                                                        l_contar :=nvl(l_contar,0)+1;

                                                        BEGIN

                                                            SELECT sztprof_pidm,
                                                                   sztprof_id
                                                            INTO l_mejor_pidm,
                                                                 l_mejor_id
                                                            FROM sztprof
                                                            WHERE 1 = 1
                                                            AND sztprof_no_regla = p_regla
                                                            AND sztprof_PIDM NOT IN ( SELECT sztconf_PIDM
                                                                                         FROM sztconf
                                                                                         WHERE 1 = 1
                                                                                         AND sztconf_no_regla = p_regla)
                                                            AND SZTPROF_MATERIA = l_materias.clave_materia
                                                            AND ROWNUM = 1
                                                            ORDER BY sztprof_materia,
                                                                     sztprof_ponde_apro DESC,
                                                                     sztprof_porcentaje_retencion DESC,
                                                                     sztprof_ponde_ciclos,
                                                                     sztprof_pidm;

                                                            DBMS_OUTPUT.PUT_LINE('Entra 411 pidm '||l_mejor_pidm);

                                                            BEGIN

                                                                SELECT sztcost_cost
                                                                INTO l_monto_pago3
                                                                FROM sztcost
                                                                WHERE 1 = 1
                                                                AND sztcost_num_groups = l_contar
                                                                AND sztcost_levl_code  =l_materias.nivel
                                                                AND sztcost_camp_code  =l_materias.campus
                                                                AND sztcost_min_cupo <= l_restante_grupo
                                                                AND sztcost_max_cupo >= l_restante_grupo
                                                                AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                                                                AND sztcost_active='S';

                                                                DBMS_OUTPUT.PUT_LINE('Entra 49 ');

                                                            EXCEPTION WHEN NO_DATA_FOUND THEN

                                                                  DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago --> 210');
                                                                --  ROLLBACK;

                                                            END;

                                                             INSERT INTO  SZTCONF VALUES(
                                                                                         l_materias.clave_materia,
                                                                                         l_contar,
                                                                                         l_restante_grupo,
                                                                                         l_mejor_pidm,
                                                                                         l_monto_pago3,
                                                                                         'UTEL 19',
                                                                                         SYSDATE,
                                                                                         USER,
                                                                                         SYSDATE,
                                                                                         p_regla,
                                                                                         l_materias.periodicidad,
                                                                                         'N',
                                                                                         l_mejor_id,
                                                                                         p_fecha_inicio,
                                                                                         0,
                                                                                         null,
                                                                                         null
                                                                                 );
                                                              DBMS_OUTPUT.PUT_LINE('Entra 50');

                                                              commit;

                                                        EXCEPTION WHEN OTHERS THEN
                                                            NULL;
                                                        END;

                                                    end IF;



                                                END IF;

                                            END IF;

                                        ELSE
                                            DBMS_OUTPUT.PUT_LINE('Entra 51 ');

                                            BEGIN
                                                SELECT max(sztconf_group)+1
                                                INTO l_maximo_grupo
                                                FROM SZTCONF
                                                WHERE 1 = 1
                                                AND sztconf_no_regla =p_regla
                                                AND sztconf_subj_code = l_materias.clave_materia;

                                                DBMS_OUTPUT.PUT_LINE('Entra 52 ');

                                            EXCEPTION WHEN OTHERS THEN
                                                NULL;
                                            END;

                                            INSERT INTO  SZTCONF VALUES(
                                                                         l_materias.clave_materia,
                                                                         l_maximo_grupo,
                                                                         l_restante_grupo,
                                                                         c_prof.prof_pidm,
                                                                         l_monto_pago,
                                                                         'UTEL 20',
                                                                         SYSDATE,
                                                                         USER,
                                                                         SYSDATE,
                                                                         p_regla,
                                                                         l_materias.periodicidad,
                                                                         'N',
                                                                         c_prof.id_prof,
                                                                         p_fecha_inicio,
                                                                         0,
                                                                         null,
                                                                         null
                                                                         );
                                            commit;
                                            DBMS_OUTPUT.PUT_LINE('Entra 53 ');


                                        END IF;

                                    END IF;

                                END IF;

                            END IF;

                        END IF;

                        IF c_prof.TOPE > l_materias.no_alumnos THEN

                            DBMS_OUTPUT.PUT_LINE('Entra 54 TOPE '||c_prof.TOPE||' No Materias '||l_materias.no_alumnos);

                           EXIT;

                        ELSIF c_prof.tope < l_materias.no_alumnos AND l_restante > 0 THEN

                            DBMS_OUTPUT.PUT_LINE('Entra 55 ');

                           BEGIN

                            SELECT MAX(sztconf_group)+1
                            INTO l_grupo_max
                            FROM sztconf
                            WHERE 1 = 1
                            AND sztconf_pidm = c_prof.prof_pidm
                            AND sztconf_no_regla = p_regla;

                            DBMS_OUTPUT.PUT_LINE('Entra 56');

                           EXCEPTION WHEN OTHERS THEN
                                l_grupo_max:=1;
                           END;

                            BEGIN

                              SELECT sztcost_cost
                              INTO l_monto_pago2
                              FROM sztcost
                              WHERE 1 = 1
                              AND sztcost_num_groups = 1
                              AND sztcost_levl_code  =l_materias.nivel
                              AND sztcost_camp_code  =l_materias.campus
                              AND sztcost_min_cupo <= l_restante
                              AND sztcost_max_cupo >= l_restante
                              AND SZTCOST_RMT_CODE=   l_materias.periodicidad
                              AND sztcost_active='S';

                              DBMS_OUTPUT.PUT_LINE('Entra 57');

                            EXCEPTION WHEN NO_DATA_FOUND THEN

                                 DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 3 '||l_grupo_max);

                            END;

                            IF l_monto_tope < l_restante  THEN

                                IF l_monto_tope> 0 then

                                    INSERT INTO  SZTCONF VALUES(
                                                                  l_materias.clave_materia,
                                                                  l_grupo_max,
                                                                  l_monto_tope,
                                                                  c_prof.prof_pidm,
                                                                  l_monto_pago2,
                                                                  'UTEL 21',
                                                                  SYSDATE,
                                                                  USER,
                                                                  SYSDATE,
                                                                  p_regla,
                                                                  l_materias.periodicidad,
                                                                  'N',
                                                                  c_prof.id_prof,
                                                                  p_fecha_inicio,
                                                                  0,
                                                                  null,
                                                                  null
                                                                 );
                                    COMMIT;
                                END IF;

                                DBMS_OUTPUT.PUT_LINE('Entra 58');

                                BEGIN

                                    SELECT SUM(SZTCONF_STUDENT_NUMB)
                                    INTO l_restante2
                                    FROM SZTCONF
                                    WHERE 1 = 1
                                    AND SZTCONF_NO_REGLA =p_regla
                                    AND SZTCONF_SUBJ_CODE = l_materias.clave_materia;

                                    DBMS_OUTPUT.PUT_LINE('Entra 59');

                                EXCEPTION WHEN OTHERS THEN
                                        NULL;
                                END;

                                l_total_restante:= nvl(l_monto_tope,0) + l_restante2;

                            ELSIF l_restante2 < l_monto_tope then

                                DBMS_OUTPUT.PUT_LINE('Entra 55');

                                 INSERT INTO  SZTCONF VALUES(
                                                              l_materias.clave_materia,
                                                              l_grupo_max,
                                                              l_restante,
                                                              c_prof.prof_pidm,
                                                              l_monto_pago2,
                                                              'UTEL 22',
                                                              SYSDATE,
                                                              USER,
                                                              SYSDATE,
                                                              p_regla,
                                                              l_materias.periodicidad,
                                                              'N',
                                                              c_prof.id_prof,
                                                              p_fecha_inicio,
                                                              0,
                                                              null,
                                                              null
                                                             );
                                commit;


                                l_total_restante:= nvl(l_monto_tope,0) + l_restante;

                            END IF;

                            DBMS_OUTPUT.PUT_LINE('tope '||l_monto_tope||' Restante '||l_restante);

                            IF l_monto_tope < l_restante2 THEN

                                DBMS_OUTPUT.PUT_LINE('Entra 60');

                                l_resta_final :=l_materias.no_alumnos- l_restante2;

                                BEGIN

                                    SELECT MAX(sztconf_group)+1
                                    INTO l_grupo_max_final
                                    FROM SZTCONF
                                    WHERE 1 = 1
                                    AND sztconf_pidm = c_prof.prof_pidm
                                    AND sztconf_no_regla = p_regla;

                                      DBMS_OUTPUT.PUT_LINE('Entra 61');

                                EXCEPTION WHEN NO_DATA_FOUND THEN
                                         l_numero_grupos:=1;
                                END;

                                BEGIN

                                      SELECT sztcost_cost,
                                             sztcost_maximo_alumnos
                                      INTO l_monto_pago,
                                           l_maximo_alumno
                                      FROM sztcost
                                      WHERE 1 = 1
                                      AND sztcost_num_groups = l_numero_grupos
                                      AND sztcost_levl_code  =l_materias.nivel
                                      AND sztcost_camp_code  =l_materias.campus
                                      AND sztcost_min_cupo <= l_restante
                                      AND sztcost_max_cupo >= l_restante
                                      AND SZTCOST_RMT_CODE=l_materias.periodicidad
                                      AND sztcost_active='S';

                                        DBMS_OUTPUT.PUT_LINE('Entra 62');

                                EXCEPTION WHEN NO_DATA_FOUND THEN

                                    DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago no  grupo '||l_numero_grupos||' nivel '||l_materias.nivel||' campus '||l_materias.campus||' montos '||l_resta_final);
                                    ROLLBACK;

                                END;

                                IF l_resta_final> 0 then
                                  INSERT INTO  SZTCONF VALUES(
                                                              l_materias.clave_materia,
                                                              l_grupo_max_final,
                                                              l_resta_final,
                                                              c_prof.prof_pidm,
                                                              l_monto_pago2,
                                                              'UTEL 23',
                                                              SYSDATE,
                                                              USER,
                                                              SYSDATE,
                                                              p_regla,
                                                              l_materias.periodicidad,
                                                              'N',
                                                              c_prof.id_prof,
                                                              p_fecha_inicio,
                                                              0,
                                                              null,
                                                              null
                                                             );

                                                            DBMS_OUTPUT.PUT_LINE('Entra 63');
                                    commit;
                                end IF;
                            END IF;

                        END IF;

                    END LOOP;

            END LOOP;

            COMMIT;

                    FOR c_falta in ( SELECT sum (x.no_alumnos) no_alumnos, x.clave_materia, x.periodicidad, SZTMACO_CAMP_CODE campus , SZTMACO_LEVL_CODE nivel
                                        FROM (
                                        SELECT   COUNT(ra.sztprono_id) no_alumnos,
                                                                 ra.sztprono_materia_legal clave_materia,
                                                                 DECODE(sd.sztdtec_periodicidad,1,'B',2,'C',3,'S',4,'A') periodicidad
                                                            FROM sztprono ra,
                                                                 rel_programaxalumno rp,
                                                                 sztdtec  sd
                                                            WHERE 1 = 1
                                                            AND sztprono_no_regla = p_regla
                                                            AND ra.sztprono_pidm = rp.sgbstdn_pidm
                                                            AND ra.sztprono_program = rp.programa
                                                            AND rp.programa = sd.sztdtec_program
                                                            AND rp.periodo_catalogo= sd.sztdtec_term_code
                                                            AND ra.sztprono_materia_legal NOT IN (SELECT sztconf_subj_code
                                                                                                  FROM sztconf
                                                                                                  WHERE sztconf_no_regla= p_regla)
                                                            GROUP BY ra.sztprono_materia_legal,
                                                                     sd.sztdtec_periodicidad
                                                            ORDER BY 1,clave_materia) x, sztmaco
                                        WHERE 1 = 1
                                       AND SZTMACO_MATPADRE =  x.clave_materia
                                        AND SZTMACO_MATHIJO =  x.clave_materia
                                        group  by x.clave_materia , x.periodicidad, SZTMACO_CAMP_CODE, SZTMACO_LEVL_CODE )
            LOOP

               BEGIN

                 SELECT nvl(COUNT(*),1)+1
                 INTO l_numero_grupos
                 FROM sztconf
                 WHERE 1 = 1
                 AND sztconf_rmt_code = c_falta.periodicidad
                 AND sztconf_PIDM = NULL
                 AND sztconf_no_regla = p_regla;

               EXCEPTION WHEN NO_DATA_FOUND THEN
                     l_numero_grupos:=1;
               END;


               BEGIN

                  SELECT sztcost_cost,
                         sztcost_maximo_alumnos
                  INTO l_monto_pago,
                       l_maximo_alumno
                  FROM sztcost
                  WHERE 1 = 1
                  AND sztcost_num_groups = l_numero_grupos
                  AND sztcost_levl_code  =c_falta.nivel
                  AND sztcost_camp_code  =c_falta.campus
                  AND sztcost_min_cupo <= c_falta.no_alumnos
                  AND sztcost_max_cupo >=c_falta.no_alumnos
                  AND SZTCOST_RMT_CODE=c_falta.periodicidad
                  AND sztcost_active='S';



               EXCEPTION WHEN NO_DATA_FOUND THEN


                     DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago 1 '||c_falta.clave_materia);
                     ROLLBACK;

               END;

              BEGIN
                  SELECT sztconf_student_numb
                  INTO vl_resta
                  FROM sztconf
                  WHERE 1 = 1
                  AND sztconf_subj_code = c_falta.clave_materia
                  AND sztconf_no_regla  = p_regla;

              EXCEPTION
                  WHEN  OTHERS THEN
                   vl_resta :=0;
              END;

              l_monto_tope := c_falta.no_alumnos - vl_resta;

                 INSERT INTO  SZTCONF VALUES(
                                                   c_falta.clave_materia,
                                                   l_numero_grupos,
                                                   l_monto_tope,
                                                   NULL,
                                                   l_monto_pago,
                                                   'FALTA',
                                                   SYSDATE,
                                                   USER,
                                                   SYSDATE,
                                                   p_regla,
                                                   c_falta.periodicidad,
                                                   'N',
                                                   null,
                                                   p_fecha_inicio,
                                                   0,
                                                   null,
                                                   null
                                                  );
               DBMS_OUTPUT.PUT_LINE('Entra 10000');


            END LOOP;


        END IF;

        --currsor para actualizar costos


--        for c in(SELECT MAX(SZTCONF_GROUP) grupos,
--                   sztconf_pidm prof_pidm,
--                   sztconf_no_regla regla
--                   FROM sztconf
--            WHERE 1 = 1
--            AND sztconf_no_regla = p_regla
--            GROUP BY sztconf_pidm ,
--                     sztconf_no_regla
--            )
--        loop
--
--            IF c.grupos > 1 then
--
--
--               BEGIN
--                    SELECT DISTINCT SZTALGO_CAMP_CODE,
--                                    SZTALGO_LEVL_CODE
--                    INTO l_campus,
--                         l_nivel
--                    FROM SZTALGO
--                    WHERE 1 = 1
--                    AND SZTALGO_NO_REGLA  = p_regla
--                    AND ROWNUM = 1;
--
--                    IF l_campus ='UTS' THEN
--
--                        l_campus:='UTL';
--
--                    END IF;
--
--                    IF l_nivel ='MS' THEN
--
--                        l_nivel:='MA';
--
--                    END IF;
--
--               EXCEPTION WHEN OTHERS THEN
--                l_nivel:='UTL';
--               END;
--
--               for d in (SELECT SZTCONF_GROUP grupos,
--                               sztconf_pidm prof_pidm,
--                               SZTCONF_SUBJ_CODE materia,
--                               SZTCONF_STUDENT_NUMB alumnos,
--                               SZTCONF_RMT_CODE periodicidad
--                        FROM sztconf
--                        WHERE 1 = 1
--                        AND sztconf_no_regla = p_regla
--                            )loop
--
--                              BEGIN
--
--                                SELECT SZTCOST_COST
--                                INTO l_costo_final
--                                FROM SZTCOST
--                                WHERE 1 = 1
--                                AND SZTCOST_NUM_GROUPS = c.grupos
--                                AND sztcost_levl_code =l_nivel
--                                AND sztcost_camp_code =l_campus
--                                AND sztcost_min_cupo <= d.alumnos
--                                AND sztcost_max_cupo >= d.alumnos
--                                AND SZTCOST_RMT_CODE = d.periodicidad
--                                AND sztcost_active='S';
--
--                              EXCEPTION WHEN NO_DATA_FOUND THEN
--
--                                     DBMS_OUTPUT.PUT_LINE('No se ecnontro ningun dato para obtener el costo de pago final '||d.materia);
--                                     --ROLLBACK;
--                                     null;
--
--                              END;
--
--                                update sztconf set SZTCONF_COST= l_costo_final
--                                WHERE 1 = 1
--                                AND sztconf_pidm =C.prof_pidm
--                                AND sztconf_student_numb = d.alumnos
--                                AND sztconf_no_regla = c.regla;
--
--
--                           END LOOP;
--
--
--
--
--            end IF;
--
--        END LOOP;

        COMMIT;*/
      l_tope            number;
    l_sobrecupo       number:=0;
    l_numero_alumnos  number;
    l_maximo_prof     number;
    l_numero_grupos   number;
    l_campus          varchar2(100);
    l_nivel          varchar2(100);
    l_monto_pago     number(10,2);
    l_contar         number:=0;
    l_maximo_grupo   number;
    l_total_alumnos  number;
    l_total_restante number;
    l_grupo_minimo   number;
    l_maximo_gprof   number;
    l_grupos_x_prof  number;
    l_alumnos_divde number;
    l_mod            number;
    l_actualiza      number;
    l_max_prof       number;
    l_maximo_sobrecupo number;
    l_cupo_extra     number;
    l_max_grupo      number;
    l_restante       number;
    BEGIN


        dbms_output.put_line('entra 1');

        BEGIN
            SELECT distinct SZTALGO_TOPE_ALUMNOS,SZTALGO_SOBRECUPO_ALUMNOS,4 maximo,SZTALGO_CAMP_CODE campus, SZTALGO_LEVL_CODE nivel
            INTO l_tope,l_sobrecupo,l_maximo_prof,l_campus,l_nivel
            FROM sztalgo
            WHERE 1 = 1
            AND sztalgo_no_regla = p_regla
            AND ROWNUM = 1;
        exception when others then
            l_tope:=60;
            l_sobrecupo:=10;
        end;

        IF l_campus ='UTS' then

            l_campus :='UTL';
            l_nivel :='MA';

        end IF;

        IF l_nivel ='MA' then

            BEGIN

                DELETE sztconf
                WHERE 1 = 1
                AND sztconf_no_regla = p_regla;
                --AND to_char(to_date(sztconf_FECHA_INICIO,'DD/MM/YYYY'),'DD/MM/YYYY')= p_fecha_inicio;
                COMMIT;


            END;

        else

                DELETE sztconf
                WHERE 1 = 1
                AND sztconf_no_regla = p_regla
                AND to_char(to_date(sztconf_FECHA_INICIO,'DD/MM/YYYY'),'DD/MM/YYYY')= p_fecha_inicio;
                COMMIT;


       end IF;


       dbms_output.put_line('entra 2');


        for c in (SELECT no_alumnos,
                       clave_materia,
                       decode(periodicidad,'Continuo','C','Regular','B')periodicidad
                 FROM(
                        SELECT COUNT(ra.sztprono_id) no_alumnos,
                               ra.sztprono_materia_legal clave_materia,
                              (SELECT distinct SZTALGO_TIPO_CARGA
                              FROM sztalgo
                              WHERE 1 = 1
                              AND sztalgo_no_regla = p_regla) periodicidad
                        FROM sztprono ra
                        WHERE 1 = 1
                        AND sztprono_no_regla = p_regla
                        AND SZTPRONO_FECHA_INICIO = p_fecha_inicio
--                        AND sztprono_materia_legal ='M2AN103'
                        group by ra.sztprono_materia_legal
                    )
                    order by 1 desc
        )loop

            l_contar:=0;
            --l_tope:=0;


            FOR c_prof IN (SELECT     DISTINCT sztprof_pidm prof_pidm,
                                                  sztprof_id id_prof,
                                                  sztprof_id matricula,
                                                  sztprof_no_grupos max_grupo,
                                                  sztprof_cupo tope,
                                                  sztprof_materia materia,
                                                  sztprof_ponde_apro,
                                                  sztprof_porcentaje_retencion,
                                                  sztprof_ponde_ciclos
                                                  ,sztprof_idioma idioma
                                            FROM sztprof
                                            WHERE 1 = 1
                                            AND sztprof_no_regla = p_regla
                                            AND sztprof_materia = c.clave_materia
                                            ORDER BY sztprof_materia)
                    loop
                           l_contar:=l_contar+1;




                           l_numero_grupos:=round(c.no_alumnos/l_tope)-1;

                            IF l_numero_grupos <=0 then

                                l_numero_grupos:=1;

                            end IF;

                            IF c.no_alumnos  <=  l_tope THEN



                                 l_monto_pago:=f_get_mont(
                                                            p_no_grupos       =>  l_numero_grupos,
                                                            p_lvl_code        =>  l_nivel,
                                                            p_camp_code       =>  l_campus,
                                                            p_min_cupo        =>  c.no_alumnos,
                                                            p_max_cupo        =>  c.no_alumnos,
                                                            p_rtm_code        =>  c.periodicidad
                                                         );

                                 BEGIN
                                     SELECT COUNT(SZTCONF_GROUP)+1
                                     INTO l_maximo_grupo
                                     FROM sztconf
                                     WHERE 1 = 1
                                     AND sztconf_no_regla = p_regla
                                     AND sztconf_subj_code=c.clave_materia;

                                 exception when others then
                                     null;
                                 end;

                                 INSERT INTO  SZTCONF VALUES(
                                                              c.clave_materia,
                                                              l_maximo_grupo,
                                                              c.no_alumnos,
                                                              c_prof.prof_pidm,
                                                              l_monto_pago,
                                                              'entra 1',
                                                              SYSDATE,
                                                              USER,
                                                              SYSDATE,
                                                              p_regla,
                                                              c.periodicidad,
                                                              'N',
                                                              c_prof.id_prof,
                                                              p_fecha_inicio,
                                                              0,
                                                              null,
                                                              l_numero_grupos, c_prof.idioma
                                                             );

                               BEGIN

                                  SELECT sum(SZTCONF_STUDENT_NUMB)
                                  INTO l_total_alumnos
                                  FROM sztconf
                                  WHERE 1 = 1
                                  AND sztconf_no_regla = p_regla
                                  AND sztconf_subj_code=c.clave_materia;

                               EXCEPTION WHEN OTHERS THEN
                                  NULL;
                               END;

                               l_total_restante:=c.no_alumnos-l_total_alumnos;

                               exit when l_contar = 1;

                            elsIF  c.no_alumnos  >  l_tope THEN

--                               dbms_output.put_line(' Materias '||c.clave_materia);

                                BEGIN

                                   SELECT nvl(sum(SZTCONF_STUDENT_NUMB),0)
                                   INTO l_total_alumnos
                                   FROM sztconf
                                   WHERE 1 = 1
                                   AND sztconf_no_regla = p_regla
                                   AND sztconf_subj_code=c.clave_materia;

                                EXCEPTION WHEN OTHERS THEN
                                   NULL;
                                END;

                                l_total_restante:=c.no_alumnos-l_total_alumnos;

                                IF l_numero_grupos<= l_maximo_prof  then

                                     IF c.no_alumnos <= l_tope then

                                         for i in 1..l_numero_grupos loop

                                             BEGIN

                                                  SELECT sum(SZTCONF_STUDENT_NUMB)
                                                  INTO l_total_alumnos
                                                  FROM sztconf
                                                  WHERE 1 = 1
                                                  AND sztconf_no_regla = p_regla
                                                  AND sztconf_subj_code= c.clave_materia;

                                             EXCEPTION WHEN OTHERS THEN
                                                 NULL;
                                             END;

                                             l_total_restante:=c.no_alumnos-l_total_alumnos;

                                             exit when   l_total_restante <  l_tope;


                                             BEGIN
                                                 SELECT COUNT(SZTCONF_GROUP)+1
                                                 INTO l_maximo_grupo
                                                 FROM sztconf
                                                 WHERE 1 = 1
                                                 AND sztconf_no_regla = p_regla
                                                 AND sztconf_subj_code=c.clave_materia;

                                             exception when others then
                                                 null;
                                             end;



                                             l_monto_pago:=f_get_mont(
                                                             p_no_grupos       =>  i,
                                                             p_lvl_code        =>  l_nivel,
                                                             p_camp_code       =>  l_campus,
                                                             p_min_cupo        =>  c.no_alumnos,
                                                             p_max_cupo        =>  c.no_alumnos,
                                                             p_rtm_code        =>  c.periodicidad
                                                          );

                                             INSERT INTO  SZTCONF VALUES(
                                                                       c.clave_materia,
                                                                       l_maximo_grupo,
                                                                       l_tope          ,
                                                                       c_prof.prof_pidm,
                                                                       l_monto_pago,
                                                                       'entra 2',
                                                                       SYSDATE,
                                                                       USER,
                                                                       SYSDATE,
                                                                       p_regla,
                                                                       c.periodicidad,
                                                                       'N',
                                                                       c_prof.id_prof,
                                                                       p_fecha_inicio,
                                                                       0,
                                                                       null,
                                                                       i, c_prof.idioma
                                                                      );


                                         END LOOP;

                                     elsIF c.no_alumnos > l_tope then

                                         l_numero_grupos:=round(c.no_alumnos/l_tope);

                                         IF l_numero_grupos <= l_maximo_prof then

                                             --dbms_output.put_line(' Materias '||c.clave_materia||' No grupos '||l_numero_grupos||' tope '||l_tope);

                                             for i in 1..l_numero_grupos loop

                                                 BEGIN

                                                      SELECT sum(SZTCONF_STUDENT_NUMB)
                                                      INTO l_total_alumnos
                                                      FROM sztconf
                                                      WHERE 1 = 1
                                                      AND sztconf_no_regla = p_regla
                                                      AND sztconf_subj_code= c.clave_materia;

                                                 EXCEPTION WHEN OTHERS THEN
                                                     NULL;
                                                 END;

                                                 l_total_restante:=c.no_alumnos-l_total_alumnos;

                                                 exit when   l_total_restante <  l_tope;


                                                 BEGIN
                                                     SELECT COUNT(SZTCONF_GROUP)+1
                                                     INTO l_maximo_grupo
                                                     FROM sztconf
                                                     WHERE 1 = 1
                                                     AND sztconf_no_regla = p_regla
                                                     AND sztconf_subj_code=c.clave_materia;

                                                 exception when others then
                                                     null;
                                                 end;



                                                 l_monto_pago:=f_get_mont(
                                                                 p_no_grupos       =>  i,
                                                                 p_lvl_code        =>  l_nivel,
                                                                 p_camp_code       =>  l_campus,
                                                                 p_min_cupo        =>  c.no_alumnos,
                                                                 p_max_cupo        =>  c.no_alumnos,
                                                                 p_rtm_code        =>  c.periodicidad
                                                              );

                                                 INSERT INTO  SZTCONF VALUES(
                                                                           c.clave_materia,
                                                                           l_maximo_grupo,
                                                                           l_tope          ,
                                                                           c_prof.prof_pidm,
                                                                           l_monto_pago,
                                                                           'entra 3',
                                                                           SYSDATE,
                                                                           USER,
                                                                           SYSDATE,
                                                                           p_regla,
                                                                           c.periodicidad,
                                                                           'N',
                                                                           c_prof.id_prof,
                                                                           p_fecha_inicio,
                                                                           0,
                                                                           null,
                                                                           i, c_prof.idioma
                                                                          );

                                             END LOOP;

                                         elsIF l_numero_grupos > l_maximo_prof then


                                            for i in 1..l_maximo_prof loop

                                                 BEGIN

                                                      SELECT sum(SZTCONF_STUDENT_NUMB)
                                                      INTO l_total_alumnos
                                                      FROM sztconf
                                                      WHERE 1 = 1
                                                      AND sztconf_no_regla = p_regla
                                                      AND sztconf_subj_code= c.clave_materia;

                                                 EXCEPTION WHEN OTHERS THEN
                                                     NULL;
                                                 END;

                                                 l_total_restante:=c.no_alumnos-l_total_alumnos;

                                                 exit when   l_total_restante <  l_tope;


                                                 BEGIN
                                                     SELECT COUNT(SZTCONF_GROUP)+1
                                                     INTO l_maximo_grupo
                                                     FROM sztconf
                                                     WHERE 1 = 1
                                                     AND sztconf_no_regla = p_regla
                                                     AND sztconf_subj_code=c.clave_materia;

                                                 exception when others then
                                                     null;
                                                 end;



                                                 l_monto_pago:=f_get_mont(
                                                                 p_no_grupos       =>  i,
                                                                 p_lvl_code        =>  l_nivel,
                                                                 p_camp_code       =>  l_campus,
                                                                 p_min_cupo        =>  c.no_alumnos,
                                                                 p_max_cupo        =>  c.no_alumnos,
                                                                 p_rtm_code        =>  c.periodicidad
                                                              );

                                                 INSERT INTO  SZTCONF VALUES(
                                                                           c.clave_materia,
                                                                           l_maximo_grupo,
                                                                           l_tope          ,
                                                                           c_prof.prof_pidm,
                                                                           l_monto_pago,
                                                                           'entra 3',
                                                                           SYSDATE,
                                                                           USER,
                                                                           SYSDATE,
                                                                           p_regla,
                                                                           c.periodicidad,
                                                                           'N',
                                                                           c_prof.id_prof,
                                                                           p_fecha_inicio,
                                                                           0,
                                                                           null,
                                                                           i, c_prof.idioma
                                                                          );

                                             END LOOP;


                                         end IF;

                                     end IF;

                                elsIF l_numero_grupos > l_maximo_prof then

                                     for i in 1..l_maximo_prof loop

                                         BEGIN

                                              SELECT sum(SZTCONF_STUDENT_NUMB)
                                              INTO l_total_alumnos
                                              FROM sztconf
                                              WHERE 1 = 1
                                              AND sztconf_no_regla = p_regla
                                              AND sztconf_subj_code= c.clave_materia;

                                         EXCEPTION WHEN OTHERS THEN
                                             NULL;
                                         END;

                                        l_total_restante:=c.no_alumnos-l_total_alumnos;

                                        exit when   l_total_restante <  l_tope;


                                         BEGIN
                                             SELECT COUNT(SZTCONF_GROUP)+1
                                             INTO l_maximo_grupo
                                             FROM sztconf
                                             WHERE 1 = 1
                                             AND sztconf_no_regla = p_regla
                                             AND sztconf_subj_code=c.clave_materia;

                                         exception when others then
                                             null;
                                         end;

                                          l_monto_pago:=f_get_mont(
                                                         p_no_grupos       =>  i,
                                                         p_lvl_code        =>  l_nivel,
                                                         p_camp_code       =>  l_campus,
                                                         p_min_cupo        =>  c.no_alumnos,
                                                         p_max_cupo        =>  c.no_alumnos,
                                                         p_rtm_code        =>  c.periodicidad
                                                      );

                                         INSERT INTO  SZTCONF VALUES(
                                                                   c.clave_materia,
                                                                   l_maximo_grupo,
                                                                   l_tope          ,
                                                                   c_prof.prof_pidm,
                                                                   l_monto_pago,
                                                                   'entra 4',
                                                                   SYSDATE,
                                                                   USER,
                                                                   SYSDATE,
                                                                   p_regla,
                                                                   c.periodicidad,
                                                                   'N',
                                                                   c_prof.id_prof,
                                                                   p_fecha_inicio,
                                                                   0,
                                                                   null,
                                                                   i, c_prof.idioma
                                                                  );


                                     END LOOP;


                                end IF;


                            end IF;


                    END LOOP;

            BEGIN

                 SELECT nvl(sum(SZTCONF_STUDENT_NUMB),0)
                 INTO l_total_alumnos
                 FROM sztconf
                 WHERE 1 = 1
                 AND sztconf_no_regla = p_regla
                 AND sztconf_subj_code= c.clave_materia;

            EXCEPTION WHEN OTHERS THEN
                NULL;
            END;

            l_total_restante:=c.no_alumnos-l_total_alumnos;

            IF l_total_restante > 0 AND l_total_restante <=  l_tope then

                l_mod:= MOD(l_total_restante,2);

                l_numero_grupos:=0;

                SELECT COUNT(*)
                INTO l_numero_grupos
                FROM sztconf
                WHERE 1 = 1
                AND sztconf_no_regla = p_regla
                AND sztconf_subj_code = c.clave_materia;

                IF l_mod = 0 then



                    l_alumnos_divde :=round(l_numero_grupos/l_total_restante);

                    for x in (SELECT SZTCONF_STUDENT_NUMB no_alumnos,
                                    SZTCONF_GROUP grupo,
                                    sztconf_id id,
                                    sztconf_pidm pidm
                                    ,sztconf_idioma idioma
                             FROM sztconf
                             WHERE 1 = 1
                             AND sztconf_no_regla = p_regla
                             AND sztconf_subj_code = c.clave_materia
                             AND SZTCONF_GROUP <= l_total_restante )
                             loop

                                l_contar:=l_contar+1;


                                l_actualiza:=round(x.no_alumnos+1);

                                l_monto_pago:=f_get_mont(
                                                                p_no_grupos       =>  l_contar,
                                                                p_lvl_code        =>  l_nivel,
                                                                p_camp_code       =>  l_campus,
                                                                p_min_cupo        =>  l_actualiza,
                                                                p_max_cupo        =>  l_actualiza,
                                                                p_rtm_code        =>  c.periodicidad
                                                             );

                                UPDATE SZTCONF set SZTCONF_STUDENT_NUMB =l_actualiza,
                                                   SZTCONF_USSER_INSERT ='actualiza 1'
                                WHERE 1 = 1
                                AND sztconf_no_regla = p_regla
                                AND sztconf_subj_code = c.clave_materia
                                AND sztconf_group = x.grupo;

                                BEGIN

                                 SELECT nvl(sum(SZTCONF_STUDENT_NUMB),0)
                                 INTO l_total_alumnos
                                 FROM sztconf
                                 WHERE 1 = 1
                                 AND sztconf_no_regla = p_regla
                                 AND sztconf_subj_code= c.clave_materia;

                             EXCEPTION WHEN OTHERS THEN
                                NULL;
                             END;

                             l_total_restante:=c.no_alumnos-l_total_alumnos;



                                 IF l_total_restante > 0  then


                                    IF l_total_restante > l_sobrecupo then


                                        BEGIN
                                            SELECT COUNT(SZTCONF_GROUP)+1
                                            INTO l_maximo_grupo
                                            FROM sztconf
                                            WHERE 1 = 1
                                            AND sztconf_no_regla = p_regla
                                            AND sztconf_subj_code=c.clave_materia;

                                        exception when others then
                                            null;
                                        end;

                                        BEGIN
                                            SELECT COUNT(SZTCONF_GROUP)+1
                                            INTO l_max_prof
                                            FROM sztconf
                                            WHERE 1 = 1
                                            AND sztconf_no_regla = p_regla
                                            AND sztconf_subj_code=c.clave_materia;

                                        exception when others then
                                            null;
                                        end;



                                        l_monto_pago:=f_get_mont(
                                                        p_no_grupos       =>  l_max_prof,
                                                        p_lvl_code        =>  l_nivel,
                                                        p_camp_code       =>  l_campus,
                                                        p_min_cupo        =>  c.no_alumnos,
                                                        p_max_cupo        =>  c.no_alumnos,
                                                        p_rtm_code        =>  c.periodicidad
                                                     );

                                        INSERT INTO  SZTCONF VALUES(
                                                                       c.clave_materia,
                                                                       l_maximo_grupo,
                                                                       l_total_restante          ,
                                                                       x.pidm,
                                                                       l_monto_pago,
                                                                       'entra 4',
                                                                       SYSDATE,
                                                                       USER,
                                                                       SYSDATE,
                                                                       p_regla,
                                                                       c.periodicidad,
                                                                       'N',
                                                                       x.id,
                                                                       p_fecha_inicio,
                                                                       0,
                                                                       null,
                                                                       l_maximo_grupo, x.idioma
                                                                      );

                                       end IF;
                                end IF;

                             END LOOP;



--                                    dbms_output.put_line(' Materia '||c.clave_materia||' Restante '||l_total_restante||' total alumnos '||c.no_alumnos);

--
                elsIF l_mod > 0 then

                    IF l_total_restante <=  l_numero_grupos then

                        for x in (SELECT SZTCONF_STUDENT_NUMB no_alumnos,
                                    SZTCONF_GROUP grupo, sztconf_idioma idioma
                             FROM sztconf
                             WHERE 1 = 1
                             AND sztconf_no_regla = p_regla
                             AND sztconf_subj_code = c.clave_materia
                             AND SZTCONF_GROUP <= l_total_restante )
                             loop

                                l_contar:=l_contar+1;


                                l_actualiza:=round(x.no_alumnos+1);

                                l_monto_pago:=f_get_mont(
                                                                p_no_grupos       =>  l_contar,
                                                                p_lvl_code        =>  l_nivel,
                                                                p_camp_code       =>  l_campus,
                                                                p_min_cupo        =>  l_actualiza,
                                                                p_max_cupo        =>  l_actualiza,
                                                                p_rtm_code        =>  c.periodicidad
                                                             );

                                UPDATE SZTCONF set SZTCONF_STUDENT_NUMB =l_actualiza,
                                                   SZTCONF_USSER_INSERT ='actualiza 2'
                                WHERE 1 = 1
                                AND sztconf_no_regla = p_regla
                                AND sztconf_subj_code = c.clave_materia
                                AND sztconf_group = x.grupo;


                             END LOOP;

                    elsIF l_total_restante >  l_numero_grupos then

                        IF l_total_restante = l_tope then

                            for x in (SELECT SZTCONF_STUDENT_NUMB no_alumnos,
                                        SZTCONF_GROUP grupo,
                                        SZTCONF_PIDM prof_pidm,
                                        SZTCONF_ID id_prof, sztconf_idioma idioma
                                 FROM sztconf
                                 WHERE 1 = 1
                                 AND sztconf_no_regla = p_regla
                                 AND sztconf_subj_code = c.clave_materia
                                 AND SZTCONF_GROUP <= 1 )
                             loop

                                    BEGIN
                                        SELECT COUNT(SZTCONF_GROUP)+1
                                        INTO l_maximo_grupo
                                        FROM sztconf
                                        WHERE 1 = 1
                                        AND sztconf_no_regla = p_regla
                                        AND sztconf_subj_code=c.clave_materia;

                                    exception when others then
                                        null;
                                    end;

                                    BEGIN
                                        SELECT COUNT(SZTCONF_GROUP)+1
                                        INTO l_max_prof
                                        FROM sztconf
                                        WHERE 1 = 1
                                        AND sztconf_no_regla = p_regla
                                        AND sztconf_subj_code=c.clave_materia;

                                    exception when others then
                                        null;
                                    end;



                                    l_monto_pago:=f_get_mont(
                                                    p_no_grupos       =>  l_max_prof,
                                                    p_lvl_code        =>  l_nivel,
                                                    p_camp_code       =>  l_campus,
                                                    p_min_cupo        =>  c.no_alumnos,
                                                    p_max_cupo        =>  c.no_alumnos,
                                                    p_rtm_code        =>  c.periodicidad
                                                 );

                                    INSERT INTO  SZTCONF VALUES(
                                                              c.clave_materia,
                                                              l_maximo_grupo,
                                                              l_tope          ,
                                                              x.prof_pidm,
                                                              l_monto_pago,
                                                              'entra 5',
                                                              SYSDATE,
                                                              USER,
                                                              SYSDATE,
                                                              p_regla,
                                                              c.periodicidad,
                                                              'N',
                                                              x.id_prof,
                                                              p_fecha_inicio,
                                                              0,
                                                              null,
                                                              l_max_prof, x.idioma
                                                             );
                             END LOOP;

                        elsIF l_total_restante < l_tope then

                            BEGIN

                                 SELECT nvl(sum(SZTCONF_STUDENT_NUMB),0)
                                 INTO l_total_alumnos
                                 FROM sztconf
                                 WHERE 1 = 1
                                 AND sztconf_no_regla = p_regla
                                 AND sztconf_subj_code= c.clave_materia;

                            EXCEPTION WHEN OTHERS THEN
                                NULL;
                            END;

                            l_total_restante:=c.no_alumnos-l_total_alumnos;


                            --dbms_output.put_line(' Materia '||c.clave_materia||' Restante '||l_total_restante||' total alumnos '||c.no_alumnos);

                            for x in (SELECT SZTCONF_STUDENT_NUMB no_alumnos,
                                    SZTCONF_GROUP grupo
                             FROM sztconf
                             WHERE 1 = 1
                             AND sztconf_no_regla = p_regla
                             AND sztconf_subj_code = c.clave_materia
                             AND SZTCONF_GROUP <= l_total_restante )
                             loop

                                l_contar:=l_contar+1;


                                l_actualiza:=round(x.no_alumnos+1);

                                l_monto_pago:=f_get_mont(
                                                                p_no_grupos       =>  l_contar,
                                                                p_lvl_code        =>  l_nivel,
                                                                p_camp_code       =>  l_campus,
                                                                p_min_cupo        =>  l_actualiza,
                                                                p_max_cupo        =>  l_actualiza,
                                                                p_rtm_code        =>  c.periodicidad
                                                             );

                                UPDATE SZTCONF set SZTCONF_STUDENT_NUMB =l_actualiza,
                                                   SZTCONF_USSER_INSERT ='actualiza 3'
                                WHERE 1 = 1
                                AND sztconf_no_regla = p_regla
                                AND sztconf_subj_code = c.clave_materia
                                AND sztconf_group = x.grupo;


                             END LOOP;

                            for x in (SELECT SZTCONF_STUDENT_NUMB no_alumnos,
                                    SZTCONF_GROUP grupo
                             FROM sztconf
                             WHERE 1 = 1
                             AND sztconf_no_regla = p_regla
                             AND sztconf_subj_code = c.clave_materia
                             AND SZTCONF_GROUP <= l_total_restante )
                             loop

                                BEGIN

                                     SELECT nvl(sum(SZTCONF_STUDENT_NUMB),0)
                                     INTO l_total_alumnos
                                     FROM sztconf
                                     WHERE 1 = 1
                                     AND sztconf_no_regla = p_regla
                                     AND sztconf_subj_code= c.clave_materia;

                                EXCEPTION WHEN OTHERS THEN
                                    NULL;
                                END;

                                l_total_restante:=c.no_alumnos-l_total_alumnos;


                                exit when l_total_restante <= 0;

                                l_actualiza:=round(x.no_alumnos+1);

                                l_monto_pago:=f_get_mont(
                                                                p_no_grupos       =>  l_contar,
                                                                p_lvl_code        =>  l_nivel,
                                                                p_camp_code       =>  l_campus,
                                                                p_min_cupo        =>  l_actualiza,
                                                                p_max_cupo        =>  l_actualiza,
                                                                p_rtm_code        =>  c.periodicidad
                                                             );

                                UPDATE SZTCONF set SZTCONF_STUDENT_NUMB =l_actualiza,
                                                   SZTCONF_USSER_INSERT ='actualiza 4'
                                WHERE 1 = 1
                                AND sztconf_no_regla = p_regla
                                AND sztconf_subj_code = c.clave_materia
                                AND sztconf_group = x.grupo;


                             END LOOP;


                             IF l_total_restante > 0 then

                                for x in (SELECT SZTCONF_STUDENT_NUMB no_alumnos,
                                    SZTCONF_GROUP grupo
                                 FROM sztconf
                                 WHERE 1 = 1
                                 AND sztconf_no_regla = p_regla
                                 AND sztconf_subj_code = c.clave_materia
                                 AND SZTCONF_GROUP <= l_total_restante )
                                 loop

                                    BEGIN

                                         SELECT nvl(sum(SZTCONF_STUDENT_NUMB),0)
                                         INTO l_total_alumnos
                                         FROM sztconf
                                         WHERE 1 = 1
                                         AND sztconf_no_regla = p_regla
                                         AND sztconf_subj_code= c.clave_materia;

                                    EXCEPTION WHEN OTHERS THEN
                                        NULL;
                                    END;

                                    l_total_restante:=c.no_alumnos-l_total_alumnos;


                                    exit when l_total_restante <= 0;

                                    l_actualiza:=round(x.no_alumnos+1);

                                    l_monto_pago:=f_get_mont(
                                                                    p_no_grupos       =>  l_contar,
                                                                    p_lvl_code        =>  l_nivel,
                                                                    p_camp_code       =>  l_campus,
                                                                    p_min_cupo        =>  l_actualiza,
                                                                    p_max_cupo        =>  l_actualiza,
                                                                    p_rtm_code        =>  c.periodicidad
                                                                 );

                                    UPDATE SZTCONF set SZTCONF_STUDENT_NUMB =l_actualiza,
                                                       SZTCONF_USSER_INSERT ='actualiza 5'
                                    WHERE 1 = 1
                                    AND sztconf_no_regla = p_regla
                                    AND sztconf_subj_code = c.clave_materia
                                    AND sztconf_group = x.grupo;


                                 END LOOP;

                             end IF;

                        end IF;

                    end IF;

                end IF;

            end IF;

            BEGIN

                 SELECT nvl(sum(SZTCONF_STUDENT_NUMB),0)
                 INTO l_total_alumnos
                 FROM sztconf
                 WHERE 1 = 1
                 AND sztconf_no_regla = p_regla
                 AND sztconf_subj_code= c.clave_materia;

            EXCEPTION WHEN OTHERS THEN
                NULL;
            END;


            --l_sobrecupo:=0;

            l_total_restante:=c.no_alumnos-l_total_alumnos;

            BEGIN
                SELECT max(SZTCONF_GROUP)*l_sobrecupo
                INTO l_maximo_sobrecupo
                FROM sztconf
                WHERE 1 = 1
                AND sztconf_no_regla = p_regla
                AND SZTCONF_FECHA_INICIO = p_fecha_inicio
                AND sztconf_subj_code =c.clave_materia;

            exception when others then
                null;
            end;

            IF l_total_restante > 0 then

                IF l_total_restante < l_tope then



                    IF l_total_restante< l_maximo_sobrecupo then


                        for x in (SELECT SZTCONF_STUDENT_NUMB no_alumnos,
                                     SZTCONF_GROUP grupo
                                     ,sztconf_idioma idioma
                                  FROM sztconf
                                  WHERE 1 = 1
                                  AND sztconf_no_regla = p_regla
                                  AND sztconf_subj_code = c.clave_materia
                                  AND SZTCONF_GROUP <= l_total_restante )
                                  loop



                                     BEGIN

                                          SELECT nvl(sum(SZTCONF_STUDENT_NUMB),0)
                                          INTO l_total_alumnos
                                          FROM sztconf
                                          WHERE 1 = 1
                                          AND sztconf_no_regla = p_regla
                                          AND sztconf_subj_code= c.clave_materia;

                                     EXCEPTION WHEN OTHERS THEN
                                         NULL;
                                     END;

                                     l_total_restante:=c.no_alumnos-l_total_alumnos;

                                     exit when l_total_restante <= 0;

                                     BEGIN

                                     SELECT
                                         max(SZTCONF_GROUP) grupo
                                      INTO l_max_grupo
                                      FROM sztconf
                                      WHERE 1 = 1
                                      AND sztconf_no_regla = p_regla
                                      AND sztconf_subj_code = c.clave_materia;

                                     exception when others then
                                        l_max_grupo:=1;
                                     end;


                                     l_total_restante:=round(l_total_restante/l_max_grupo);

                                     l_actualiza:=round((x.no_alumnos+l_total_restante));



                                     l_monto_pago:=f_get_mont(
                                                                     p_no_grupos       =>  l_contar,
                                                                     p_lvl_code        =>  l_nivel,
                                                                     p_camp_code       =>  l_campus,
                                                                     p_min_cupo        =>  l_actualiza,
                                                                     p_max_cupo        =>  l_actualiza,
                                                                     p_rtm_code        =>  c.periodicidad
                                                                  );

                                     UPDATE SZTCONF set SZTCONF_STUDENT_NUMB =l_actualiza,
                                                        SZTCONF_USSER_INSERT ='actualiza 6'
                                     WHERE 1 = 1
                                     AND sztconf_no_regla = p_regla
                                     AND sztconf_subj_code = c.clave_materia
                                     AND sztconf_group = x.grupo;

                                  END LOOP;

                                  BEGIN

                                         SELECT nvl(sum(SZTCONF_STUDENT_NUMB),0)
                                         INTO l_total_alumnos
                                         FROM sztconf
                                         WHERE 1 = 1
                                         AND sztconf_no_regla = p_regla
                                         AND sztconf_subj_code= c.clave_materia;

                                  EXCEPTION WHEN OTHERS THEN
                                      NULL;
                                  END;

                                     l_total_restante:=c.no_alumnos-l_total_alumnos;


                                     IF l_total_restante > 0 then



                                         for x in (SELECT SZTCONF_STUDENT_NUMB no_alumnos,
                                                     SZTCONF_GROUP grupo
                                                  FROM sztconf
                                                  WHERE 1 = 1
                                                  AND sztconf_no_regla = p_regla
                                                  AND sztconf_subj_code = c.clave_materia
                                                  AND SZTCONF_GROUP <= l_total_restante )
                                                  loop

                                                        BEGIN

                                                              SELECT nvl(sum(SZTCONF_STUDENT_NUMB),0)
                                                              INTO l_total_alumnos
                                                              FROM sztconf
                                                              WHERE 1 = 1
                                                              AND sztconf_no_regla = p_regla
                                                              AND sztconf_subj_code= c.clave_materia;

                                                         EXCEPTION WHEN OTHERS THEN
                                                             NULL;
                                                         END;

                                                         l_total_restante:=c.no_alumnos-l_total_alumnos;

                                                         l_restante:=round(l_total_restante/l_max_grupo);

                                                         exit when l_total_restante <= 0;




                                                         l_actualiza:=round(x.no_alumnos+l_restante);


                                                         IF l_restante <= l_tope+l_sobrecupo then

                                                             l_monto_pago:=f_get_mont(
                                                                         p_no_grupos       =>  l_contar,
                                                                         p_lvl_code        =>  l_nivel,
                                                                         p_camp_code       =>  l_campus,
                                                                         p_min_cupo        =>  l_actualiza,
                                                                         p_max_cupo        =>  l_actualiza,
                                                                         p_rtm_code        =>  c.periodicidad
                                                                      );

                                                                 UPDATE SZTCONF set SZTCONF_STUDENT_NUMB =l_actualiza,
                                                                                    SZTCONF_USSER_INSERT ='actualiza 7'
                                                                 WHERE 1 = 1
                                                                 AND sztconf_no_regla = p_regla
                                                                 AND sztconf_subj_code = c.clave_materia
                                                                 AND sztconf_group = x.grupo;

                                                        end IF;


                                                  END LOOP;


                                     end IF;


                                    BEGIN

                                         SELECT nvl(sum(SZTCONF_STUDENT_NUMB),0)
                                         INTO l_total_alumnos
                                         FROM sztconf
                                         WHERE 1 = 1
                                         AND sztconf_no_regla = p_regla
                                         AND sztconf_subj_code= c.clave_materia;

                                    EXCEPTION WHEN OTHERS THEN
                                      NULL;
                                    END;

                                    l_total_restante:=c.no_alumnos-l_total_alumnos;

                                    IF l_total_restante > 0 then

                                        BEGIN

                                         SELECT
                                             max(SZTCONF_GROUP) grupo
                                          INTO l_max_grupo
                                          FROM sztconf
                                          WHERE 1 = 1
                                          AND sztconf_no_regla = p_regla
                                          AND sztconf_subj_code = c.clave_materia;

                                         exception when others then
                                            l_max_grupo:=1;
                                         end;

                                         for x in (SELECT SZTCONF_STUDENT_NUMB no_alumnos,
                                                     SZTCONF_GROUP grupo
                                                  FROM sztconf
                                                  WHERE 1 = 1
                                                  AND sztconf_no_regla = p_regla
                                                  AND sztconf_subj_code = c.clave_materia
                                                  AND SZTCONF_GROUP = l_max_grupo )
                                                  loop


                                                    l_actualiza:=round(x.no_alumnos+l_total_restante);

                                                    l_monto_pago:=f_get_mont(
                                                                         p_no_grupos       =>  l_contar,
                                                                         p_lvl_code        =>  l_nivel,
                                                                         p_camp_code       =>  l_campus,
                                                                         p_min_cupo        =>  l_actualiza,
                                                                         p_max_cupo        =>  l_actualiza,
                                                                         p_rtm_code        =>  c.periodicidad
                                                                      );

                                                                 UPDATE SZTCONF set SZTCONF_STUDENT_NUMB =l_actualiza,
                                                                                    SZTCONF_USSER_INSERT ='actualiza 7'
                                                                 WHERE 1 = 1
                                                                 AND sztconf_no_regla = p_regla
                                                                 AND sztconf_subj_code = c.clave_materia
                                                                 AND sztconf_group = x.grupo;

                                                  END LOOP;




                                    end IF;

                                    BEGIN

                                         SELECT nvl(sum(SZTCONF_STUDENT_NUMB),0)
                                         INTO l_total_alumnos
                                         FROM sztconf
                                         WHERE 1 = 1
                                         AND sztconf_no_regla = p_regla
                                         AND sztconf_subj_code= c.clave_materia;

                                    EXCEPTION WHEN OTHERS THEN
                                      NULL;
                                    END;

                                    l_total_restante:=c.no_alumnos-l_total_alumnos;

                                    dbms_output.put_line('Materia '||c.clave_materia||' Restante '||l_total_restante||' total de alumnos '||l_total_alumnos||' Sobrecupo '||l_maximo_sobrecupo||' actualiza '||l_actualiza||' total cupo '||l_cupo_extra||' Grupo maximo '||l_max_grupo);

                    elsIF l_total_restante >= l_maximo_sobrecupo then

                        l_contar:=0;

                        for x in (SELECT SZTCONF_STUDENT_NUMB no_alumnos,
                                        SZTCONF_GROUP grupo,
                                        SZTCONF_PIDM prof_pidm,
                                        SZTCONF_ID id_prof, sztconf_idioma idioma
                                 FROM sztconf
                                 WHERE 1 = 1
                                 AND sztconf_no_regla = p_regla
                                 AND sztconf_subj_code = c.clave_materia
                                 AND SZTCONF_GROUP  > 1 )
                             loop

                                l_contar:= l_contar+1;



                                    BEGIN
                                        SELECT COUNT(SZTCONF_GROUP)+1
                                        INTO l_maximo_grupo
                                        FROM sztconf
                                        WHERE 1 = 1
                                        AND sztconf_no_regla = p_regla
                                        AND sztconf_subj_code=c.clave_materia;

                                    exception when others then
                                        null;
                                    end;

                                    BEGIN
                                        SELECT COUNT(SZTCONF_GROUP)+1
                                        INTO l_max_prof
                                        FROM sztconf
                                        WHERE 1 = 1
                                        AND sztconf_no_regla = p_regla
                                        AND sztconf_subj_code=c.clave_materia;

                                    exception when others then
                                        null;
                                    end;



                                    l_monto_pago:=f_get_mont(
                                                    p_no_grupos       =>  l_max_prof,
                                                    p_lvl_code        =>  l_nivel,
                                                    p_camp_code       =>  l_campus,
                                                    p_min_cupo        =>  c.no_alumnos,
                                                    p_max_cupo        =>  c.no_alumnos,
                                                    p_rtm_code        =>  c.periodicidad
                                                 );

                                    INSERT INTO  SZTCONF VALUES(
                                                              c.clave_materia,
                                                              l_maximo_grupo,
                                                              l_total_restante,
                                                              x.prof_pidm,
                                                              l_monto_pago,
                                                              'entra 6',
                                                              SYSDATE,
                                                              USER,
                                                              SYSDATE,
                                                              p_regla,
                                                              c.periodicidad,
                                                              'N',
                                                              x.id_prof,
                                                              p_fecha_inicio,
                                                              0,
                                                              null,
                                                              l_max_prof, x.idioma
                                                             );

                                exit when l_contar = 1;

                             END LOOP;




                    end IF;

                end IF;


            end IF;

            BEGIN

                 SELECT nvl(sum(SZTCONF_STUDENT_NUMB),0)
                 INTO l_total_alumnos
                 FROM sztconf
                 WHERE 1 = 1
                 AND sztconf_no_regla = p_regla
                 AND sztconf_subj_code= c.clave_materia;

            EXCEPTION WHEN OTHERS THEN
                NULL;
            END;

            l_total_restante:=c.no_alumnos-l_total_alumnos;

--            dbms_output.put_line(' Materias '||c.clave_materia||' Total de alumnos '||c.no_alumnos||' Sembrados '||l_total_alumnos||' Restantes '||l_total_restante||' No grupos '||l_numero_grupos||' tope '||l_tope||' mod '||l_mod||' Numero de grupos '||l_numero_grupos||' alumnos por grupo '||l_alumnos_divde||' Actualiza '||l_actualiza);

        END LOOP;

        commit;


    END carga_inscrip_preview;

--
--
-- inscripcion en banner1
      PROCEDURE carga_inscrip_nw  (
                                 pn_fecha  IN VARCHAR2 ,
                                 p_regla       NUMBER
                                 )
    IS
       crn                  varchar2(20);
       gpo                  NUMBER;
       mate                 VARCHAR2(20);
       ciclo                VARCHAR2(6);
       subj                 VARCHAR2(4);
       crse                 VARCHAR2(5);
       sb                   VARCHAR2(4);
       cr                   VARCHAR2(5);
       schd                 VARCHAR2(3);
       title                VARCHAR2(30);
       credit               DECIMAL(7,3);
       credit_bill          DECIMAL(7,3);
       gmod                 VARCHAR2(1);
       f_inicio             DATE;
       f_fin                DATE;
       sem                  NUMBER;
       conta_ptrm           NUMBER;
       conta_blck           NUMBER;
       pidm                 NUMBER;
       pidm_doc             NUMBER;
       pidm_doc2            NUMBER;
       ests                 VARCHAR2(2);
       levl                 VARCHAR2(2);
       camp                 VARCHAR2(3);
       rsts                 VARCHAR2(3);
       conta_origen         NUMBER:=0;
       conta_destino        NUMBER :=0;
       conta_origen_ssbsect NUMBER:=0;
       conta_origen_ssrblck NUMBER:=0;
       conta_origen_sobptrm NUMBER:=0;
       sp                   INTEGER;
       ciclo_ext            VARCHAR2(6);
       mensaje              VARCHAR2(200);
       parte                VARCHAR2(3);
       pidm_prof            NUMBER;
       per                  VARCHAR2(6);
       grupo                VARCHAR2(4);
       conta_sirasgn        NUMBER;
       fecha_ini            DATE;
       vl_existe            NUMBER :=0;

       vn_lugares           NUMBER:=0;
       vn_cupo_max          NUMBER:=0;
       vn_cupo_act          NUMBER:=0;
       vl_error             VARCHAR2 (2500):= 'EXITO';

       parteper_cur         VARCHAR2(3);
       period_cur           VARCHAR2(10);
       vl_jornada           VARCHAR2(250):=NULL;
       vl_exite_prof        NUMBER :=0;
       l_contar             NUMBER:=0;
       l_maximo_alumnos     NUMBER;
       l_numero_contador    number;
       l_valida_order       number;
       L_DESCRIPCION_ERROR  VARCHAR2(250):=NULL;
       l_valida  number;
       l_cuneta_prono number;
       l_term_code VARCHAR2(10);
       l_ptrm VARCHAR2(10);
       vl_orden number;
       l_valida_regla VARCHAR2(1);
       l_cambio_estatus   number;
       l_cuenta_ni        number;
       l_pperiodo_ni VARCHAR2(20);
       l_type        VARCHAR2(20);



            CURSOR c_no_proce IS
            SELECT *
            FROM szcarga carg
            WHERE  1=1
            AND szcarga_no_regla = p_regla
            --AND carg.SZCARGA_ID='010078157'
            AND NOT EXISTS (SELECT 1
                           FROM szcarga
                           JOIN spriden ON spriden_id=szcarga_id AND spriden_change_ind IS NULL
                           JOIN sgbstdn d ON  d.sgbstdn_pidm=spriden_pidm
                           AND  d.sgbstdn_term_code_eff = (SELECT MAX (b1.sgbstdn_term_code_eff)
                                                           FROM sgbstdn b1
                                                           WHERE 1 = 1
                                                           AND d.sgbstdn_pidm = b1.sgbstdn_pidm
                                                           AND d.sgbstdn_program_1 = b1.sgbstdn_program_1
                                                          )
                           JOIN sorlcur s ON sorlcur_pidm=spriden_pidm
                           AND s.sorlcur_program=szcarga_program
                           AND s.sorlcur_lmod_code='LEARNER'
                           AND s.sorlcur_seqno in (SELECT MAX(ss.sorlcur_seqno)
                                                   FROM sorlcur ss
                                                   WHERE 1 = 1
                                                   AND s.sorlcur_pidm=ss.sorlcur_pidm
                                                   AND s.sorlcur_lmod_code=ss.sorlcur_lmod_code
                                                   AND s.sorlcur_program=ss.sorlcur_program
                                                   )
                           JOIN smrpaap ON smrpaap_program=sorlcur_program
                           AND smrpaap_term_code_eff=sorlcur_term_code_ctlg
                           JOIN scrtext ON scrtext_text =szcarga_materia
                           JOIN smrarul ON smrarul_area=smrpaap_area
                           AND smrarul_term_code_eff=smrpaap_term_code_eff
                           LEFT OUTER JOIN sztdtec ON sztdtec_program=sorlcur_program
                           AND sztdtec_term_code=sorlcur_term_code_ctlg
                           WHERE  smrarul_subj_code=scrtext_subj_code
                           AND smrarul_crse_numb_low=scrtext_crse_numb
                           AND carg.szcarga_id=spriden_id
                           AND carg.szcarga_materia = szcarga_materia
                           AND carg.szcarga_program=szcarga_program
                           AND carg.szcarga_fecha_ini=szcarga_fecha_ini
                           AND szcarga_no_regla = p_regla
                                          --      AND szcarga_materia = 'M1ED116'
                            );


   BEGIN

        BEGIN

            SELECT DISTINCT SZTALGO_ESTATUS_CERRADO
            INTO l_valida_regla
            FROM sztalgo
            WHERE 1 = 1
            AND SZTALGO_NO_REGLA =p_regla;

        exception when others then
             null;
        end;

        IF l_valida_regla ='S'then

                P_ENA_DIS_TRG('D','SATURN.SZT_SSBSECT_POSTINSERT_ROW');
                P_ENA_DIS_TRG('D','SATURN.SZT_SIRASGN_POSTINSERT_ROW');
                P_ENA_DIS_TRG('D','SATURN.SZT_SFRSTCR_POSTINS_UDP_REGS');

--                BEGIN
--                    SELECT COUNT(*)
--                    INTO l_cuneta_prono
--                    FROM szstume me
--                    WHERE 1 = 1
--                    AND szstume_no_regla = p_regla
--                    AND (szstume_id,SZSTUME_SUBJ_CODE_COMP) in
--                    (
--                    SELECT distinct SZSTUME_ID,
--                                    SZSTUME_SUBJ_CODE_COMP
--                    FROM szstume
--                    WHERE 1 = 1
--                    AND szstume_no_regla = p_regla
--                    minus
--                    SELECT distinct sztprono_id,
--                                    sztprono_materia_legal
--                    FROM sztprono
--                    WHERE 1 = 1
--                    AND sztprono_no_regla = p_regla
--                    );
--                exception when others then
--                    l_cuneta_prono:=0;
--                end;
--
--                IF l_cuneta_prono > 0 then
--
--                    BEGIN
--
--                            for c in
--                                    (
--                                    SELECT
--                                           f_get_program(szstume_pidm) programa,
--                                                               ROW_NUMBER() OVER (PARTITION BY szstume_pidm ORDER BY SZSTUME_SUBJ_CODE_COMP) AS secuencia,
--                                        me.*
--                                    FROM szstume me
--                                    WHERE 1 = 1
--                                    AND szstume_no_regla = p_regla
--                                    AND (szstume_id,SZSTUME_SUBJ_CODE_COMP) in
--                                    (
--                                    SELECT distinct SZSTUME_ID,
--                                                    SZSTUME_SUBJ_CODE_COMP
--                                    FROM szstume
--                                    WHERE 1 = 1
--                                    AND szstume_no_regla = p_regla
--                                    minus
--                                    SELECT distinct sztprono_id,
--                                                    sztprono_materia_legal
--                                    FROM sztprono
--                                    WHERE 1 = 1
--                                    AND sztprono_no_regla = p_regla
--                                    )
--                                )loop
--
--                                    BEGIN
--                                        SELECT distinct SZTGPME_TERM_NRC_COMP,SZTGPME_PTRM_CODE
--                                        INTO l_term_code,l_ptrm
--                                        FROM sztgpme
--                                        WHERE 1 = 1
--                                        AND sztgpme_no_regla = p_regla
--                                        AND SZTGPME_TERM_NRC = c.SZSTUME_TERM_NRC;
--
--                                    exception when others then
--                                        null;
--                                    end;
--
--                                    IF substr(c.szstume_id,1,2) ='02' then
--
--                                        l_term_code:='02'||substr(l_term_code,3,10);
--                                        l_ptrm:='A'||substr(l_ptrm,2,10);
--
--                                    end IF;
--
--
--                                      BEGIN
--                                            SELECT a.SGBSTDN_STYP_CODE
--                                            INTO l_type
--                                            FROM sgbstdn a
--                                            WHERE a.sgbstdn_pidm = c.szstume_pidm
--                                            AND a.sgbstdn_term_code_eff = (SELECT max (a1.sgbstdn_term_code_eff)
--                                                                                            FROM sgbstdn a1
--                                                                                            WHERE a.sgbstdn_pidm = a1.sgbstdn_pidm
--                                                                                            );
--                                       Exception
--                                            When Others then
--                                               l_type := null;
--                                       End;
--
--                                    dbms_output.put_line('ptrm '||l_ptrm);
--
--                                    --PARA NUEVOS INGRESOS
--
--                                    IF l_type = 'N' then
--
--                                           SELECT DISTINCT ZSTPARA_PARAM_VALOR
--                                           INTO l_pperiodo_ni
--                                           FROM ZSTPARA
--                                           WHERE 1 = 1
--                                           AND ZSTPARA_MAPA_ID ='PTR_NI'
--                                           AND ZSTPARA_PARAM_DESC =l_ptrm;
--
--                                    else
--
--                                            l_pperiodo_ni:=l_ptrm;
--
--                                    end IF;
--
--                                    dbms_output.put_line(' periodo '||l_term_code||' parte periodo '||l_ptrm);
--
--                                    BEGIN
--
--                                    INSERT INTO sztprono VALUES ( c.szstume_pidm,
--                                                                  c.szstume_id,
--                                                                  l_term_code,
--                                                                  c.programa,
--                                                                  c.SZSTUME_SUBJ_CODE_COMP,
--                                                                  c.secuencia,
--                                                                  l_pperiodo_ni,
--                                                                  c.SZSTUME_SUBJ_CODE_COMP,
--                                                                  'MATERIA',
--                                                                  c.SZSTUME_START_DATE,
--                                                                  NULL,
--                                                                  NULL,
--                                                                  1,
--                                                                  c.szstume_no_regla,
--                                                                  USER,
--                                                                  1,
--                                                                  null,
--                                                                  null,
--                                                                  sysdate,
--                                                                  'Q'||1,
--                                                                  null,
--                                                                  null,
--                                                                  'S',
--                                                                  'N',
--                                                                  l_type,
--                                                                  'N',
--                                                                  null,
--                                                                  null
--                                                                  );
--
--                                    exception when others then
--                                        null;
--                                    end;
--
--                                END LOOP;
--
--                            commit;
--
--                    end;
--
--
--
--                end IF;


                BEGIN
                   PKG_ALGORITMO.P_INSERTA_CARGA(p_regla,pn_fecha);
                exception when others then
        --            raise_application_error (-20002,'ERROR al INSERTar en carga '||sqlerrm);
                    null;
                end;

                BEGIN

                      SELECT COUNT(*)
                      INTO l_contar
                      FROM SZCARGA
                      WHERE 1 = 1
                      AND SZCARGA_NO_REGLA =p_regla;

                EXCEPTION WHEN OTHERS THEN
                  NULL;
                END;

                IF l_contar > 0 then

                    fecha_ini:=TO_DATE(pn_fecha,'DD/MM/RRRR');


                     FOR c IN (
                               SELECT DISTINCT spriden_pidm pidm,
                                               szcarga_id iden  ,
                                               szcarga_program prog,
                                               sorlcur_camp_code campus,
                                               sorlcur_levl_code nivel,
                                               sorlcur_term_code_ctlg ctlg ,
                                               szcarga_materia  materia ,
                                               smrarul_subj_code subj,
                                               smrarul_crse_numb_low crse ,
                                               szcarga_term_code periodo ,
                                               szcarga_ptrm_code parte,
                                               DECODE(sztdtec_periodicidad,1,'BIMESTRAL',2,'CUATRIMESTRAL') periodicidad,
                                               nvl(szcarga_grupo,'01') grupo,
                                               --szcarga_grupo grupo,
                                               szcarga_calIF calIF,
                                               szcarga_id_prof prof,
                                               szcarga_fecha_ini fecha_inicio,
                                               sorlcur_key_seqno study,
                                               d.sgbstdn_stst_code,
                                               d.sgbstdn_styp_code
                               FROM szcarga a
                               JOIN spriden ON spriden_id=szcarga_id AND spriden_change_ind IS NULL
                               JOIN sgbstdn d ON  d.sgbstdn_pidm=spriden_pidm
                               AND  d.sgbstdn_term_code_eff = (SELECT MAX (b1.sgbstdn_term_code_eff)
                                                               FROM sgbstdn b1
                                                               WHERE 1 = 1
                                                               AND d.sgbstdn_pidm = b1.sgbstdn_pidm
                                                               AND d.sgbstdn_program_1 = b1.sgbstdn_program_1
                                                                                      )
                               JOIN sorlcur s ON sorlcur_pidm=spriden_pidm
                               AND s.sorlcur_pidm = d.sgbstdn_pidm
                               AND s.sorlcur_program = d.sgbstdn_program_1
                               AND sorlcur_program=szcarga_program
                               AND sorlcur_lmod_code='LEARNER'
                               AND sorlcur_seqno IN (SELECT MAX(sorlcur_seqno)
                                                     FROM sorlcur ss
                                                     WHERE 1 = 1
                                                     AND s.sorlcur_pidm=ss.sorlcur_pidm
                                                     AND s.sorlcur_lmod_code=ss.sorlcur_lmod_code
                                                     AND s.sorlcur_program=ss.sorlcur_program
                                                     )
                               LEFT OUTER JOIN sztdtec ON sztdtec_program=sorlcur_program AND sztdtec_term_code=sorlcur_term_code_ctlg
                               JOIN smrpaap ON smrpaap_program=sorlcur_program AND smrpaap_term_code_eff=sorlcur_term_code_ctlg
                               JOIN sztmaco ON SZTMACO_MATPADRE=szcarga_materia
                               JOIN smrarul ON smrarul_area=smrpaap_area  AND smrarul_term_code_eff=smrpaap_term_code_eff
                               WHERE  1 = 1
                               AND smrarul_subj_code||smrarul_crse_numb_low =sztmaco_mathijo
                               AND szcarga_no_regla = p_regla
                               --AND ROWNUM = 1
                               ORDER BY  iden, 10

                    ) LOOP

        --

                        --DBMS_OUTPUT.PUT_LINE('Entra 2');

                        --IF l_valida_order = 0 then
                                --------------- Limpia Variables  --------------------
                                            --niv :=  null;
                                parte         := NULL;
                                crn           := NULL;
                                pidm_doc2     := NULL;
                                conta_sirasgn := NULL;
                                pidm_doc      := NULL;
                                f_inicio      := NULL;
                                f_fin         := NULL;
                                sem           := NULL;
                                schd          := NULL;
                                title         := NULL;
                                credit        := NULL;
                                credit_bill   :=NULL;
                                levl          := NULL;
                                camp          := NULL;
                                mate          := NULL;
                                parte         := NULL;
                                per           := NULL;
                               -- grupo         := NULL;
                                vl_existe     :=0;
                                vl_error      := 'EXITO';
                                vn_lugares    :=0;
                                vn_cupo_max   :=0;
                                vn_cupo_act   :=0;

                                parteper_cur  :=null;
                                period_cur    :=null;
                                vl_exite_prof :=0;
                                vl_orden      :=null;


                                VL_ORDEN:=NULL;


                                BEGIN

                                    SELECT MAX (DISTINCT SFRSTCR_VPDI_CODE)
                                    INTO VL_ORDEN
                                    FROM SFRSTCR
                                    WHERE SFRSTCR_PIDM = C.PIDM
                                    AND SFRSTCR_TERM_CODE = C.PERIODO
                                    AND SFRSTCR_PTRM_CODE = C.PARTE
                                    AND SFRSTCR_RSTS_CODE = 'RE'
                                    AND SFRSTCR_VPDI_CODE IS NOT NULL;

                                EXCEPTION
                                WHEN NO_DATA_FOUND THEN

                                    BEGIN

                                        SELECT TBRACCD_RECEIPT_NUMBER
                                        INTO VL_ORDEN
                                        FROM TBRACCD A
                                        WHERE A.TBRACCD_PIDM = C.PIDM
                                        AND A.TBRACCD_TERM_CODE = C.PERIODO
                                        AND A.TBRACCD_PERIOD = C.PARTE
                                        AND A.TBRACCD_DETAIL_CODE IN (SELECT TBBDETC_DETAIL_CODE
                                                                    FROM TBBDETC
                                                                    WHERE TBBDETC_DCAT_CODE = 'COL')
                                        AND A.TBRACCD_DOCUMENT_NUMBER IS NULL
                                        AND A.TBRACCD_TRAN_NUMBER = (SELECT MAX(TBRACCD_TRAN_NUMBER)
                                                                     FROM TBRACCD A1
                                                                     WHERE A1.TBRACCD_PIDM = A.TBRACCD_PIDM
                                                                     AND A1.TBRACCD_TERM_CODE = A.TBRACCD_TERM_CODE
                                                                     AND A1.TBRACCD_PERIOD = A.TBRACCD_PERIOD
                                                                     AND A1.TBRACCD_DETAIL_CODE = A.TBRACCD_DETAIL_CODE
                                                                     AND A1.TBRACCD_DOCUMENT_NUMBER IS NULL)
;

                                    EXCEPTION
                                    WHEN OTHERS THEN
                                    VL_ORDEN := NULL;
                                    END;

                                END;

                                ------------- SE REPLICA FOLIO SI CUENTA CON MATERIAS QUE YA GENERARON ESTADO DE CUENTA ---------


                                IF c.sgbstdn_stst_code IN  ('AS','PR','MA') then
                                ----------------- Se valida que el alumno no tenga la materia sembrada en el horario como Activa ---------------------------------------

                                    DBMS_OUTPUT.PUT_LINE('Entra a cursor normal ');

                                    BEGIN
                                            --existe y es aprobatoria
                                        SELECT COUNT (1), sfrstcr_term_code, sfrstcr_ptrm_code
                                            INTO vl_existe, period_cur, parteper_cur
                                        FROM ssbsect, sfrstcr, shrgrde
                                        WHERE 1 = 1
                                        AND sfrstcr_pidm=c.pidm
                                        AND ssbsect_term_code = sfrstcr_term_code
                                        AND sfrstcr_ptrm_code = ssbsect_ptrm_code
                                        AND ssbsect_crn= sfrstcr_crn
                                        AND ssbsect_subj_code =c.subj
                                        AND ssbsect_crse_numb =c.crse
                                        AND sfrstcr_rsts_code  = 'RE'
                                        AND (sfrstcr_grde_code = shrgrde_code
                                                                 OR sfrstcr_grde_code IS NULL)
                                        AND substr (sfrstcr_term_code,5,1) != '8'
                                        AND shrgrde_passed_ind = 'Y'
                                        AND shrgrde_levl_code  = c.nivel
                                        GROUP BY sfrstcr_term_code, sfrstcr_ptrm_code;

                                        DBMS_OUTPUT.PUT_LINE('EntrANDo  aqui '||vl_existe);

                                    EXCEPTION
                                     WHEN OTHERS THEN
                                         vl_existe:=0;
                                         DBMS_OUTPUT.PUT_LINE('Error '||sqlerrm);

                                    END;

                                    DBMS_OUTPUT.PUT_LINE('Entra a existe '||vl_existe);

                                    IF vl_existe = 0 THEN

                                        ---- Se busca que exista el grupo y tenga cupo


                                            --DBMS_OUTPUT.PUT_LINE('Entra 3');

                                            dbms_output.put_line ('sin profesor '||vl_existe);

                                            BEGIN

                                                    SELECT ct.ssbsect_crn ,
                                                                ct.ssbsect_seats_avail lugares,
                                                                ct.ssbsect_max_enrl cupo_max,
                                                                ct.ssbsect_ptrm_code,
                                                                ct.ssbsect_enrl cupo_act,
                                                                ct.ssbsect_ptrm_start_date,
                                                                ct.ssbsect_ptrm_end_date,
                                                                ct.ssbsect_ptrm_weeks,
                                                                ct.ssbsect_credit_hrs,
                                                                ct.ssbsect_bill_hrs,
                                                                ct.ssbsect_gmod_code
                                                    INTO crn ,
                                                              vn_lugares,
                                                              vn_cupo_max,
                                                              parte,
                                                              vn_cupo_act,
                                                              f_inicio,
                                                              f_fin,
                                                              sem,
                                                              credit,
                                                              credit_bill,
                                                              gmod
                                                      FROM ssbsect ct
                                                     WHERE     1 = 1
                                                             AND   ct.ssbsect_term_code= c.periodo
                                                             AND   ct.ssbsect_subj_code= c.subj
                                                             AND   ct.ssbsect_crse_numb=c.crse
                                                             AND   ct.ssbsect_seq_numb = c.grupo
                                                             AND   ct.ssbsect_ptrm_code = c.parte
                                                             AND   trunc (ct.ssbsect_ptrm_start_date) = c.Fecha_Inicio
                                                           AND ct.ssbsect_seats_avail > 0
                                                           AND ct.ssbsect_seats_avail IN  (
                                                                                                      SELECT MAX (a1.ssbsect_seats_avail)
                                                                                                         FROM ssbsect a1
                                                                                                        WHERE     a1.ssbsect_term_code = ct.ssbsect_term_code
                                                                                                              AND a1.ssbsect_seq_numb = ct.ssbsect_seq_numb
                                                                                                              AND a1.ssbsect_subj_code = ct.ssbsect_subj_code
                                                                                                              AND a1.ssbsect_crse_numb = ct.ssbsect_crse_numb
                                                                                                              AND trunc (a1.ssbsect_ptrm_start_date) = trunc(ct.ssbsect_ptrm_start_date)
                                                                                                      );

                                                      --  DBMS_OUTPUT.PUT_LINE('Entra 4');

                                            EXCEPTION WHEN OTHERS THEN
                                                crn:=null;
                                                vn_lugares  :=0;
                                                vn_cupo_max :=0;
                                                vn_cupo_act :=0;
                                                f_inicio    := NULL;
                                                f_fin       := NULL;
                                                sem         := NULL;
                                                credit      := NULL;
                                                credit_bill := NULL;
                                                gmod        := NULL;
                                            END;



                                        IF crn IS NOT NULL THEN

                                          dbms_output.put_line ('CRN no es null '||crn);

                                            IF vn_cupo_act >0  THEN

                                                IF credit IS NULL THEN

                                                    BEGIN

                                                        SELECT ssrmeet_credit_hr_sess
                                                        INTO credit
                                                        FROM ssrmeet
                                                        WHERE 1 = 1
                                                        AND ssrmeet_term_code = c.periodo
                                                        AND ssrmeet_crn = crn;

                                                    EXCEPTION  WHEN OTHERS THEN
                                                        credit :=NULL;
                                                    END;

                                                    IF credit IS NOT NULL THEN

                                                        BEGIN

                                                            UPDATE ssbsect SET ssbsect_credit_hrs = credit
                                                            WHERE 1 = 1
                                                            AND ssbsect_term_code = c.periodo
                                                            AND ssbsect_crn = crn;

                                                        EXCEPTION WHEN OTHERS THEN
                                                             NULL;
                                                        END;

                                                    END IF;

                                                END IF;

                                                IF credit_bill IS NULL THEN

                                                    credit_bill := 1;

                                                    IF credit IS NOT NULL THEN

                                                        BEGIN

                                                            UPDATE ssbsect SET  ssbsect_bill_hrs = credit_bill
                                                            WHERE 1 = 1
                                                            AND ssbsect_term_code = c.periodo
                                                            AND ssbsect_crn = crn;

                                                        EXCEPTION WHEN OTHERS THEN
                                                             NULL;
                                                        END;

                                                    END IF;

                                                END IF;

                                                IF gmod IS NULL THEN

                                                    BEGIN

                                                        SELECT scrgmod_gmod_code
                                                        INTO gmod
                                                        FROM scrgmod
                                                        WHERE 1 = 1
                                                        AND scrgmod_subj_code=c.subj
                                                        AND scrgmod_crse_numb=c.crse
                                                        AND scrgmod_default_ind='D';

                                                    EXCEPTION WHEN OTHERS THEN
                                                        gmod:='1';
                                                    END;

                                                    IF gmod IS NOT NULL THEN

                                                        BEGIN

                                                            UPDATE ssbsect SET ssbsect_gmod_code = gmod
                                                            WHERE 1 = 1
                                                            AND ssbsect_term_code = c.periodo
                                                            AND ssbsect_crn = crn;

                                                        EXCEPTION WHEN OTHERS THEN
                                                             NULL;
                                                        END;

                                                    END IF;

                                                END IF;

                                                BEGIN

                                                    SELECT spriden_pidm
                                                    INTO pidm_prof
                                                    FROM  spriden
                                                    WHERE 1 = 1
                                                    AND spriden_id=c.prof
                                                    AND spriden_change_ind IS NULL;

                                                EXCEPTION WHEN OTHERS THEN
                                                    pidm_prof:=NULL;
                                                END;

                                                conta_ptrm :=0;

                                                BEGIN

                                                    SELECT COUNT (1)
                                                    INTO conta_ptrm
                                                    FROM sirasgn
                                                    WHERE SIRASGN_TERM_CODE = c.periodo
                                                    AND SIRASGN_CRN = crn
                                                    AND  SIRASGN_PIDM = pidm_prof
                                                    AND SIRASGN_PRIMARY_IND = 'Y';

                                                EXCEPTION WHEN OTHERS THEN
                                                    conta_ptrm :=0;
                                                END;

                                                IF pidm_prof IS NOT NULL AND conta_ptrm = 0 THEN

                                                    BEGIN
                                                            INSERT INTO sirasgn VALUES(c.periodo,
                                                                                        crn, pidm_prof,
                                                                                        '01',
                                                                                        100,
                                                                                        NULL,
                                                                                        100,
                                                                                        'Y',
                                                                                        NULL,
                                                                                        NULL,
                                                                                        SYSDATE -5,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        'PRONOSTICO',
                                                                                        USER,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        NULL
                                                                                        );
                                                    EXCEPTION WHEN OTHERS THEN
                                                        null;
                                                    END;

                                                END IF;

                                                conta_ptrm :=0;

                                                BEGIN

                                                    SELECT COUNT(*)
                                                    INTO conta_ptrm
                                                    FROM sfbetrm
                                                    WHERE 1 = 1
                                                    AND sfbetrm_term_code=c.periodo
                                                    AND sfbetrm_pidm=c.pidm;

                                                EXCEPTION WHEN OTHERS THEN
                                                      conta_ptrm := 0;
                                                END;


                                                IF conta_ptrm =0 THEN

                                                    BEGIN
                                                            INSERT INTO sfbetrm VALUES(c.periodo,
                                                                                       c.pidm,
                                                                                       'EL',
                                                                                       SYSDATE,
                                                                                       99.99,
                                                                                       'Y',
                                                                                       NULL,
                                                                                       SYSDATE,
                                                                                       SYSDATE,
                                                                                       NULL,
                                                                                       NULL,
                                                                                       NULL,
                                                                                       NULL,
                                                                                       USER,
                                                                                       NULL,
                                                                                       'PRONOSTICO',
                                                                                       NULL,
                                                                                       0,
                                                                                       NULL,
                                                                                       NULL,
                                                                                       NULL,
                                                                                       NULL,
                                                                                       USER,
                                                                                       NULL
                                                                                       );
                                                    EXCEPTION WHEN OTHERS THEN
                                                        vl_error := ('Se presento un error al INSERTar en la tabla sfbetrm ' || SQLERRM);
                                                    END;

                                                END IF;

                                                BEGIN


                                                    BEGIN

                                                        INSERT INTO sfrstcr VALUES(
                                                                                    c.periodo,     --SFRSTCR_TERM_CODE
                                                                                    c.pidm,     --SFRSTCR_PIDM
                                                                                    crn,     --SFRSTCR_CRN
                                                                                    1,     --SFRSTCR_CLASS_SORT_KEY
                                                                                    c.grupo,    --SFRSTCR_REG_SEQ
                                                                                    parte,    --SFRSTCR_PTRM_CODE
                                                                                    'RE',     --SFRSTCR_RSTS_CODE
                                                                                    SYSDATE -5,    --SFRSTCR_RSTS_DATE
                                                                                    NULL,    --SFRSTCR_ERROR_FLAG
                                                                                    NULL,    --SFRSTCR_MESSAGE
                                                                                    credit_bill,    --SFRSTCR_BILL_HR
                                                                                    3, --SFRSTCR_WAIV_HR
                                                                                    credit,     --SFRSTCR_CREDIT_HR
                                                                                    credit_bill,     --SFRSTCR_BILL_HR_HOLD
                                                                                    credit,     --SFRSTCR_CREDIT_HR_HOLD
                                                                                    gmod,     --SFRSTCR_GMOD_CODE
                                                                                    NULL,    --SFRSTCR_GRDE_CODE
                                                                                    NULL,    --SFRSTCR_GRDE_CODE_MID
                                                                                    NULL,    --SFRSTCR_GRDE_DATE
                                                                                    'N',    --SFRSTCR_DUPL_OVER
                                                                                    'N',    --SFRSTCR_LINK_OVER
                                                                                    'N',    --SFRSTCR_CORQ_OVER
                                                                                    'N',    --SFRSTCR_PREQ_OVER
                                                                                    'N',     --SFRSTCR_TIME_OVER
                                                                                    'N',     --SFRSTCR_CAPC_OVER
                                                                                    'N',     --SFRSTCR_LEVL_OVER
                                                                                    'N',     --SFRSTCR_COLL_OVER
                                                                                    'N',     --SFRSTCR_MAJR_OVER
                                                                                    'N',     --SFRSTCR_CLAS_OVER
                                                                                    'N',     --SFRSTCR_APPR_OVER
                                                                                    'N',     --SFRSTCR_APPR_RECEIVED_IND
                                                                                    SYSDATE -5,      --SFRSTCR_ADD_DATE
                                                                                    Sysdate-5,     --SFRSTCR_ACTIVITY_DATE
                                                                                    c.nivel,     --SFRSTCR_LEVL_CODE
                                                                                    c.campus,     --SFRSTCR_CAMP_CODE
                                                                                    c.materia,     --SFRSTCR_RESERVED_KEY
                                                                                    NULL,     --SFRSTCR_ATTEND_HR
                                                                                    'Y',     --SFRSTCR_REPT_OVER
                                                                                    'N' ,    --SFRSTCR_RPTH_OVER
                                                                                    NULL,    --SFRSTCR_TEST_OVER
                                                                                    'N',    --SFRSTCR_CAMP_OVER
                                                                                    USER,    --SFRSTCR_USER
                                                                                    'N',    --SFRSTCR_DEGC_OVER
                                                                                    'N',    --SFRSTCR_PROG_OVER
                                                                                    NULL,    --SFRSTCR_LAST_ATTEND
                                                                                    NULL,    --SFRSTCR_GCMT_CODE
                                                                                    'PRONOSTICO',    --SFRSTCR_DATA_ORIGIN
                                                                                    SYSDATE,   --SFRSTCR_ASSESS_ACTIVITY_DATE
                                                                                    'N',  --SFRSTCR_DEPT_OVER
                                                                                    'N',  --SFRSTCR_ATTS_OVER
                                                                                    'N', --SFRSTCR_CHRT_OVER
                                                                                    c.grupo , --SFRSTCR_RMSG_CDE
                                                                                    NULL,  --SFRSTCR_WL_PRIORITY
                                                                                    NULL,  --SFRSTCR_WL_PRIORITY_ORIG
                                                                                    NULL,  --SFRSTCR_GRDE_CODE_INCMP_FINAL
                                                                                    NULL, --SFRSTCR_INCOMPLETE_EXT_DATE
                                                                                    'N', --SFRSTCR_MEXC_OVER
                                                                                    c.study,--SFRSTCR_STSP_KEY_SEQUENCE
                                                                                    NULL,--SFRSTCR_BRDH_SEQ_NUM
                                                                                    '01',--SFRSTCR_BLCK_CODE
                                                                                    NULL,--SFRSTCR_STRH_SEQNO
                                                                                    NULL, --SFRSTCR_STRD_SEQNO
                                                                                    NULL,  --SFRSTCR_SURROGATE_ID
                                                                                    NULL, --SFRSTCR_VERSION
                                                                                    USER,--SFRSTCR_USER_ID
                                                                                    vl_orden --SFRSTCR_VPDI_CODE
                                                                                  );

                                                    EXCEPTION WHEN OTHERS THEN
                                                        dbms_output.put_line('Error al INSERTar  SFRSTCR '||sqlerrm);
                                                    END;


                                                    BEGIN

                                                         UPDATE ssbsect
                                                                set ssbsect_enrl = ssbsect_enrl + 1
                                                          WHERE 1 = 1
                                                          AND ssbsect_term_code = c.periodo
                                                          AND ssbsect_crn  = crn;

                                                    EXCEPTION WHEN OTHERS THEN
                                                       vl_error := 'Se presento un error al actualizar el enrolamiento ' ||SQLERRM;
                                                    END;

                                                   BEGIN
                                                        UPDATE SZTPRONO SET SZTPRONO_ENVIO_HORARIOS='S'
                                                        WHERE 1 = 1
                                                        AND SZTPRONO_NO_REGLA = p_regla
                                                        AND SZTPRONO_FECHA_INICIO =  pn_fecha
                                                        AND SZTPRONO_PIDM = c.pidm
                                                        AND sztprono_materia_legal = c.materia
                                                        AND SZTPRONO_ENVIO_HORARIOS='N'
                                                        AND SZTPRONO_PTRM_CODE =parte;


                                                   EXCEPTION WHEN OTHERS THEN
                                                      NULL;
                                                    END;

                                                    BEGIN

                                                        UPDATE ssbsect SET ssbsect_seats_avail=ssbsect_seats_avail -1
                                                        WHERE 1 = 1
                                                        AND ssbsect_term_code = c.periodo
                                                        AND ssbsect_crn  = crn;

                                                    EXCEPTION WHEN OTHERS THEN
                                                        vl_error := 'Se presento un error al actualizar la disponibilidad del grupo ' ||SQLERRM;
                                                    END;

                                                    BEGIN

                                                        UPDATE ssbsect SET ssbsect_census_enrl=ssbsect_enrl
                                                        WHERE 1 = 1
                                                        AND ssbsect_term_code = c.periodo
                                                        AND ssbsect_crn  = crn;

                                                    EXCEPTION WHEN OTHERS THEN
                                                        vl_error := 'Se presento un error al actualizar el Censo del grupo ' ||SQLERRM;
                                                    END;


                                                    IF C.SGBSTDN_STYP_CODE = 'F' THEN

                                                        BEGIN

                                                            UPDATE sgbstdn a SET a.sgbstdn_styp_code ='N',
                                                                                 a.SGBSTDN_DATA_ORIGIN ='PRONOSTICO',
                                                                                 A.SGBSTDN_USER_ID =USER
                                                            WHERE 1 = 1
                                                            AND a.sgbstdn_pidm = c.pidm
                                                            AND a.sgbstdn_term_code_eff = (SELECT MAX (a1.sgbstdn_term_code_eff)
                                                                                           FROM sgbstdn a1
                                                                                           WHERE a1.sgbstdn_pidm = a.sgbstdn_pidm
                                                                                           AND a1.sgbstdn_program_1 = a.sgbstdn_program_1
                                                                                           )
                                                            AND a.sgbstdn_program_1 = c.prog;

                                                        EXCEPTION WHEN OTHERS THEN
                                                            vl_error := 'Se presento un error al actualizar el tipo de alumno en sgbstdn ' ||SQLERRM;
                                                        END;

                                                    END IF;

                                                    -- para cambio de estatus cuANDo ya tenga más de una calIFiación
                                                    BEGIN

                                                        SELECT COUNT(*)
                                                        INTO l_cambio_estatus
                                                        FROM sfrstcr
                                                        WHERE 1 = 1
                                                        AND SFRSTCR_TERM_CODE||SFRSTCR_PTRM_CODE = c.periodo||c.parte
                                                        AND sfrstcr_pidm = c.pidm;

                                                    EXCEPTION WHEN OTHERS THEN
                                                        l_cambio_estatus:=0;
                                                    END;


                                                    IF l_cambio_estatus > 0 THEN

                                                        IF C.SGBSTDN_STYP_CODE = 'N' THEN

                                                            BEGIN

                                                                UPDATE sgbstdn a SET a.sgbstdn_styp_code ='C',
                                                                                     a.SGBSTDN_DATA_ORIGIN ='PRONOSTICO',
                                                                                     A.SGBSTDN_USER_ID =USER
                                                                WHERE 1 = 1
                                                                AND a.sgbstdn_pidm = c.pidm
                                                                AND a.sgbstdn_term_code_eff = (SELECT MAX (a1.sgbstdn_term_code_eff)
                                                                                               FROM sgbstdn a1
                                                                                               WHERE a1.sgbstdn_pidm = a.sgbstdn_pidm
                                                                                               AND a1.sgbstdn_program_1 = a.sgbstdn_program_1
                                                                                               )
                                                                AND a.sgbstdn_program_1 = c.prog;

                                                            EXCEPTION WHEN OTHERS THEN
                                                                vl_error := 'Se presento un error al actualizar el tipo de alumno en sgbstdn ' ||SQLERRM;
                                                            END;

                                                         END IF;

                                                    end IF;

                                                    IF c.fecha_inicio IS NOT NULL THEN

                                                        BEGIN

                                                            UPDATE sorlcur SET sorlcur_start_date  = TRUNC (c.fecha_inicio),
                                                                               sorlcur_data_origin = 'PRONOSTICO',
                                                                               sorlcur_user_id = USER
                                                            WHERE 1 = 1
                                                            AND sorlcur_pidm = c.pidm
                                                            AND sorlcur_program = c.prog
                                                            AND sorlcur_lmod_code = 'LEARNER'
                                                            AND sorlcur_key_seqno = c.study;

                                                        EXCEPTION WHEN OTHERS THEN
                                                               vl_error := 'Se presento un error al actualizar la fecha de Inicio de Clases en sorlcur ' ||SQLERRM;
                                                        END;

                                                    END IF;

                                                    conta_ptrm:=0;

                                                    BEGIN

                                                        SELECT COUNT (*)
                                                        INTO conta_ptrm
                                                        FROM sfrareg
                                                        WHERE 1 = 1
                                                        AND sfrareg_pidm = c.pidm
                                                        AND sfrareg_term_code = c.periodo
                                                        AND sfrareg_crn = crn
                                                        AND sfrareg_extension_number = 0
                                                        AND sfrareg_rsts_code = 'RE';

                                                    EXCEPTION WHEN OTHERS THEN
                                                       conta_ptrm :=0;
                                                    END;

                                                    IF conta_ptrm = 0 THEN

                                                        BEGIN
                                                                INSERT INTO sfrareg VALUES(c.pidm,
                                                                                           c.periodo,
                                                                                           crn ,
                                                                                           0,
                                                                                           'RE',
                                                                                           nvl(c.fecha_inicio,pn_fecha),
                                                                                           nvl(f_fin,sysdate),
                                                                                           'N',
                                                                                           'N',
                                                                                           SYSDATE,
                                                                                           USER,
                                                                                           NULL,
                                                                                           NULL,
                                                                                           NULL,
                                                                                           NULL,
                                                                                           NULL,
                                                                                           NULL,
                                                                                           NULL,
                                                                                           NULL,
                                                                                           'PRONOSTICO',
                                                                                           SYSDATE,
                                                                                           NULL,
                                                                                           NULL,
                                                                                           NULL
                                                                                           );
                                                        EXCEPTION WHEN OTHERS THEN
                                                             vl_error := 'Se presento un error al INSERTar el registro de la materia para el alumno ' ||sqlerrm;
                                                        END;

                                                    END IF;


                                                    BEGIN

                                                        SELECT COUNT(1)
                                                        INTO vl_existe
                                                        FROM SHRINST
                                                        WHERE 1 = 1
                                                        AND shrinst_term_code = c.periodo
                                                        AND shrinst_crn = crn
                                                        AND shrinst_pidm = c.pidm;

                                                    EXCEPTION WHEN OTHERS THEN
                                                        vl_existe :=0;
                                                    END;

                                                    IF vl_existe = 0 THEN

                                                        BEGIN
                                                            INSERT INTO SHRINST VALUES (c.periodo,        --SHRINST_TERM_CODE
                                                                                        crn,       --SHRINST_CRN
                                                                                        c.pidm,       --SHRINST_PIDM
                                                                                        sysdate,       --SHRINST_ACTIVITY_DATE
                                                                                        'Y',       --SHRINST_PRIMARY_IND
                                                                                        null,      --SHRINST_SURROGATE_ID
                                                                                        null,      --SHRINST_VERSION
                                                                                        user,       --SHRINST_USER_ID
                                                                                        'PRONOSTICO',       --SHRINST_DATA_ORIGIN
                                                                                        null
                                                                                        );      --SHRINST_VPDI_CODE

                                                        EXCEPTION WHEN OTHERS THEN
                                                             vl_error := 'Se presento un error al INSERTar al alumno en SHRINST ' ||sqlerrm;
                                                        END;

                                                    END IF;

                                                    BEGIN
                                                        UPDATE SZTPRONO SET SZTPRONO_ENVIO_HORARIOS='S'
                                                        WHERE 1 = 1
                                                        AND SZTPRONO_NO_REGLA = p_regla
                                                        AND SZTPRONO_FECHA_INICIO =  pn_fecha
                                                        AND SZTPRONO_ENVIO_HORARIOS='N'
                                                        AND sztprono_materia_legal = c.materia
                                                        AND SZTPRONO_PIDM = c.pidm
                                                        AND SZTPRONO_PTRM_CODE =parte;

                                                    EXCEPTION WHEN OTHERS THEN
                                                      NULL;
                                                    END;

                                                EXCEPTION WHEN OTHERS THEN
                                                    vl_error := 'Se presento un error al INSERTar al alumno en el grupo ' ||SQLERRM;
                                                END;

                                            ELSE

                                                dbms_output.put_line('mensaje:'|| 'No hay cupo en el grupo creado');
                                                schd      :=NULL;
                                                title     :=NULL;
                                                credit    :=NULL;
                                                gmod      :=NULL;
                                                f_inicio  :=NULL;
                                                f_fin     :=NULL;
                                                sem       :=NULL;
                                                credit_bill := NULL;

                                                BEGIN

                                                    SELECT scrschd_schd_code,
                                                           scbcrse_title,
                                                           scbcrse_credit_hr_low,
                                                           scbcrse_bill_hr_low
                                                    INTO schd,
                                                         title,
                                                         credit,
                                                         credit_bill
                                                    FROM scbcrse,
                                                         scrschd
                                                    WHERE 1 = 1
                                                    AND scbcrse_subj_code=c.subj
                                                    AND scbcrse_crse_numb=c.crse
                                                    AND scbcrse_eff_term='000000'
                                                    AND scrschd_subj_code=scbcrse_subj_code
                                                    AND scrschd_crse_numb=scbcrse_crse_numb
                                                    AND scrschd_eff_term=scbcrse_eff_term;

                                                EXCEPTION WHEN OTHERS THEN
                                                    schd     := null;
                                                    title    := null;
                                                    credit   := null;
                                                    credit_bill := null;
                                                END;


                                                BEGIN
                                                    SELECT scrgmod_gmod_code
                                                          INTO gmod
                                                    FROM scrgmod
                                                    WHERE scrgmod_subj_code=c.subj
                                                    AND     scrgmod_crse_numb=c.crse
                                                    AND     scrgmod_default_ind='D';
                                                exception when others then
                                                    gmod:='1';
                                                end;

                                                --aqui se agrego para no gnerera mas grupos
                                                IF c.prof is null then


                                                    crn:=crn;

                                                else

                                                    BEGIN

                                                    SELECT sztcrnv_crn
                                                    INTO crn
                                                    FROM SZTCRNV
                                                    WHERE 1 = 1
                                                    AND rownum = 1
                                                    AND SZTCRNV_crn not in (SELECT to_number(crn)
                                                                            FROM
                                                                            (
                                                                            SELECT case when
                                                                                                    substr(SSBSECT_CRN,1,1) in('L','M') then to_number(substr(SSBSECT_CRN,2,10))
                                                                                          else
                                                                                                to_number(SSBSECT_CRN)
                                                                                          end crn,
                                                                                          SSBSECT_CRN
                                                                                FROM ssbsect
                                                                                WHERE 1 = 1
                                                                                AND ssbsect_term_code= c.periodo
                                                                            )
                                                                            WHERE 1 = 1)
                                                    order by 1;

                                                 EXCEPTION WHEN OTHERS THEN
                                                    raise_application_error (-20002,'Error al 2  '|| SQLCODE||' Error: '||SQLERRM);
                                                    dbms_output.put_line(' error en crn 2 '||sqlerrm);
                                                    crn := NULL;
                                                 END;


                                                    IF c.nivel ='LI' then

                                                        crn:='L'||crn;

                                                    else

                                                        crn:='M'||crn;

                                                    end IF;



                                                end IF;

                                                BEGIN
                                                   SELECT DISTINCT sobptrm_start_date,
                                                                    sobptrm_end_date ,
                                                                    sobptrm_weeks
                                                   INTO f_inicio,
                                                        f_fin,
                                                        sem
                                                   FROM sobptrm
                                                   WHERE 1 = 1
                                                   AND sobptrm_term_code=c.periodo
                                                   AND sobptrm_ptrm_code=c.parte;

                                                EXCEPTION WHEN OTHERS THEN
                                                    NULL;
                                                END;

                                                IF crn IS NOT NULL THEN

                                                    BEGIN

                                                       SELECT SZTPROF_CUPO
                                                       INTO l_maximo_alumnos
                                                       FROM SZTPROF
                                                       WHERE 1 = 1
                                                       AND SZTPROF_no_regla= p_regla
                                                       AND SZTPROF_ID =c.prof
                                                       AND SZTPROF_MATERIA =c.materia;

                                                    EXCEPTION WHEN OTHERS THEN

                                                       l_maximo_alumnos:=50;

                                                    END;


                                                     --raise_application_error (-20002,'Buscamos SSBSECT_CENSUS_ENRL_DATE  '||f_inicio);

                                                    BEGIN

                                                        INSERT INTO ssbsect VALUES (
                                                                                    c.periodo,     --SSBSECT_TERM_CODE
                                                                                    crn,     --SSBSECT_CRN
                                                                                    c.parte,     --SSBSECT_PTRM_CODE
                                                                                    c.subj,     --SSBSECT_SUBJ_CODE
                                                                                    c.crse,     --SSBSECT_CRSE_NUMB
                                                                                    c.grupo,     --SSBSECT_SEQ_NUMB
                                                                                    'A',    --SSBSECT_SSTS_CODE
                                                                                    schd,    --SSBSECT_SCHD_CODE
                                                                                    c.campus,    --SSBSECT_CAMP_CODE
                                                                                    title,   --SSBSECT_CRSE_TITLE
                                                                                    credit,   --SSBSECT_CREDIT_HRS
                                                                                    credit_bill,   --SSBSECT_BILL_HRS
                                                                                    gmod,   --SSBSECT_GMOD_CODE
                                                                                    NULL,  --SSBSECT_SAPR_CODE
                                                                                    NULL, --SSBSECT_SESS_CODE
                                                                                    NULL,  --SSBSECT_LINK_IDENT
                                                                                    NULL,  --SSBSECT_PRNT_IND
                                                                                    'Y',  --SSBSECT_GRADABLE_IND
                                                                                    NULL,  --SSBSECT_TUIW_IND
                                                                                    0, --SSBSECT_REG_ONEUP
                                                                                    0, --SSBSECT_PRIOR_ENRL
                                                                                    0, --SSBSECT_PROJ_ENRL
                                                                                    l_maximo_alumnos, --SSBSECT_MAX_ENRL
                                                                                    0,--SSBSECT_ENRL
                                                                                    l_maximo_alumnos,--SSBSECT_SEATS_AVAIL
                                                                                    NULL,--SSBSECT_TOT_CREDIT_HRS
                                                                                    '0',--SSBSECT_CENSUS_ENRL
                                                                                    f_inicio,--SSBSECT_CENSUS_ENRL_DATE
                                                                                    SYSDATE -5,--SSBSECT_ACTIVITY_DATE
                                                                                    f_inicio,--SSBSECT_PTRM_START_DATE
                                                                                    f_fin,--SSBSECT_PTRM_END_DATE
                                                                                    sem,--SSBSECT_PTRM_WEEKS
                                                                                    NULL,--SSBSECT_RESERVED_IND
                                                                                    NULL, --SSBSECT_WAIT_CAPACITY
                                                                                    NULL,--SSBSECT_WAIT_COUNT
                                                                                    NULL,--SSBSECT_WAIT_AVAIL
                                                                                    NULL,--SSBSECT_LEC_HR
                                                                                    NULL,--SSBSECT_LAB_HR
                                                                                    NULL,--SSBSECT_OTH_HR
                                                                                    NULL,--SSBSECT_CONT_HR
                                                                                    NULL,--SSBSECT_ACCT_CODE
                                                                                    NULL,--SSBSECT_ACCL_CODE
                                                                                    NULL,--SSBSECT_CENSUS_2_DATE
                                                                                    NULL,--SSBSECT_ENRL_CUT_OFF_DATE
                                                                                    NULL,--SSBSECT_ACAD_CUT_OFF_DATE
                                                                                    NULL,--SSBSECT_DROP_CUT_OFF_DATE
                                                                                    NULL,--SSBSECT_CENSUS_2_ENRL
                                                                                    'Y',--SSBSECT_VOICE_AVAIL
                                                                                    'N',--SSBSECT_CAPP_PREREQ_TEST_IND
                                                                                    NULL,--SSBSECT_GSCH_NAME
                                                                                    NULL,--SSBSECT_BEST_OF_COMP
                                                                                    NULL,--SSBSECT_SUBSET_OF_COMP
                                                                                    'NOP',--SSBSECT_INSM_CODE
                                                                                    NULL,--SSBSECT_REG_FROM_DATE
                                                                                    NULL,--SSBSECT_REG_TO_DATE
                                                                                    NULL,--SSBSECT_LEARNER_REGSTART_FDATE
                                                                                    NULL,--SSBSECT_LEARNER_REGSTART_TDATE
                                                                                    NULL,--SSBSECT_DUNT_CODE
                                                                                    NULL,--SSBSECT_NUMBER_OF_UNITS
                                                                                    0,--SSBSECT_NUMBER_OF_EXTENSIONS
                                                                                    'PRONOSTICO',--SSBSECT_DATA_ORIGIN
                                                                                    USER,--SSBSECT_USER_ID
                                                                                    'MOOD',--SSBSECT_INTG_CDE
                                                                                    'B',--SSBSECT_PREREQ_CHK_METHOD_CDE
                                                                                    USER,--SSBSECT_KEYWORD_INDEX_ID
                                                                                    NULL,--SSBSECT_SCORE_OPEN_DATE
                                                                                    NULL,--SSBSECT_SCORE_CUTOFF_DATE
                                                                                    NULL,--SSBSECT_REAS_SCORE_OPEN_DATE
                                                                                    NULL,--SSBSECT_REAS_SCORE_CTOF_DATE
                                                                                    NULL,--SSBSECT_SURROGATE_ID
                                                                                    NULL,--SSBSECT_VERSION
                                                                                    NULL
                                                                                    );--SSBSECT_VPDI_CODE


                                                        BEGIN

                                                            UPDATE sobterm SET sobterm_crn_oneup = crn
                                                            WHERE 1 = 1
                                                            AND sobterm_term_code = c.periodo;

                                                        EXCEPTION WHEN OTHERS THEN
                                                          NULL;
                                                        END;

                                                        BEGIN

                                                             INSERT INTO ssrmeet VALUES(C.periodo,
                                                                                        crn,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        SYSDATE,
                                                                                        f_inicio,
                                                                                        f_fin,
                                                                                        '01',
                                                                                        NULL,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        'ENL',
                                                                                        NULL,
                                                                                        credit,
                                                                                        NULL,
                                                                                        0,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        'CLVI',
                                                                                        'PRONOSTICO',
                                                                                        USER,
                                                                                        NULL,
                                                                                        NULL,
                                                                                        NULL
                                                                                        );

                                                        EXCEPTION WHEN OTHERS THEN
                                                            vl_error := 'Se presento un Error al INSERTar en ssrmeet ' ||SQLERRM;
                                                        END;

                                                        BEGIN

                                                            SELECT spriden_pidm
                                                            INTO  pidm_prof
                                                            FROM  spriden
                                                            WHERE 1 = 1
                                                            AND spriden_id=c.prof
                                                            AND spriden_change_ind IS NULL;

                                                        EXCEPTION WHEN OTHERS THEN
                                                            pidm_prof:=NULL;
                                                        END;

                                                        IF pidm_prof IS NOT NULL THEN

                                                           dbms_output.put_line('Crea el CRN para el docente:'|| pidm_prof  ||'*'||crn);

                                                           BEGIN

                                                               SELECT COUNT (1)
                                                               INTO vl_exite_prof
                                                               FROM sirasgn
                                                               WHERE 1 = 1
                                                               AND sirasgn_term_code = c.periodo
                                                               AND sirasgn_crn = crn;
                                                           -- AND SIRASGN_PIDM = pidm_prof;
                                                           EXCEPTION WHEN OTHERS THEN
                                                              vl_exite_prof := 0;
                                                           END;

                                                           IF vl_exite_prof = 0 THEN

                                                               BEGIN
                                                                       INSERT INTO sirasgn VALUES(c.periodo,
                                                                                                  crn,
                                                                                                  pidm_prof,
                                                                                                  '01',
                                                                                                  100,
                                                                                                  null,
                                                                                                  100,
                                                                                                  'Y',
                                                                                                  null,
                                                                                                  null,
                                                                                                  sysdate -5,
                                                                                                  null,
                                                                                                  null,
                                                                                                  null,
                                                                                                  null,
                                                                                                  'PRONOSTICO',
                                                                                                  'SZFALGO 2',
                                                                                                  null,
                                                                                                  null,
                                                                                                  null,
                                                                                                  null,
                                                                                                  null,
                                                                                                  null
                                                                                                  );
                                                               EXCEPTION WHEN OTHERS THEN
                                                                    NULL;
                                                               END;

                                                           ELSE

                                                               BEGIN

                                                                    UPDATE sirasgn SET sirasgn_primary_ind = NULL
                                                                    WHERE 1 = 1
                                                                    AND sirasgn_term_code = c.periodo
                                                                    AND sirasgn_crn = crn;

                                                               EXCEPTION WHEN OTHERS THEN
                                                                    NULL;
                                                               END;

                                                               BEGIN
                                                                       INSERT INTO sirasgn VALUES(c.periodo,
                                                                                                  crn,
                                                                                                  pidm_prof,
                                                                                                  '01',
                                                                                                  100,
                                                                                                  NULL,
                                                                                                  100,
                                                                                                  'Y',
                                                                                                  NULL,
                                                                                                  NULL,
                                                                                                  SYSDATE,
                                                                                                  NULL,
                                                                                                  NULL,
                                                                                                  NULL,
                                                                                                  NULL,
                                                                                                  'PRONOSTICO',
                                                                                                  'SZFALGO 3',
                                                                                                  NULL,
                                                                                                  NULL,
                                                                                                  NULL,
                                                                                                  NULL,
                                                                                                  NULL,
                                                                                                  NULL
                                                                                                  );
                                                               EXCEPTION WHEN OTHERS THEN
                                                                    NULL;
                                                               END;

                                                           END IF;

                                                        END IF;

                                                        conta_ptrm :=0;

                                                        BEGIN

                                                             SELECT COUNT(*)
                                                             INTO conta_ptrm
                                                             FROM sfbetrm
                                                             WHERE 1 = 1
                                                             AND sfbetrm_term_code=c.periodo
                                                             AND sfbetrm_pidm=c.pidm;

                                                        EXCEPTION WHEN OTHERS THEN
                                                            conta_ptrm := 0;
                                                        END;


                                                        IF conta_ptrm =0 THEN

                                                            BEGIN
                                                                    INSERT INTO sfbetrm VALUES(c.periodo,
                                                                                               c.pidm,
                                                                                               'EL',
                                                                                               SYSDATE,
                                                                                               99.99,
                                                                                               'Y',
                                                                                               NULL,
                                                                                               SYSDATE,
                                                                                               SYSDATE,
                                                                                               NULL,
                                                                                               NULL,
                                                                                               NULL,
                                                                                               NULL,
                                                                                               USER,
                                                                                               NULL,
                                                                                               'PRONOSTICO',
                                                                                               NULL,
                                                                                               0,
                                                                                               NULL,
                                                                                               NULL,
                                                                                               NULL,
                                                                                               NULL,
                                                                                               USER,
                                                                                               NULL
                                                                                               );
                                                            EXCEPTION WHEN OTHERS THEN
                                                                vl_error := ('Se presento un error al INSERTar en la tabla sfbetrm ' || sqlerrm);
                                                            END;

                                                        END IF;

                                                        BEGIN


                                                            BEGIN
                                                                    INSERT INTO sfrstcr VALUES(
                                                                                           c.periodo,     --SFRSTCR_TERM_CODE
                                                                                           c.pidm,     --SFRSTCR_PIDM
                                                                                           crn,     --SFRSTCR_CRN
                                                                                           1,     --SFRSTCR_CLASS_SORT_KEY
                                                                                           c.grupo,    --SFRSTCR_REG_SEQ
                                                                                           c.parte,    --SFRSTCR_PTRM_CODE
                                                                                           'RE',     --SFRSTCR_RSTS_CODE
                                                                                           SYSDATE -5,    --SFRSTCR_RSTS_DATE
                                                                                           NULL,    --SFRSTCR_ERROR_FLAG
                                                                                           NULL,    --SFRSTCR_MESSAGE
                                                                                           credit_bill,    --SFRSTCR_BILL_HR
                                                                                           3, --SFRSTCR_WAIV_HR
                                                                                           credit,     --SFRSTCR_CREDIT_HR
                                                                                           credit_bill,     --SFRSTCR_BILL_HR_HOLD
                                                                                           credit,     --SFRSTCR_CREDIT_HR_HOLD
                                                                                           gmod,     --SFRSTCR_GMOD_CODE
                                                                                           NULL,    --SFRSTCR_GRDE_CODE
                                                                                           NULL,    --SFRSTCR_GRDE_CODE_MID
                                                                                           NULL,    --SFRSTCR_GRDE_DATE
                                                                                           'N',    --SFRSTCR_DUPL_OVER
                                                                                           'N',    --SFRSTCR_LINK_OVER
                                                                                           'N',    --SFRSTCR_CORQ_OVER
                                                                                           'N',    --SFRSTCR_PREQ_OVER
                                                                                           'N',     --SFRSTCR_TIME_OVER
                                                                                           'N',     --SFRSTCR_CAPC_OVER
                                                                                           'N',     --SFRSTCR_LEVL_OVER
                                                                                           'N',     --SFRSTCR_COLL_OVER
                                                                                           'N',     --SFRSTCR_MAJR_OVER
                                                                                           'N',     --SFRSTCR_CLAS_OVER
                                                                                           'N',     --SFRSTCR_APPR_OVER
                                                                                           'N',     --SFRSTCR_APPR_RECEIVED_IND
                                                                                           SYSDATE -5,      --SFRSTCR_ADD_DATE
                                                                                           SYSDATE -5,     --SFRSTCR_ACTIVITY_DATE
                                                                                           c.nivel,     --SFRSTCR_LEVL_CODE
                                                                                           c.campus,     --SFRSTCR_CAMP_CODE
                                                                                           c.materia,     --SFRSTCR_RESERVED_KEY
                                                                                           NULL,     --SFRSTCR_ATTEND_HR
                                                                                           'Y',     --SFRSTCR_REPT_OVER
                                                                                           'N' ,    --SFRSTCR_RPTH_OVER
                                                                                           NULL,    --SFRSTCR_TEST_OVER
                                                                                           'N',    --SFRSTCR_CAMP_OVER
                                                                                           USER,    --SFRSTCR_USER
                                                                                           'N',    --SFRSTCR_DEGC_OVER
                                                                                           'N',    --SFRSTCR_PROG_OVER
                                                                                           NULL,    --SFRSTCR_LAST_ATTEND
                                                                                           NULL,    --SFRSTCR_GCMT_CODE
                                                                                           'PRONOSTICO',    --SFRSTCR_DATA_ORIGIN
                                                                                           SYSDATE,   --SFRSTCR_ASSESS_ACTIVITY_DATE
                                                                                           'N',  --SFRSTCR_DEPT_OVER
                                                                                           'N',  --SFRSTCR_ATTS_OVER
                                                                                           'N', --SFRSTCR_CHRT_OVER
                                                                                           c.grupo , --SFRSTCR_RMSG_CDE
                                                                                           NULL,  --SFRSTCR_WL_PRIORITY
                                                                                           NULL,  --SFRSTCR_WL_PRIORITY_ORIG
                                                                                           NULL,  --SFRSTCR_GRDE_CODE_INCMP_FINAL
                                                                                           NULL, --SFRSTCR_INCOMPLETE_EXT_DATE
                                                                                           'N', --SFRSTCR_MEXC_OVER
                                                                                           c.study,--SFRSTCR_STSP_KEY_SEQUENCE
                                                                                           NULL,--SFRSTCR_BRDH_SEQ_NUM
                                                                                           '01',--SFRSTCR_BLCK_CODE
                                                                                           NULL,--SFRSTCR_STRH_SEQNO
                                                                                           NULL, --SFRSTCR_STRD_SEQNO
                                                                                           NULL,  --SFRSTCR_SURROGATE_ID
                                                                                           NULL, --SFRSTCR_VERSION
                                                                                           USER,--SFRSTCR_USER_ID
                                                                                           vl_orden--SFRSTCR_VPDI_CODE
                                                                                            );
                                                            exception when others then

                                                                dbms_output.put_line('Error al INSERTar  SFRSTCR 2 '||sqlerrm);
                                                            end;


                                                            BEGIN
                                                                UPDATE SZTPRONO SET SZTPRONO_ENVIO_HORARIOS='S'
                                                                WHERE 1 = 1
                                                                AND SZTPRONO_NO_REGLA = p_regla
                                                                AND SZTPRONO_FECHA_INICIO =  pn_fecha
                                                                AND SZTPRONO_PIDM = c.pidm
                                                                AND sztprono_materia_legal = c.materia
                                                                AND SZTPRONO_ENVIO_HORARIOS='N'
                                                                AND SZTPRONO_PTRM_CODE =parte;


                                                            EXCEPTION WHEN OTHERS THEN
                                                              NULL;
                                                            END;


                                                            BEGIN

                                                                 UPDATE ssbsect SET ssbsect_enrl = ssbsect_enrl + 1
                                                                 WHERE 1 = 1
                                                                 AND ssbsect_term_code = c.periodo
                                                                 AND SSBSECT_CRN  = crn;

                                                            EXCEPTION WHEN OTHERS THEN
                                                                vl_error := 'Se presento un error al actualizar el enrolamiento ' ||SQLERRM;
                                                            END;

                                                            BEGIN

                                                                UPDATE ssbsect SET ssbsect_seats_avail=ssbsect_seats_avail -1
                                                                WHERE 1 = 1
                                                                AND ssbsect_term_code = c.periodo
                                                                AND ssbsect_crn  = crn;

                                                            EXCEPTION WHEN OTHERS THEN
                                                                vl_error := 'Se presento un error al actualizar la disponibilidad del grupo ' ||SQLERRM;
                                                            END;

                                                            BEGIN
                                                                     update ssbsect
                                                                            set ssbsect_census_enrl=ssbsect_enrl
                                                                     WHERE SSBSECT_TERM_CODE = c.periodo
                                                                     AND SSBSECT_CRN  = crn;
                                                            Exception
                                                            When Others then
                                                                vl_error := 'Se presento un error al actualizar el Censo del grupo ' ||sqlerrm;
                                                            End;

                                                            IF C.SGBSTDN_STYP_CODE = 'F' THEN

                                                                BEGIN

                                                                    UPDATE sgbstdn a SET a.sgbstdn_styp_code ='N',
                                                                                         a.SGBSTDN_DATA_ORIGIN ='PRONOSTICO',
                                                                                         A.SGBSTDN_USER_ID =USER
                                                                    WHERE 1 = 1
                                                                    AND a.sgbstdn_pidm = c.pidm
                                                                    AND a.sgbstdn_term_code_eff = (SELECT MAX (a1.sgbstdn_term_code_eff)
                                                                                                   FROM sgbstdn a1
                                                                                                   WHERE a1.sgbstdn_pidm = a.sgbstdn_pidm
                                                                                                   AND a1.sgbstdn_program_1 = a.sgbstdn_program_1
                                                                                                   )
                                                                    AND a.sgbstdn_program_1 = c.prog;

                                                                EXCEPTION WHEN OTHERS THEN
                                                                    vl_error := 'Se presento un error al actualizar el tipo de alumno en sgbstdn ' ||SQLERRM;
                                                                END;

                                                            END IF;

                                                            -- para cambio de estatus cuANDo ya tenga más de una calIFiación
                                                            BEGIN

                                                                SELECT COUNT(*)
                                                                INTO l_cambio_estatus
                                                                FROM sfrstcr
                                                                WHERE 1 = 1
                                                                AND SFRSTCR_TERM_CODE||SFRSTCR_PTRM_CODE = c.periodo||c.parte
                                                                AND sfrstcr_pidm = c.pidm;

                                                            EXCEPTION WHEN OTHERS THEN
                                                                l_cambio_estatus:=0;
                                                            END;


                                                            IF l_cambio_estatus > 0 THEN

                                                                IF C.SGBSTDN_STYP_CODE = 'N' THEN

                                                                    BEGIN

                                                                         UPDATE sgbstdn a SET a.sgbstdn_styp_code ='C',
                                                                                              a.SGBSTDN_DATA_ORIGIN ='PRONOSTICO',
                                                                                              A.SGBSTDN_USER_ID =USER
                                                                         WHERE 1 = 1
                                                                         AND a.sgbstdn_pidm = c.pidm
                                                                         AND a.sgbstdn_term_code_eff = (SELECT MAX (a1.sgbstdn_term_code_eff)
                                                                                                        FROM sgbstdn a1
                                                                                                        WHERE 1 = 1
                                                                                                        AND a1.sgbstdn_pidm = a.sgbstdn_pidm
                                                                                                        AND a1.sgbstdn_program_1 = a.sgbstdn_program_1
                                                                                                        )
                                                                          AND a.sgbstdn_program_1 = c.prog;

                                                                    EXCEPTION WHEN OTHERS THEN
                                                                         vl_error := 'Se presento un error al actualizar el tipo de alumno en sgbstdn ' ||sqlerrm;
                                                                    END;

                                                                END IF;

                                                            END IF;

                                                            f_inicio := null;

                                                            BEGIN

                                                                SELECT DISTINCT sobptrm_start_date
                                                                INTO f_inicio
                                                                FROM sobptrm
                                                                WHERE sobptrm_term_code=c.periodo
                                                                AND   sobptrm_ptrm_code=c.parte;

                                                            EXCEPTION WHEN OTHERS THEN
                                                                f_inicio := null;
                                                                vl_error := 'Se presento un error al Obtener la fecha de inicio de Clases ' ||SQLERRM||' poe';
                                                            END;

                                                            IF f_inicio is NOT NULL THEN

                                                                BEGIN
                                                                        Update sorlcur
                                                                        set sorlcur_start_date  = trunc (f_inicio)
                                                                        WHERE SORLCUR_PIDM = c.pidm
                                                                        AND SORLCUR_PROGRAM = c.prog
                                                                        AND SORLCUR_LMOD_CODE = 'LEARNER'
                                                                        AND SORLCUR_KEY_SEQNO = c.study;
                                                                EXCEPTION WHEN OTHERS THEN
                                                                       vl_error := 'Se presento un error al actualizar la fecha de Inicio de Clases en sorlcur ' ||SQLERRM;
                                                                END;

                                                            END IF;

                                                            conta_ptrm:=0;

                                                            BEGIN

                                                                SELECT COUNT (*)
                                                                INTO conta_ptrm
                                                                FROM sfrareg
                                                                WHERE 1 = 1
                                                                AND sfrareg_pidm = c.pidm
                                                                AND sfrareg_term_code = c.periodo
                                                                AND sfrareg_crn = crn
                                                                AND sfrareg_extension_number = 0
                                                                AND sfrareg_rsts_code = 'RE';

                                                            EXCEPTION WHEN OTHERS THEN
                                                               conta_ptrm :=0;
                                                            END;

                                                            IF conta_ptrm = 0 THEN

                                                                 BEGIN
                                                                         INSERT INTO sfrareg VALUES(c.pidm,
                                                                                                    c.periodo,
                                                                                                    crn ,
                                                                                                    0,
                                                                                                    'RE',
                                                                                                    nvl(f_inicio,pn_fecha),
                                                                                                    nvl(f_fin,sysdate),
                                                                                                    'N',
                                                                                                    'N',
                                                                                                    SYSDATE,
                                                                                                    USER,
                                                                                                    NULL,
                                                                                                    NULL,
                                                                                                    NULL,
                                                                                                    NULL,
                                                                                                    NULL,
                                                                                                    NULL,
                                                                                                    NULL,
                                                                                                    NULL,
                                                                                                    'PRONOSTICO',
                                                                                                    SYSDATE,
                                                                                                    NULL,
                                                                                                    NULL,
                                                                                                    NULL
                                                                                                    );
                                                                 EXCEPTION WHEN OTHERS THEN
                                                                      vl_error := 'Se presento un error al INSERTar el registro de la materia para el alumno ' ||SQLERRM;
                                                                 END;

                                                            END IF;

                                                            BEGIN
                                                                UPDATE SZTPRONO SET SZTPRONO_ENVIO_HORARIOS='S'
                                                                WHERE 1 = 1
                                                                AND SZTPRONO_NO_REGLA = p_regla
                                                                AND SZTPRONO_FECHA_INICIO =  pn_fecha
                                                                AND SZTPRONO_ENVIO_HORARIOS='N'
                                                                AND sztprono_materia_legal = c.materia
                                                                AND SZTPRONO_PIDM = c.pidm
                                                                AND SZTPRONO_PTRM_CODE =parte;


                                                           EXCEPTION WHEN OTHERS THEN
                                                              NULL;
                                                           END;

                                                        EXCEPTION WHEN OTHERS THEN
                                                            vl_error := 'Se presento un error al INSERTar al alumno en el grupo2 ' ||SQLERRM;
                                                        END;


                                                    EXCEPTION WHEN OTHERS THEN
                                                        vl_error := 'Se presento un Error al INSERTar el nuevo grupo en la tabla SSBSECT ' ||SQLERRM;
                                                    END;

                                                END IF;

                                            END IF;  -------- > No hay cupo en el grupo

                                        ELSE

                                            dbms_output.put_line('mensaje:'|| 'No hay grupo creado Con docente');

                                            schd      := NULL;
                                            title     := NULL;
                                            credit    := NULL;
                                            gmod      := NULL;
                                            f_inicio  := NULL;
                                            f_fin     := NULL;
                                            sem       := NULL;
                                            crn       := NULL;
                                            pidm_prof := NULL;
                                            vl_exite_prof :=0;

                                            BEGIN

                                                 SELECT scrschd_schd_code,
                                                        scbcrse_title,
                                                        scbcrse_credit_hr_low,
                                                        scbcrse_bill_hr_low
                                                 INTO schd,
                                                      title,
                                                      credit,
                                                      credit_bill
                                                 FROM scbcrse,
                                                      scrschd
                                                 WHERE 1 = 1
                                                 AND scbcrse_subj_code=c.subj
                                                 AND scbcrse_crse_numb=c.crse
                                                 AND scbcrse_eff_term='000000'
                                                 AND scrschd_subj_code=scbcrse_subj_code
                                                 AND scrschd_crse_numb=scbcrse_crse_numb
                                                 AND scrschd_eff_term=scbcrse_eff_term;

                                            EXCEPTION WHEN OTHERS THEN
                                                schd         := NULL;
                                                title        := NULL;
                                                credit       := NULL;
                                                credit_bill  := NULL;
                                            END;

                                            BEGIN

                                                SELECT scrgmod_gmod_code
                                                INTO gmod
                                                FROM scrgmod
                                                WHERE 1 = 1
                                                AND scrgmod_subj_code=c.subj
                                                AND scrgmod_crse_numb=c.crse
                                                AND scrgmod_default_ind='D';

                                            EXCEPTION WHEN OTHERS THEN
                                                gmod:='1';
                                            END;

                                            BEGIN

                                                SELECT sztcrnv_crn
                                                INTO crn
                                                FROM SZTCRNV
                                                WHERE 1 = 1
                                                AND rownum = 1
                                                AND SZTCRNV_crn not in (SELECT to_number(crn)
                                                                        FROM
                                                                        (
                                                                        SELECT case when
                                                                                                substr(SSBSECT_CRN,1,1) in('L','M') then to_number(substr(SSBSECT_CRN,2,10))
                                                                                      else
                                                                                            to_number(SSBSECT_CRN)
                                                                                      end crn,
                                                                                      SSBSECT_CRN
                                                                            FROM ssbsect
                                                                            WHERE 1 = 1
                                                                            AND ssbsect_term_code= c.periodo
                                                                        )
                                                                        WHERE 1 = 1)
                                                order by 1;

                                             EXCEPTION WHEN OTHERS THEN
                                                raise_application_error (-20002,'Error al 2  '|| SQLCODE||' Error: '||SQLERRM);
                                                dbms_output.put_line(' error en crn 2 '||sqlerrm);
                                                crn := NULL;
                                             END;


                                            IF c.nivel ='LI' then

                                                crn:='L'||crn;

                                            else

                                                crn:='M'||crn;

                                            end IF;

                                            BEGIN

                                               SELECT DISTINCT sobptrm_start_date,
                                                               sobptrm_end_date,
                                                               sobptrm_weeks
                                               INTO f_inicio,
                                                    f_fin,
                                                    sem
                                               FROM sobptrm
                                               WHERE 1  = 1
                                               AND sobptrm_term_code=c.periodo
                                               AND sobptrm_ptrm_code=c.parte;

                                            EXCEPTION WHEN OTHERS THEN
                                                vl_error := 'No se Encontro configuracion para el Periodo= ' ||c.periodo ||' y Parte de Periodo= '||c.parte ||SQLERRM;
                                            END;


                                            IF crn IS NOT NULL THEN

                                            -- le movemos extraemos el numero de alumonos de la tabla de profesores

                                                BEGIN

                                                    SELECT SZTPROF_CUPO
                                                    INTO l_maximo_alumnos
                                                    FROM SZTPROF
                                                    WHERE 1 = 1
                                                    AND SZTPROF_no_regla= p_regla
                                                    AND SZTPROF_ID =c.prof
                                                    AND SZTPROF_MATERIA =c.materia;

                                                EXCEPTION WHEN OTHERS THEN
                                                    l_maximo_alumnos:=50;
                                                END;

                                                --raise_application_error (-20002,'Buscamos SSBSECT_CENSUS_ENRL_DATE 2--> '||f_inicio||' periodo '||c.periodo||' Parte periodo '||c.parte);

                                                BEGIN

                                                    INSERT INTO ssbsect VALUES (
                                                                                c.periodo,     --SSBSECT_TERM_CODE
                                                                                crn,     --SSBSECT_CRN
                                                                                c.parte,     --SSBSECT_PTRM_CODE
                                                                                c.subj,     --SSBSECT_SUBJ_CODE
                                                                                c.crse,     --SSBSECT_CRSE_NUMB
                                                                                c.grupo,     --SSBSECT_SEQ_NUMB
                                                                                'A',    --SSBSECT_SSTS_CODE
                                                                                schd,    --SSBSECT_SCHD_CODE
                                                                                c.campus,    --SSBSECT_CAMP_CODE
                                                                                title,   --SSBSECT_CRSE_TITLE
                                                                                credit,   --SSBSECT_CREDIT_HRS
                                                                                credit_bill,   --SSBSECT_BILL_HRS
                                                                                gmod,   --SSBSECT_GMOD_CODE
                                                                                NULL,  --SSBSECT_SAPR_CODE
                                                                                NULL, --SSBSECT_SESS_CODE
                                                                                NULL,  --SSBSECT_LINK_IDENT
                                                                                NULL,  --SSBSECT_PRNT_IND
                                                                                'Y',  --SSBSECT_GRADABLE_IND
                                                                                NULL,  --SSBSECT_TUIW_IND
                                                                                0, --SSBSECT_REG_ONEUP
                                                                                0, --SSBSECT_PRIOR_ENRL
                                                                                0, --SSBSECT_PROJ_ENRL
                                                                                l_maximo_alumnos, --SSBSECT_MAX_ENRL
                                                                                0,--SSBSECT_ENRL
                                                                                l_maximo_alumnos,--SSBSECT_SEATS_AVAIL
                                                                                NULL,--SSBSECT_TOT_CREDIT_HRS
                                                                                '0',--SSBSECT_CENSUS_ENRL
                                                                                NVL(f_inicio,SYSDATE),--SSBSECT_CENSUS_ENRL_DATE
                                                                                SYSDATE,--SSBSECT_ACTIVITY_DATE
                                                                                NVL(f_inicio,SYSDATE),--SSBSECT_PTRM_START_DATE
                                                                                NVL(f_FIN,SYSDATE),--SSBSECT_PTRM_END_DATE
                                                                                sem,--SSBSECT_PTRM_WEEKS
                                                                                NULL,--SSBSECT_RESERVED_IND
                                                                                NULL, --SSBSECT_WAIT_CAPACITY
                                                                                NULL,--SSBSECT_WAIT_COUNT
                                                                                NULL,--SSBSECT_WAIT_AVAIL
                                                                                NULL,--SSBSECT_LEC_HR
                                                                                NULL,--SSBSECT_LAB_HR
                                                                                NULL,--SSBSECT_OTH_HR
                                                                                NULL,--SSBSECT_CONT_HR
                                                                                NULL,--SSBSECT_ACCT_CODE
                                                                                NULL,--SSBSECT_ACCL_CODE
                                                                                NULL,--SSBSECT_CENSUS_2_DATE
                                                                                NULL,--SSBSECT_ENRL_CUT_OFF_DATE
                                                                                NULL,--SSBSECT_ACAD_CUT_OFF_DATE
                                                                                NULL,--SSBSECT_DROP_CUT_OFF_DATE
                                                                                NULL,--SSBSECT_CENSUS_ENRL
                                                                                'Y',--SSBSECT_VOICE_AVAIL
                                                                                'N',--SSBSECT_CAPP_PREREQ_TEST_IND
                                                                                NULL,--SSBSECT_GSCH_NAME
                                                                                NULL,--SSBSECT_BEST_OF_COMP
                                                                                NULL,--SSBSECT_SUBSET_OF_COMP
                                                                                'NOP',--SSBSECT_INSM_CODE
                                                                                NULL,--SSBSECT_REG_FROM_DATE
                                                                                NULL,--SSBSECT_REG_TO_DATE
                                                                                NULL,--SSBSECT_LEARNER_REGSTART_FDATE
                                                                                NULL,--SSBSECT_LEARNER_REGSTART_TDATE
                                                                                NULL,--SSBSECT_DUNT_CODE
                                                                                NULL,--SSBSECT_NUMBER_OF_UNITS
                                                                                0,--SSBSECT_NUMBER_OF_EXTENSIONS
                                                                                'PRONOSTICO',--SSBSECT_DATA_ORIGIN
                                                                                USER,--SSBSECT_USER_ID
                                                                                'MOOD',--SSBSECT_INTG_CDE
                                                                                'B',--SSBSECT_PREREQ_CHK_METHOD_CDE
                                                                                USER,--SSBSECT_KEYWORD_INDEX_ID
                                                                                NULL,--SSBSECT_SCORE_OPEN_DATE
                                                                                NULL,--SSBSECT_SCORE_CUTOFF_DATE
                                                                                NULL,--SSBSECT_REAS_SCORE_OPEN_DATE
                                                                                NULL,--SSBSECT_REAS_SCORE_CTOF_DATE
                                                                                NULL,--SSBSECT_SURROGATE_ID
                                                                                NULL,--SSBSECT_VERSION
                                                                                NULL--SSBSECT_VPDI_CODE
                                                                                );


                                                    BEGIN

                                                        UPDATE SOBTERM set sobterm_crn_oneup = crn
                                                        WHERE 1 = 1
                                                        AND sobterm_term_code = c.periodo;

                                                    EXCEPTION WHEN OTHERS THEN
                                                        NULL;
                                                    END;

                                                    BEGIN

                                                         INSERT INTO ssrmeet VALUES(C.periodo,
                                                                                    crn,
                                                                                    NULL,
                                                                                    NULL,
                                                                                    NULL,
                                                                                    NULL,
                                                                                    NULL,
                                                                                    NULL,
                                                                                    SYSDATE,
                                                                                    f_inicio,
                                                                                    f_fin,
                                                                                    '01',
                                                                                    NULL,
                                                                                    NULL,
                                                                                    NULL,
                                                                                    NULL,
                                                                                    NULL,
                                                                                    NULL,
                                                                                    NULL,
                                                                                    'ENL',
                                                                                    NULL,
                                                                                    credit,
                                                                                    NULL,
                                                                                    0,
                                                                                    NULL,
                                                                                    NULL,
                                                                                    NULL,
                                                                                    'CLVI',
                                                                                    'PRONOSTICO',
                                                                                    USER,
                                                                                    NULL,
                                                                                    NULL,
                                                                                    NULL
                                                                                    );
                                                    EXCEPTION WHEN OTHERS THEN
                                                        vl_error := 'Se presento un Error al INSERTar en ssrmeet ' ||SQLERRM;
                                                    END;

                                                    BEGIN

                                                        SELECT spriden_pidm
                                                        INTO pidm_prof
                                                        FROM  spriden
                                                        WHERE 1 = 1
                                                        AND spriden_id=c.prof
                                                        AND spriden_change_ind IS NULL;

                                                    EXCEPTION WHEN OTHERS THEN
                                                        pidm_prof:=NULL;
                                                    END;

                                                    IF pidm_prof IS NOT NULL THEN

                                                        dbms_output.put_line('Crea el CRN para el docente:'|| pidm_prof  ||'*'||crn);

                                                        BEGIN
                                                              SELECT COUNT (1)
                                                              INTO vl_exite_prof
                                                              FROM sirasgn
                                                              WHERE 1 = 1
                                                              AND sirasgn_term_code = c.periodo
                                                              AND sirasgn_crn = crn;

                                                        EXCEPTION WHEN OTHERS THEN
                                                            vl_exite_prof := 0;
                                                        END;

                                                        IF vl_exite_prof = 0 THEN

                                                            BEGIN
                                                                     INSERT INTO sirasgn VALUES(
                                                                                                c.periodo,
                                                                                                crn,
                                                                                                pidm_prof,
                                                                                                '01',
                                                                                                100,
                                                                                                NULL,
                                                                                                100,
                                                                                                'Y',
                                                                                                NULL,
                                                                                                NULL,
                                                                                                SYSDATE,
                                                                                                NULL,
                                                                                                NULL,
                                                                                                NULL,
                                                                                                NULL,
                                                                                                'PRONOSTICO',
                                                                                                'SZFALGO 4',
                                                                                                NULL,
                                                                                                NULL,
                                                                                                NULL,
                                                                                                NULL,
                                                                                                NULL,
                                                                                                NULL
                                                                                                );
                                                            EXCEPTION WHEN OTHERS THEN
                                                                NULL;
                                                            END;

                                                        ELSE

                                                            BEGIN

                                                                UPDATE sirasgn SET sirasgn_primary_ind = NULL
                                                                WHERE 1 = 1
                                                                AND sirasgn_term_code = c.periodo
                                                                AND sirasgn_crn = crn;

                                                            EXCEPTION WHEN OTHERS THEN
                                                                NULL;
                                                            END;

                                                            BEGIN
                                                                    INSERT INTO sirasgn VALUES(c.periodo,
                                                                                               crn,
                                                                                               pidm_prof,
                                                                                               '01',
                                                                                               100,
                                                                                               NULL,
                                                                                               100,
                                                                                               'Y',
                                                                                               NULL,
                                                                                               NULL,
                                                                                               SYSDATE,
                                                                                               NULL,
                                                                                               NULL,
                                                                                               NULL,
                                                                                               NULL,
                                                                                               'PRONOSTICO',
                                                                                               'SZFALGO 5',
                                                                                               NULL,
                                                                                               NULL,
                                                                                               NULL,
                                                                                               NULL,
                                                                                               NULL,
                                                                                               NULL
                                                                                               );
                                                            EXCEPTION WHEN OTHERS THEN
                                                                NULL;
                                                            END;

                                                        END IF;

                                                    END IF;

                                                    conta_ptrm :=0;

                                                    BEGIN
                                                         SELECT COUNT(*)
                                                         INTO conta_ptrm
                                                         FROM sfbetrm
                                                         WHERE 1 = 1
                                                         AND sfbetrm_term_code=c.periodo
                                                         AND sfbetrm_pidm=c.pidm;
                                                    Exception
                                                        When Others then
                                                          conta_ptrm := 0;
                                                    End;


                                                    IF conta_ptrm =0 THEN

                                                        BEGIN

                                                            INSERT INTO sfbetrm VALUES(
                                                                                       c.periodo,
                                                                                       c.pidm,
                                                                                       'EL',
                                                                                       SYSDATE,
                                                                                       99.99,
                                                                                       'Y',
                                                                                       NULL,
                                                                                       SYSDATE,
                                                                                       SYSDATE,
                                                                                       NULL,
                                                                                       NULL,
                                                                                       NULL,
                                                                                       NULL,
                                                                                       USER,
                                                                                       NULL,
                                                                                       'PRONOSTICO',
                                                                                       NULL,
                                                                                       0,
                                                                                       NULL,
                                                                                       NULL,
                                                                                       NULL,
                                                                                       NULL,
                                                                                       USER,
                                                                                       NULL
                                                                                       );
                                                        EXCEPTION WHEN OTHERS THEN
                                                            vl_error := ('Se presento un error al INSERTar en la tabla sfbetrm ' || SQLERRM);
                                                        END;

                                                    END IF;

                                                    BEGIN

                                                        BEGIN



                                                            INSERT INTO sfrstcr VALUES(
                                                                                       c.periodo,     --SFRSTCR_TERM_CODE
                                                                                       c.pidm,     --SFRSTCR_PIDM
                                                                                       crn,     --SFRSTCR_CRN
                                                                                       1,     --SFRSTCR_CLASS_SORT_KEY
                                                                                       c.grupo,    --SFRSTCR_REG_SEQ
                                                                                       c.parte,    --SFRSTCR_PTRM_CODE
                                                                                       'RE',     --SFRSTCR_RSTS_CODE
                                                                                       sysdate -5,    --SFRSTCR_RSTS_DATE
                                                                                       null,    --SFRSTCR_ERROR_FLAG
                                                                                       null,    --SFRSTCR_MESSAGE
                                                                                       credit_bill,    --SFRSTCR_BILL_HR
                                                                                       3, --SFRSTCR_WAIV_HR
                                                                                       credit,     --SFRSTCR_CREDIT_HR
                                                                                       credit_bill,     --SFRSTCR_BILL_HR_HOLD
                                                                                       credit,     --SFRSTCR_CREDIT_HR_HOLD
                                                                                       gmod,     --SFRSTCR_GMOD_CODE
                                                                                       null,    --SFRSTCR_GRDE_CODE
                                                                                       null,    --SFRSTCR_GRDE_CODE_MID
                                                                                       null,    --SFRSTCR_GRDE_DATE
                                                                                       'N',    --SFRSTCR_DUPL_OVER
                                                                                       'N',    --SFRSTCR_LINK_OVER
                                                                                       'N',    --SFRSTCR_CORQ_OVER
                                                                                       'N',    --SFRSTCR_PREQ_OVER
                                                                                       'N',     --SFRSTCR_TIME_OVER
                                                                                       'N',     --SFRSTCR_CAPC_OVER
                                                                                       'N',     --SFRSTCR_LEVL_OVER
                                                                                       'N',     --SFRSTCR_COLL_OVER
                                                                                       'N',     --SFRSTCR_MAJR_OVER
                                                                                       'N',     --SFRSTCR_CLAS_OVER
                                                                                       'N',     --SFRSTCR_APPR_OVER
                                                                                       'N',     --SFRSTCR_APPR_RECEIVED_IND
                                                                                       sysdate -5,      --SFRSTCR_ADD_DATE
                                                                                       sysdate -5,     --SFRSTCR_ACTIVITY_DATE
                                                                                       c.nivel,     --SFRSTCR_LEVL_CODE
                                                                                       c.campus,     --SFRSTCR_CAMP_CODE
                                                                                       c.materia,     --SFRSTCR_RESERVED_KEY
                                                                                       null,     --SFRSTCR_ATTEND_HR
                                                                                       'Y',     --SFRSTCR_REPT_OVER
                                                                                       'N' ,    --SFRSTCR_RPTH_OVER
                                                                                       null,    --SFRSTCR_TEST_OVER
                                                                                       'N',    --SFRSTCR_CAMP_OVER
                                                                                       user,    --SFRSTCR_USER
                                                                                       'N',    --SFRSTCR_DEGC_OVER
                                                                                       'N',    --SFRSTCR_PROG_OVER
                                                                                       null,    --SFRSTCR_LAST_ATTEND
                                                                                       null,    --SFRSTCR_GCMT_CODE
                                                                                       'PRONOSTICO',    --SFRSTCR_DATA_ORIGIN
                                                                                       sysdate,   --SFRSTCR_ASSESS_ACTIVITY_DATE
                                                                                       'N',  --SFRSTCR_DEPT_OVER
                                                                                       'N',  --SFRSTCR_ATTS_OVER
                                                                                       'N', --SFRSTCR_CHRT_OVER
                                                                                       c.grupo , --SFRSTCR_RMSG_CDE
                                                                                       null,  --SFRSTCR_WL_PRIORITY
                                                                                       null,  --SFRSTCR_WL_PRIORITY_ORIG
                                                                                       null,  --SFRSTCR_GRDE_CODE_INCMP_FINAL
                                                                                       null, --SFRSTCR_INCOMPLETE_EXT_DATE
                                                                                       'N', --SFRSTCR_MEXC_OVER
                                                                                       c.study,--SFRSTCR_STSP_KEY_SEQUENCE
                                                                                       null,--SFRSTCR_BRDH_SEQ_NUM
                                                                                       '01',--SFRSTCR_BLCK_CODE
                                                                                       null,--SFRSTCR_STRH_SEQNO
                                                                                       null, --SFRSTCR_STRD_SEQNO
                                                                                       null,  --SFRSTCR_SURROGATE_ID
                                                                                       null, --SFRSTCR_VERSION
                                                                                       user,--SFRSTCR_USER_ID
                                                                                       vl_orden--SFRSTCR_VPDI_CODE
                                                                                       );
                                                        EXCEPTION WHEN OTHERS THEN
                                                            dbms_output.put_line('Error al INSERTar  SFRSTCR xxx '||sqlerrm);
                                                        END;


                                                        BEGIN
                                                            UPDATE SZTPRONO SET SZTPRONO_ENVIO_HORARIOS='S'
                                                            WHERE 1 = 1
                                                            AND SZTPRONO_NO_REGLA = p_regla
                                                            AND SZTPRONO_FECHA_INICIO =  pn_fecha
                                                            AND SZTPRONO_PIDM = c.pidm
                                                            AND sztprono_materia_legal = c.materia
                                                            AND SZTPRONO_ENVIO_HORARIOS='N';


                                                        EXCEPTION WHEN OTHERS THEN
                                                          NULL;
                                                        END;


                                                        BEGIN

                                                             UPDATE ssbsect SET ssbsect_enrl = ssbsect_enrl + 1
                                                             WHERE 1 = 1
                                                             AND ssbsect_term_code = c.periodo
                                                             AND SSBSECT_CRN  = crn;

                                                        EXCEPTION WHEN OTHERS THEN
                                                            vl_error := 'Se presento un error al actualizar el enrolamiento ' ||SQLERRM;
                                                        END;

                                                        BEGIN

                                                            UPDATE ssbsect SET ssbsect_seats_avail=ssbsect_seats_avail -1
                                                            WHERE 1 = 1
                                                            AND ssbsect_term_code = c.periodo
                                                            AND ssbsect_crn  = crn;

                                                        EXCEPTION WHEN OTHERS THEN
                                                            vl_error := 'Se presento un error al actualizar la disponibilidad del grupo ' ||SQLERRM;
                                                        END;

                                                        BEGIN

                                                            UPDATE ssbsect SET ssbsect_census_enrl=ssbsect_enrl
                                                            WHERE 1 =  1
                                                            AND ssbsect_term_code = c.periodo
                                                            AND ssbsect_crn  = crn;

                                                        EXCEPTION WHEN OTHERS THEN
                                                            vl_error := 'Se presento un error al actualizar el Censo del grupo ' ||SQLERRM;
                                                        END;

                                                        IF C.SGBSTDN_STYP_CODE = 'F' THEN

                                                            BEGIN

                                                                UPDATE sgbstdn a SET a.sgbstdn_styp_code ='N',
                                                                                     a.SGBSTDN_DATA_ORIGIN ='PRONOSTICO',
                                                                                     A.SGBSTDN_USER_ID =USER
                                                                WHERE 1 = 1
                                                                AND a.sgbstdn_pidm = c.pidm
                                                                AND a.sgbstdn_term_code_eff = (SELECT MAX (a1.sgbstdn_term_code_eff)
                                                                                               FROM sgbstdn a1
                                                                                               WHERE a1.sgbstdn_pidm = a.sgbstdn_pidm
                                                                                               AND a1.sgbstdn_program_1 = a.sgbstdn_program_1
                                                                                               )
                                                                AND a.sgbstdn_program_1 = c.prog;

                                                            EXCEPTION WHEN OTHERS THEN
                                                                vl_error := 'Se presento un error al actualizar el tipo de alumno en sgbstdn ' ||SQLERRM;
                                                            END;

                                                        END IF;

                                                        BEGIN

                                                            SELECT COUNT(*)
                                                            INTO l_cambio_estatus
                                                            FROM sfrstcr
                                                            WHERE 1 = 1
                                                            AND SFRSTCR_TERM_CODE||SFRSTCR_PTRM_CODE = c.periodo||c.parte
                                                            AND sfrstcr_pidm = c.pidm;

                                                        EXCEPTION WHEN OTHERS THEN
                                                            l_cambio_estatus:=0;
                                                        END;

                                                        IF l_cambio_estatus > 0 THEN

                                                            IF C.SGBSTDN_STYP_CODE = 'N' THEN

                                                                BEGIN

                                                                    UPDATE sgbstdn a SET a.sgbstdn_styp_code ='C',
                                                                                         a.SGBSTDN_DATA_ORIGIN ='PRONOSTICO',
                                                                                         A.SGBSTDN_USER_ID =USER
                                                                    WHERE 1 = 1
                                                                    AND a.sgbstdn_pidm = c.pidm
                                                                    AND a.sgbstdn_term_code_eff = (
                                                                                                   SELECT MAX (a1.sgbstdn_term_code_eff)
                                                                                                   FROM sgbstdn a1
                                                                                                   WHERE 1 = 1
                                                                                                   AND a1.sgbstdn_pidm = a.sgbstdn_pidm
                                                                                                   AND a1.sgbstdn_program_1 = a.sgbstdn_program_1
                                                                                                   )
                                                                    AND a.sgbstdn_program_1 = c.prog;

                                                                EXCEPTION WHEN OTHERS THEN
                                                                    vl_error := 'Se presento un error al actualizar el tipo de alumno en sgbstdn ' ||SQLERRM;
                                                                END;

                                                            END IF;

                                                        end IF;

                                                        f_inicio := NULL;

                                                        BEGIN
                                                               SELECT DISTINCT sobptrm_start_date
                                                               INTO f_inicio
                                                               FROM sobptrm
                                                               WHERE sobptrm_term_code=c.periodo
                                                               AND  sobptrm_ptrm_code=c.parte;
                                                        EXCEPTION WHEN OTHERS THEN
                                                           f_inicio := NULL;
                                                           vl_error := 'Se presento un error al Obtener la fecha de inicio de Clases ' ||SQLERRM;
                                                        END;

                                                        IF f_inicio IS NOT NULL THEN

                                                            BEGIN

                                                                UPDATE sorlcur SET sorlcur_start_date  = TRUNC(f_inicio)
                                                                WHERE 1 = 1
                                                                AND sorlcur_pidm = c.pidm
                                                                AND sorlcur_program = c.prog
                                                                AND sorlcur_lmod_code = 'LEARNER'
                                                                AND sorlcur_key_seqno = c.study;

                                                            EXCEPTION WHEN OTHERS THEN
                                                                vl_error := 'Se presento un error al actualizar la fecha de Inicio de Clases en sorlcur ' ||SQLERRM;
                                                            END;

                                                        END IF;

                                                        conta_ptrm:=0;

                                                        BEGIN

                                                            SELECT COUNT (*)
                                                            INTO conta_ptrm
                                                            FROM sfrareg
                                                            WHERE 1 = 1
                                                            AND sfrareg_pidm = c.pidm
                                                            AND sfrareg_term_code = c.periodo
                                                            AND sfrareg_crn = crn
                                                            AND sfrareg_extension_number = 0
                                                            AND sfrareg_rsts_code = 'RE';

                                                        EXCEPTION WHEN OTHERS THEN
                                                           conta_ptrm :=0;

                                                        END;

                                                        IF conta_ptrm = 0 THEN

                                                            BEGIN

                                                                INSERT INTO sfrareg VALUES(
                                                                                           c.pidm,
                                                                                           c.periodo,
                                                                                           crn ,
                                                                                           0,
                                                                                           'RE',
                                                                                           nvl(f_inicio,pn_fecha),
                                                                                           nvl(f_fin,sysdate),
                                                                                           'N',
                                                                                           'N',
                                                                                           SYSDATE,
                                                                                           USER,
                                                                                           NULL,
                                                                                           NULL,
                                                                                           NULL,
                                                                                           NULL,
                                                                                           NULL,
                                                                                           NULL,
                                                                                           NULL,
                                                                                           NULL,
                                                                                           'PRONOSTICO',
                                                                                           SYSDATE,
                                                                                           NULL,
                                                                                           NULL,
                                                                                           NULL
                                                                                           );
                                                            EXCEPTION WHEN OTHERS THEN
                                                                 vl_error := 'Se presento un error al INSERTar el registro de la materia para el alumno ' ||SQLERRM;
                                                            END;

                                                        END IF;

                                                        BEGIN
                                                            UPDATE SZTPRONO SET SZTPRONO_ENVIO_HORARIOS='S'
                                                            WHERE 1 = 1
                                                            AND SZTPRONO_NO_REGLA = p_regla
                                                            AND SZTPRONO_FECHA_INICIO =  pn_fecha
                                                            AND SZTPRONO_ENVIO_HORARIOS='N'
                                                            AND sztprono_materia_legal = c.materia
                                                            AND SZTPRONO_PIDM = c.pidm;


                                                        EXCEPTION WHEN OTHERS THEN
                                                          NULL;
                                                        END;

                                                    EXCEPTION WHEN OTHERS THEN
                                                        vl_error := 'Se presento un error al INSERTar al alumno en el grupo3 ' ||SQLERRM;
                                                    END;

                                                    dbms_output.put_line('mensaje1:'|| 'SE creo el grupo :=' ||crn);

                                                EXCEPTION WHEN OTHERS THEN
                                                    vl_error := 'Se presento un Error al INSERTar el nuevo grupo 3 ' ||SQLERRM;
                                                END;

                                            END IF;

                                        END IF;  ------ No hay  CRN Creado

                                        IF vl_error = 'EXITO' THEN

                                            COMMIT; --Commit;
                                            --dbms_output.put_line('mensaje:'||vl_error);
                                            BEGIN

                                                INSERT INTO sztcarga VALUES (
                                                                             c.iden, --SZCARGA_ID
                                                                             c.materia, --SZCARGA_MATERIA
                                                                             c.prog,         --SZCARGA_PROGRAM
                                                                             c.periodo,         --SZCARGA_TERM_CODE
                                                                             c.parte,         --SZCARGA_PTRM_CODE
                                                                             c.grupo,         --SZCARGA_GRUPO
                                                                             NULL,         --SZCARGA_CALIF
                                                                             c.prof,         --SZCARGA_ID_PROF
                                                                             USER,         --SZCARGA_USER_ID
                                                                             SYSDATE,         --SZCARGA_ACTIVITY_DATE
                                                                             c.fecha_inicio,         --SZCARGA_FECHA_INI
                                                                             'P',          --SZCARGA_ESTATUS
                                                                             'Horario Generado' ,  --SZCARGA_OBSERVACIONES
                                                                             'PRONOSTICO',
                                                                             p_regla
                                                                             );
                                            EXCEPTION WHEN DUP_VAL_ON_INDEX THEN

                                                BEGIN

                                                    UPDATE sztcarga set szcarga_estatus = 'P' ,
                                                                        szcarga_observaciones =  'Horario Generado',
                                                                        szcarga_activity_date = sysdate
                                                    WHERE 1 = 1
                                                    AND SZCARGA_ID = c.iden
                                                    AND SZCARGA_MATERIA = c.materia
                                                    AND SZTCARGA_TIPO_PROC = 'MATE'
                                                    AND trunc (SZCARGA_FECHA_INI) = c.fecha_inicio;

                                                EXCEPTION WHEN OTHERS THEN
                                                  VL_ERROR := 'Se presento un Error al Actualizar la bitacora '||SQLERRM;
                                                END;

                                            WHEN OTHERS THEN

                                                vl_error := 'Se presento un Error al INSERTar la bitacora '||SQLERRM;

                                            END;

                                        ELSE

                                            dbms_output.put_line('mensaje:'||vl_error);

                                            ROLLBACK;

                                            BEGIN

                                                INSERT INTO sztcarga VALUES (c.iden, --SZCARGA_ID
                                                                             c.materia, --SZCARGA_MATERIA
                                                                             c.prog,         --SZCARGA_PROGRAM
                                                                             c.periodo,         --SZCARGA_TERM_CODE
                                                                             c.parte,         --SZCARGA_PTRM_CODE
                                                                             c.grupo,         --SZCARGA_GRUPO
                                                                             null,         --SZCARGA_CALIF
                                                                             c.prof,         --SZCARGA_ID_PROF
                                                                             user,         --SZCARGA_USER_ID
                                                                             sysdate,         --SZCARGA_ACTIVITY_DATE
                                                                             c.fecha_inicio,         --SZCARGA_FECHA_INI
                                                                             'E',          --SZCARGA_ESTATUS
                                                                             vl_error,  --SZCARGA_OBSERVACIONES
                                                                             'PRONOSTICO',
                                                                             p_regla
                                                                             );
                                                commit;

                                            EXCEPTION  WHEN DUP_VAL_ON_INDEX THEN

                                                BEGIN
                                                  UPDATE sztcarga SET szcarga_estatus = 'E' ,
                                                                      szcarga_observaciones = vl_error,
                                                                      szcarga_activity_date = SYSDATE
                                                  WHERE 1 = 1
                                                  AND szcarga_id = c.iden
                                                  AND szcarga_materia = c.materia
                                                  AND sztcarga_tipo_proc = 'MATE'
                                                  AND trunc (szcarga_fecha_ini) = c.fecha_inicio;

                                                EXCEPTION WHEN OTHERS THEN
                                                  vl_error := 'Se presento un Error al Actualizar la bitacora de Error '||SQLERRM;
                                                END;
                                            WHEN OTHERS THEN
                                                vl_error := 'Se presento un Error al INSERTar la bitacora de Error '||SQLERRM;
                                            END;


                                        End IF;

                                    Else

                                        vl_error := 'El alumno ya tiene la materia Inscritas en el Periodo:'||period_cur||'. Parte-periodo:'||parteper_cur;

                                        BEGIN

                                             UPDATE sztprono SET SZTPRONO_ESTATUS_ERROR ='S',
                                                                 SZTPRONO_DESCRIPCION_ERROR=vl_error

                                             WHERE 1 = 1
                                             AND SZTPRONO_MATERIA_LEGAL = c.materia
                                             AND TRUNC (SZTPRONO_FECHA_INICIO) = c.fecha_inicio
                                             AND SZTPRONO_NO_REGLA=P_REGLA
                                             AND sztprono_materia_legal = c.materia
                                             AND SZTPRONO_pIDm=c.pidm;

                                        EXCEPTION WHEN OTHERS THEN
                                           dbms_output.put_line(' Error al actualizar '||sqlerrm);
                                        END;

                                        BEGIN

                                            INSERT INTO sztcarga VALUES (c.iden, --SZCARGA_ID
                                                                         c.materia, --SZCARGA_MATERIA
                                                                         c.prog,         --SZCARGA_PROGRAM
                                                                         c.periodo,         --SZCARGA_TERM_CODE
                                                                         c.parte,         --SZCARGA_PTRM_CODE
                                                                         c.grupo,         --SZCARGA_GRUPO
                                                                         null,         --SZCARGA_CALIF
                                                                         c.prof,         --SZCARGA_ID_PROF
                                                                         user,         --SZCARGA_USER_ID
                                                                         sysdate,         --SZCARGA_ACTIVITY_DATE
                                                                         c.fecha_inicio,         --SZCARGA_FECHA_INI
                                                                         'A',--'P',          --SZCARGA_ESTATUS
                                                                         vl_error,  --SZCARGA_OBSERVACIONES
                                                                         'PRONOSTICO',
                                                                         p_regla
                                                                         );
                                            COMMIT;

                                        EXCEPTION WHEN DUP_VAL_ON_INDEX THEN

                                            BEGIN

                                              UPDATE sztcarga SET szcarga_estatus = 'A',--'P' ,
                                                                  szcarga_observaciones =  vl_error,
                                                                  szcarga_activity_date = SYSDATE
                                              WHERE 1 = 1
                                              AND szcarga_id = c.iden
                                              AND szcarga_materia = c.materia
                                              AND sztcarga_tipo_proc = 'MATE'
                                              AND TRUNC(szcarga_fecha_ini) = c.fecha_inicio;

                                            EXCEPTION WHEN OTHERS THEN
                                              vl_error := 'Se presento un Error al Actualizar la bitacora de Error '||SQLERRM;
                                            END;

                                        WHEN OTHERS THEN
                                            vl_error := 'Se presento un Error al INSERTar la bitacora de Error '||SQLERRM;
                                        END;

                                    END IF; ----> El alumno ya tiene inscrita la materia

                                ELSE

                                      BEGIN

                                          SELECT DECODE(c.sgbstdn_stst_code,'BT','BAJA TEMPORAL','BD','BAJA TEMPORAL','BI', 'BAJA POR INACTIVIDAD','CV', 'CANCELACIÓN DE VENTA','CM','CANCELACIÓN DE MATRÍCULA','CC', 'CAMBIO DE CILO','CF','CAMBIO DE FECHA','CP','CAMBIO DE PROGRAMA','EG','EGRESADO')
                                          INTO L_DESCRIPCION_ERROR
                                          FROM DUAL;

                                      exception when others then
                                          l_descripcion_error:='Sin descripcion';
                                      end;

                                      IF L_DESCRIPCION_ERROR is null then

                                        L_DESCRIPCION_ERROR:=c.sgbstdn_stst_code;

                                      end IF;


                                      BEGIN

                                           UPDATE sztprono SET SZTPRONO_ESTATUS_ERROR ='S',
                                                               SZTPRONO_DESCRIPCION_ERROR=L_DESCRIPCION_ERROR

                                           WHERE 1 = 1
                                           AND SZTPRONO_MATERIA_LEGAL = c.materia
                                           AND TRUNC (SZTPRONO_FECHA_INICIO) = c.fecha_inicio
                                           AND SZTPRONO_NO_REGLA=P_REGLA
                                           AND sztprono_materia_legal = c.materia
                                           AND SZTPRONO_PIDM=c.pidm;

                                      EXCEPTION WHEN OTHERS THEN
                                         dbms_output.put_line(' Error al actualizar '||sqlerrm);
                                      END;


                                    vl_error := 'Estatus no vÃ?Â¡lido para realizar la carga: '||C.SGBSTDN_STST_CODE;

                                    BEGIN

                                        INSERT INTO sztcarga VALUES (c.iden, --SZCARGA_ID
                                                                     c.materia, --SZCARGA_MATERIA
                                                                     c.prog,         --SZCARGA_PROGRAM
                                                                     c.periodo,         --SZCARGA_TERM_CODE
                                                                     c.parte,         --SZCARGA_PTRM_CODE
                                                                     c.grupo,         --SZCARGA_GRUPO
                                                                     null,         --SZCARGA_CALIF
                                                                     c.prof,         --SZCARGA_ID_PROF
                                                                     user,         --SZCARGA_USER_ID
                                                                     sysdate,         --SZCARGA_ACTIVITY_DATE
                                                                     c.fecha_inicio,         --SZCARGA_FECHA_INI
                                                                     'A',--'P',          --SZCARGA_ESTATUS
                                                                     vl_error,  --SZCARGA_OBSERVACIONES
                                                                     'PRONOSTICO',
                                                                     p_regla
                                                                     );
                                        COMMIT;

                                    EXCEPTION WHEN DUP_VAL_ON_INDEX THEN

                                        BEGIN

                                          UPDATE sztcarga SET szcarga_estatus = 'A',--'P' ,
                                                              szcarga_observaciones =  vl_error,
                                                              szcarga_activity_date = sysdate
                                          WHERE 1 = 1
                                          AND szcarga_id      = c.iden
                                          AND szcarga_materia = c.materia
                                          AND sztcarga_tipo_proc = 'MATE'
                                          AND TRUNC (szcarga_fecha_ini) = c.fecha_inicio;

                                        EXCEPTION WHEN OTHERS THEN
                                          vl_error := 'Se presento un Error al Actualizar la bitacora de Error '||SQLERRM;
                                        END;

                                    WHEN OTHERS THEN
                                        vl_error := 'Se presento un Error al INSERTar la bitacora de Error '||SQLERRM;
                                    END;



                                END IF;

                        --end IF;

                  END LOOP;

                            COMMIT;

                            FOR X IN c_no_proce LOOP

                                vl_error := 'Materia no Registrada para el Alumno en SFAREGS';

                                BEGIN

                                    INSERT INTO sztcarga VALUES (
                                                                 x.szcarga_id, --szcaRGA_ID
                                                                 x.szcarga_materia, --SZCARGA_MATERIA
                                                                 x.szcarga_program,         --SZCARGA_PROGRAM
                                                                 x.szcarga_term_code,         --SZCARGA_TERM_CODE
                                                                 x.szcarga_ptrm_code,         --SZCARGA_PTRM_CODE
                                                                 x.szcarga_grupo,         --SZCARGA_GRUPO
                                                                 x.szcarga_calIF,         --SZCARGA_CALIF
                                                                 x.szcarga_id_prof,         --SZCARGA_ID_PROF
                                                                 USER,         --SZCARGA_USER_ID
                                                                 SYSDATE,         --SZCARGA_ACTIVITY_DATE
                                                                 x.szcarga_fecha_ini,         --SZCARGA_FECHA_INI
                                                                 'E',          --SZCARGA_ESTATUS
                                                                 vl_error,  --SZCARGA_OBSERVACIONES
                                                                 'PRONOSTICO '||p_regla,
                                                                 p_regla
                                                                 );


                                EXCEPTION WHEN DUP_VAL_ON_INDEX THEN

                                     BEGIN

                                         UPDATE sztcarga SET szcarga_estatus = 'E',
                                                             szcarga_calIF=x.szcarga_calIF,
                                                             szcarga_observaciones =  vl_error,
                                                             szcarga_activity_date = SYSDATE
                                         WHERE 1 = 1
                                         AND szcarga_id = x.szcarga_id
                                         AND szcarga_materia = x.szcarga_materia
                                         AND sztcarga_tipo_proc = 'MATE'
                                         AND TRUNC (szcarga_fecha_ini) = x.szcarga_fecha_ini;

                                     EXCEPTION WHEN OTHERS THEN
                                       vl_error := 'Se presento un Error al Actualizar la bitacora de Error '||SQLERRM;
                                     END;

                                WHEN OTHERS THEN
                                    vl_error := 'Se presento un Error al INSERTar la bitacora de Error '||SQLERRM;
                                END;

--                                BEGIN
--
--                                    UPDATE SZTPRONO SET SZTPRONO_ESTATUS_ERROR ='S',
--                                                        SZTPRONO_DESCRIPCION_ERROR ='Esta materia no va acorde a la seriacion de SMAPROG con el programa '||x.szcarga_program
--                                    WHERE 1 = 1
--                                    AND sztprono_no_regla = p_regla
--                                    AND sztprono_materia_legal = x.szcarga_materia
--                                    AND sztprono_id =   x.szcarga_id
--                                    AND SZTPRONO_FECHA_INICIO =  x.szcarga_fecha_ini;
--
--
--                                exception when others then
--                                    null;
--                                end;



                            END LOOP;

                            COMMIT;
                                 ------------------- Realiza el proceso de actualizacion de Jornadas  ----------------------------------

                            BEGIN

                                FOR c IN (
                                           SELECT sorlcur_levl_code nivel,
                                                  szcarga_id,
                                                  szcarga_term_code,
                                                  szcarga_ptrm_code,
                                                  spriden_pidm ,
                                                  sorlcur_key_seqno,
                                                  COUNT (*) numero
                                           FROM sztcarga,
                                                spriden,
                                                sorlcur  s
                                           WHERE 1 = 1
                                           AND sztcarga_tipo_proc = 'MATE'
                                           AND szcarga_estatus != 'E'
                                           AND szcarga_id = spriden_id
                                           AND s.sorlcur_pidm = spriden_pidm
                                           AND s.sorlcur_program=szcarga_program
                                           AND s.sorlcur_lmod_code='LEARNER'
                                           AND s.sorlcur_seqno in (SELECT MAX(ss.sorlcur_seqno)
                                                                   FROM sorlcur ss
                                                                   WHERE 1 = 1
                                                                   AND s.sorlcur_pidm=ss.sorlcur_pidm
                                                                   AND s.sorlcur_lmod_code=ss.sorlcur_lmod_code
                                                                   AND s.sorlcur_program=ss.sorlcur_program
                                                                   )
                                           GROUP BY sorlcur_levl_code,
                                                    szcarga_id,
                                                    szcarga_term_code,
                                                    szcarga_ptrm_code,
                                                    spriden_pidm,
                                                    sorlcur_key_seqno
                                           ORDER BY 1, 2, 3
                               ) loop

                                  vl_jornada := null;



                                   BEGIN

                                       SELECT DISTINCT SUBSTR (sgrsatt_atts_code, 1,3) jornada
                                       INTO vl_jornada
                                       FROM sgrsatt a
                                       WHERE 1 = 1
                                       AND a.sgrsatt_pidm = c.spriden_pidm
                                       AND a.sgrsatt_stsp_key_sequence = c.sorlcur_key_seqno
                                       AND SUBSTR(a.sgrsatt_atts_code,2,1) = SUBSTR(c.nivel,1,1)
                                       AND REGEXP_LIKE(a.sgrsatt_atts_code, '^[0-9]')
                                       AND a.sgrsatt_term_code_eff = (SELECT MAX (a1.sgrsatt_term_code_eff)
                                                                      FROM SGRSATT a1
                                                                      WHERE 1 = 1
                                                                      AND a.sgrsatt_pidm = a1.sgrsatt_pidm
                                                                      AND a.sgrsatt_stsp_key_sequence = a1.sgrsatt_stsp_key_sequence
                                                                      );
                                   EXCEPTION  WHEN OTHERS THEN
                                        vl_jornada :=NULL;
                                   END;

                                   IF vl_jornada  IS NOT NULL  THEN

                                         IF c.numero >= 10 then

                                            c.numero:=4;

                                        end IF;

                                        vl_jornada := vl_jornada||c.numero;

                                        BEGIN

                                            pkg_algoritmo.p_actualiza_jornada (c.spriden_pidm, c.szcarga_term_code, vl_jornada, c.sorlcur_key_seqno);

                                        EXCEPTION WHEN OTHERS THEN
                                            null;
                                        END;

                                   END IF;



                               END LOOP;

                               COMMIT;

                            END;

                end IF;


                COMMIT;

                P_ENA_DIS_TRG('E','SATURN.SZT_SSBSECT_POSTINSERT_ROW');
                P_ENA_DIS_TRG('E','SATURN.SZT_SIRASGN_POSTINSERT_ROW');
                P_ENA_DIS_TRG('E','SATURN.SZT_SFRSTCR_POSTINS_UDP_REGS');

        end IF;

   END carga_inscrip_nw;
--
--
PROCEDURE CARGA_PRE_INSCRIPCION  (
                                 pn_fecha  IN VARCHAR2 ,
                                 p_regla       NUMBER
                                 )
    IS
       crn                  NUMBER;
       gpo                  NUMBER;
       mate                 VARCHAR2(20);
       ciclo                VARCHAR2(6);
       subj                 VARCHAR2(4);
       crse                 VARCHAR2(5);
       sb                   VARCHAR2(4);
       cr                   VARCHAR2(5);
       schd                 VARCHAR2(3);
       title                VARCHAR2(30);
       credit               DECIMAL(7,3);
       credit_bill          DECIMAL(7,3);
       gmod                 VARCHAR2(1);
       f_inicio             DATE;
       f_fin                DATE;
       sem                  NUMBER;
       conta_ptrm           NUMBER;
       conta_blck           NUMBER;
       pidm                 NUMBER;
       pidm_doc             NUMBER;
       pidm_doc2            NUMBER;
       ests                 VARCHAR2(2);
       levl                 VARCHAR2(2);
       camp                 VARCHAR2(3);
       rsts                 VARCHAR2(3);
       conta_origen         NUMBER:=0;
       conta_destino        NUMBER :=0;
       conta_origen_ssbsect NUMBER:=0;
       conta_origen_ssrblck NUMBER:=0;
       conta_origen_sobptrm NUMBER:=0;
       sp                   INTEGER;
       ciclo_ext            VARCHAR2(6);
       mensaje              VARCHAR2(200);
       parte                VARCHAR2(3);
       pidm_prof            NUMBER;
       per                  VARCHAR2(6);
       grupo                VARCHAR2(4);
       conta_sirasgn        NUMBER;
       fecha_ini            DATE;
       vl_existe            NUMBER :=0;

       vn_lugares           NUMBER:=0;
       vn_cupo_max          NUMBER:=0;
       vn_cupo_act          NUMBER:=0;
       vl_error             VARCHAR2 (2500):= 'EXITO';

       parteper_cur         VARCHAR2(3);
       period_cur           VARCHAR2(10);
       vl_jornada           VARCHAR2(250):=NULL;
       vl_exite_prof        NUMBER :=0;
       l_contar             NUMBER:=0;
       l_maximo_alumnos     NUMBER;

   BEGIN


       -- PKG_ALGORITMO.P_INSERTA_CARGA(p_regla);



       null;

   END CARGA_PRE_INSCRIPCION;
--
--

PROCEDURE P_ENA_DIS_TRG(P_ENA_DIS VARCHAR2, P_TRG VARCHAR2) IS

BEGIN

      IF P_ENA_DIS = 'E' THEN
         --EXECUTE IMMEDIATE 'alter  trigger SATURN.SZT_SSBSECT_POSTINSERT_ROW ENABLE';
         EXECUTE IMMEDIATE 'alter  trigger '||P_TRG||' ENABLE';
      ELSIF  P_ENA_DIS = 'D' THEN
         --EXECUTE IMMEDIATE 'alter  trigger SATURN.SZT_SSBSECT_POSTINSERT_ROW ENABLE';
         EXECUTE IMMEDIATE 'alter  trigger '||P_TRG||' DISABLE';
      END IF;
EXCEPTION
  WHEN OTHERS THEN
    NULL;
END P_ENA_DIS_TRG;


FUNCTION F_JORNADA (P_PIDM IN NUMBER, P_PERIODO IN VARCHAR2, F_FECHA_INI IN DATE, P_PATH IN NUMBER , P_REGLA IN NUMBER, P_TIPO IN VARCHAR2) RETURN VARCHAR2
As
 vl_valor varchar2(10):= null;

BEGIN
        IF P_TIPO = 'J' then
                BEGIN
                        SELECT SZTPROC_JORNADA_NW
                            INTO vl_valor
                        FROM SZTPROC
                        WHERE SZTPROC_PIDM = P_PIDM
                        AND SZTPROC_TERM_CODE = P_PERIODO
                        AND SZTPROC_FECHA_INI = TRUNC (F_FECHA_INI)
                        AND SZTPROC_STUDY_PATH = P_PATH
                        AND SZTPROC_TERM_CODE = P_PERIODO
                        AND SZTPROC_NO_REGLA = P_REGLA
                        AND SZTPROC_JORNADA_NW is not null;
                Exception
                when Others then
                   vl_valor := null;
                END;
        ElsIF P_TIPO = 'R' then
                BEGIN
                        SELECT SZTPROC_RATE_NW
                            INTO vl_valor
                        FROM SZTPROC
                        WHERE SZTPROC_PIDM = P_PIDM
                        AND SZTPROC_TERM_CODE = P_PERIODO
                        AND SZTPROC_FECHA_INI = TRUNC (F_FECHA_INI)
                        AND SZTPROC_STUDY_PATH = P_PATH
                        AND SZTPROC_TERM_CODE = P_PERIODO
                        AND SZTPROC_NO_REGLA = P_REGLA
                        AND SZTPROC_RATE_NW is not null;
                Exception
                when Others then
                   vl_valor := null;
                END;
        End IF;
        Return vl_valor;
    END;


PROCEDURE P_ACTUALIZA_SZTPROC (P_REGLA NUMBER)
AS

BEGIN
            BEGIN
                Update SZTPROC
                    set SZTPROC_JORNADA_NW = 'XXXX'
                WHERE SZTPROC_JORNADA_NW is null
                AND SZTPROC_NO_REGLA = P_REGLA;
                Commit;
            Exception
                When Others then
                  null;
            END;
END;

    PROCEDURE P_ACTUALIZA_JORNADA (P_PIDM NUMBER,
                                   P_PERIODO VARCHAR2,
                                   P_JORNADA VARCHAR2,
                                   P_STUDY NUMBER)
        AS

    vn_number    number :=0;
    l_jornada    varchar2(100);
    l_sp         number;
    l_cuenta_sfr number;
    l_type       varchar2(1);
    l_campus     varchar2(10);

    BEGIN



            dbms_output.put_line('Entra 1 ');

                BEGIN

                   SELECT DISTINCT
                                   cur.sorlcur_key_seqno,
                                   sorlcur_camp_code
                   INTO l_sp,
                        l_campus
                   FROM sorlcur cur
                   WHERE     1 = 1
                   AND cur.sorlcur_pidm = p_pidm
                   AND cur.sorlcur_lmod_code = 'LEARNER'
                   AND cur.sorlcur_roll_ind = 'Y'
                   AND cur.sorlcur_cact_code = 'ACTIVE'
                   AND cur.sorlcur_seqno =
                                          (SELECT MAX (aa1.sorlcur_seqno)
                                           FROM sorlcur aa1
                                           WHERE     cur.sorlcur_pidm = aa1.sorlcur_pidm
                                           AND cur.sorlcur_lmod_code = aa1.sorlcur_lmod_code
                                           AND cur.sorlcur_roll_ind = aa1.sorlcur_roll_ind
                                           AND cur.sorlcur_cact_code = aa1.sorlcur_cact_code);

                EXCEPTION WHEN OTHERS THEN
                      NULL;
                END;

                BEGIN
                     SELECT a.SGBSTDN_STYP_CODE
                     INTO l_type
                     FROM sgbstdn a
                     WHERE a.sgbstdn_pidm = p_pidm
                     AND a.sgbstdn_term_code_eff = (SELECT max (a1.sgbstdn_term_code_eff)
                                                                     FROM sgbstdn a1
                                                                     WHERE a.sgbstdn_pidm = a1.sgbstdn_pidm
                                                                     );

                                                                     dbms_output.put_line('Entra 7');
                Exception
                     When Others then
                        l_type := null;
                End;

                IF l_campus <> 'UIN' then

                    BEGIN
                            SELECT COUNT (*)
                                INTO vn_number
                            FROM SGRSATT
                            WHERE SGRSATT_PIDM = P_PIDM
                            AND substr(SGRSATT_ATTS_CODE,1,(length(SGRSATT_ATTS_CODE)-1)) = substr(P_JORNADA,1,(length(SGRSATT_ATTS_CODE)-1))
                            AND SGRSATT_TERM_CODE_EFF = P_PERIODO
                            AND SGRSATT_STSP_KEY_SEQUENCE  = P_STUDY;

                            dbms_output.put_line('Entra 2 ');

                    Exception
                    When Others then
                       vn_number :=0;
                    END;

                    IF vn_number = 0 then


                        BEGIN
                                INSERT INTO SGRSATT VALUES
                                (P_PIDM,
                                P_PERIODO,
                                P_JORNADA,
                                sysdate,
                                P_STUDY,
                                null,
                                null,
                                user,
                                'PRONOSTICO',
                                NULL);

                                dbms_output.put_line('Entra 3 ');

                        Exception
                        When Others then
                         RAISE_APPLICATION_ERROR (-20002,'El codigo de atrubuto es Inexistente, validar en STVATTS 1 '||l_jornada||' Jornada que actualiza '||p_jornada||' Key Seuences '||p_study||' pidm '||P_PIDM||' Error de Oracle '||sqlerrm);

                        END;

                    Else



                        BEGIN

                           SELECT COUNT(*)
                           INTO l_cuenta_sfr
                           FROM sfrstcr
                           WHERE 1 = 1
                           AND sfrstcr_pidm = p_pidm
                           AND sfrstcr_stsp_key_sequence =l_sp
                           AND sfrstcr_rsts_code ='RE';
    --                       AND SFRSTCR_GRDE_CODE is not null;

                        EXCEPTION WHEN OTHERS THEN
                           NULL;
                        END;

                        dbms_output.put_line('type  '||l_type||' cuenta sfrtc '||l_cuenta_sfr);

                        BEGIN

                            IF l_type NOT IN ('N','F') AND  l_cuenta_sfr != 0 THEN

                                    BEGIN

                                        UPDATE  sgrsatt
                                        SET     sgrsatt_atts_code  = p_jornada,
                                                sgrsatt_activity_date = SYSDATE,
                                                sgrsatt_user_id = USER,
                                                sgrsatt_data_origin = 'MANUAL'
                                        WHERE  1 = 1
                                        AND sgrsatt_pidm = p_pidm
                                        AND sgrsatt_term_code_eff = p_periodo
                                        AND sgrsatt_stsp_key_sequence = p_study;

                                        dbms_output.put_line('Entra 4 ');

                                    EXCEPTION WHEN DUP_VAL_ON_INDEX THEN

                                        BEGIN

                                            UPDATE  sgrsatt
                                            SET     sgrsatt_atts_code  = p_jornada,
                                                    sgrsatt_activity_date = SYSDATE,
                                                    sgrsatt_user_id = USER,
                                                    sgrsatt_data_origin = 'MANUAL'
                                            WHERE  1 = 1
                                            AND sgrsatt_pidm = p_pidm
                                            AND sgrsatt_term_code_eff = p_periodo
                                            AND sgrsatt_stsp_key_sequence = p_study
                                            AND ROWNUM = 1;

                                            dbms_output.put_line('Entra 4 ');

                                        EXCEPTION WHEN OTHERS  THEN
                                            null;
                                        END;

                                    END;

                            END IF;

                        Exception
                        When no_data_found then
                            RAISE_APPLICATION_ERROR (-20002,'El codigo de atrubuto es Inexistente, validar en STVATTS 3 '||l_jornada||' Jornada que actualiza '||p_jornada||' Key Seuences '||p_study||' '||sqlerrm);
                        END;

                    End IF;

                end IF;

                dbms_output.put_line('Entra 5 ');

                -- se omite el commit para poder consumir el trigger szt_sfrstcr_act_jornada --
        --commit;

    END;



    PROCEDURE P_INSERTA_CARGA(P_REGLA NUMBER,pn_fecha VARCHAR2)
    IS

    l_prof_id  VARCHAR2(100);

    BEGIN



        BEGIN
             DELETE SZCARGA
             WHERE 1 = 1
             AND SZCARGA_NO_REGLA=p_regla
             AND SZCARGA_FECHA_INI = pn_fecha;
        EXCEPTION WHEN OTHERS THEN
            NULL;
        END;

        BEGIN
            DELETE SZTCARGA
            WHERE 1 = 1
            AND SZTCARGA_NO_REGLA=p_regla
             AND SZCARGA_FECHA_INI = pn_fecha;
        EXCEPTION WHEN OTHERS THEN
            NULL;
        END;

       --  si ya tiene las materias sembradas se actualiza antes para que no se tomen en cuenta en el proceso

        FOR c_prono IN(

                            SELECT id_alumno,
                                   pidm_alumno,
                                   periodo,
                                   programa,
                                   parte_periodo,
                                   mat_prono,
                                   longitud,
                                   grupo2,
                                   substr(grupo2,longitud,2) grupo,
                                   fecha_inicio,
                                   regla,
                                   banner
                            FROM
                            (
                                SELECT  distinct ono.sztprono_id id_alumno,
                                                ono.sztprono_pidm pidm_alumno,
                                                ono.SZTPRONO_TERM_CODE periodo,
                                                SZTPRONO_PROGRAM programa,
                                                ono.SZTPRONO_PTRM_CODE parte_periodo,
                                                ono.SZTPRONO_MATERIA_LEGAL mat_prono,
                                                length(SZSTUME_SUBJ_CODE)+1 longitud,
                                                ume.SZSTUME_TERM_NRC grupo2,
                                                SZTPRONO_FECHA_INICIO fecha_inicio,
                                                sztprono_no_regla regla,
                                                sztprono_materia_banner banner
                                FROM SZSTUME ume,
                                     sztprono ono
                                WHERE 1  = 1
                                AND ono.sztprono_no_regla =ume.SZSTUME_NO_REGLA(+)
                                AND ono.sztprono_pidm = ume.SZSTUME_pidm(+)
                                AND ono.SZTPRONO_MATERIA_LEGAL = ume.SZSTUME_SUBJ_CODE(+)
                                AND ono.SZTPRONO_FECHA_INICIO= ume.SZSTUME_START_DATE (+)
                                AND ono.SZTPRONO_FECHA_INICIO = pn_fecha
                                AND ono.SZTPRONO_ENVIO_HORARIOS ='N'
                                AND ono.SZTPRONO_ENVIO_MOODL ='S'
--                                AND ono.sztprono_id ='010097868'
                                AND ono.sztprono_no_regla  = p_regla
                                AND SZTPRONO_ESTATUS_ERROR ='N'
                                AND ume.szstume_stat_ind = '1'
                                )

                            )
                            loop

                                dbms_output.put_line('Entra a carga');

                                BEGIN
                                    SELECT (SELECT SPRIDEN_ID
                                            FROM SPRIDEN
                                            WHERE 1 = 1
                                            AND SPRIDEN_PIDM = nme.SZSGNME_PIDM
                                            AND SPRIDEN_CHANGE_IND IS NULL) MATRICULA
                                    INTO l_prof_id
                                    FROM SZSGNME nme
                                    WHERE 1 = 1
                                    AND SZSGNME_no_regla = c_prono.regla
                                    AND SZSGNME_TERM_NRC = c_prono.grupo2
                                    AND rownum = 1;
                                exception when others then
                                    null;
                                end;


                                BEGIN

                                    INSERT INTO SZCARGA VALUES(
                                                                c_prono.id_alumno,
                                                                c_prono.mat_prono,
                                                                c_prono.programa,
                                                                c_prono.periodo,
                                                                c_prono.parte_periodo,
                                                                c_prono.grupo,
                                                                null,
                                                                l_prof_id,
                                                                USER,
                                                                SYSDATE,
                                                                c_prono.fecha_inicio,
                                                                P_REGLA,
                                                                c_prono.banner
                                                                );
                                exception when others then
                                   -- raise_application_error (-20002,'ERROR al INSERTar en carga matricula  '||c_prono.id_alumno||' error '||sqlerrm);
                                   null;
                                end;

                            END LOOP;


                commit;

    END P_INSERTA_CARGA;
    --
    --
    FUNCTION P_MATERIA_MANAUAL(P_SUBJ           VARCHAR2,
                               P_CRSE           VARCHAR2,
                               P_MATERIA_LEGAL  VARCHAR2,
                               P_pidm_DOCENTE   VARCHAR2,
                               P_NUMERO_ALUMNOS NUMBER,
                               P_PERIODO        VARCHAR2,
                               p_PARTE_PERIODO  VARCHAR2,
                               P_REGLA          NUMBER
                               ) RETURN VARCHAR2
    AS
    l_crn         NUMBER;
    l_valor       VARCHAR2(1000);
    l_f_inicio    VARCHAR2(50);
    l_f_fin       VARCHAR2(50);
    l_sem         VARCHAR2(50);
    l_schd        VARCHAR2(50);
    l_title       VARCHAR2(200);
    l_credit      number(10,2);
    l_credit_bill number;
    l_campus      VARCHAR2(50);
    l_gmod        number;
    l_exite_prof  number;
    l_matricula   VARCHAR2(9);


    BEGIN

       for c IN (SELECT *
                 FROM SZTTNIN
                 WHERE 1 = 1
                 AND SZTTNIN_NO_REGLA = P_REGLA
                 AND SZTTNIN_ESTATUS_MATERIA ='S'
                 )
                 loop

                    NULL;

                 END LOOP;

       commit;

       l_valor:='EXITO';


       RETURN l_valor;

    EXCEPTION WHEN OTHERS THEN
                l_valor := 'Falta campos obligatorios ' ||SQLERRM;
                return(l_valor);


    END P_MATERIA_MANAUAL;
    --
    --
    FUNCTION  F_PERIODO_ANT_SIG (P_PERIODO VARCHAR2 ) RETURN VARCHAR2
    As

    l_valor varchar2(500);

    BEGIN

        SELECT --campus||ANIO_SIGUIENTE||CONSTANTE||NUMERO_PERIODO_SIGUIENTE||periodo||campus||anio_anterior||CONSTANTE||NUMERO_PERIODO_anterior periodos
                campus||anio_anterior||CONSTANTE||NUMERO_PERIODO_anterior periodos
                INTO l_valor
                FROM
                (
                    SELECT      campus,
                                anio,
                                constante,
                                evaluar,
                                periodo,
                                CASE when NUMERO_PERIODO = 3 then
                                        anio + 1
                                     when NUMERO_PERIODO = 2 then
                                        to_number(anio)
                                     when NUMERO_PERIODO = 1 then
                                        to_number(anio)
                                END anio_siguiente ,
                                CASE when NUMERO_PERIODO = 3 then
                                       1
                                     when NUMERO_PERIODO = 2 then
                                        3
                                     when NUMERO_PERIODO = 1 then
                                        2
                                END NUMERO_PERIODO_siguiente,
                                CASE when NUMERO_PERIODO = 3 then
                                        to_number(anio)
                                     when NUMERO_PERIODO = 2 then
                                        to_number(anio)
                                     when NUMERO_PERIODO = 1 then
                                         anio - 1
                                END anio_anterior ,
                                CASE when numero_periodo = 3 then
                                       2
                                     when numero_periodo = 2 then
                                        1
                                     when numero_periodo = 1 then
                                        3
                                END numero_periodo_anterior
                    FROM
                    (
                        SELECT  SUBSTR(periodo,1,2) campus,
                                SUBSTR(periodo,3,2) anio,
                                constante,
                                numero_periodo,
                                SUBSTr(PERIODO,4,1) evaluar,
                                periodo
                        FROM
                        (
                            SELECT P_PERIODO PERIODO,
                                  SUBSTR(P_PERIODO,6,1) periodo_actual,
                                  SUBSTR(P_PERIODO,5,1) constante,
                                  SUBSTR(P_PERIODO,6,1) numero_periodo
                            FROM DUAL
                        )
                    )
                );

        return l_valor;

    EXCEPTION WHEN OTHERS THEN
        return ('No existe descripción');
    end;
--
--

     FUNCTION  F_PERIDOD_ANTERIOR (P_REGLA NUMBER ) RETURN VARCHAR2
     As

        l_valor varchar2(500);
        l_cadena      VARCHAR2(1000);
        l_longuitud   NUMBER;
        l_ncadena     number;
        l_periodo1    varchar2(100);
        l_periodo2    varchar2(100);
        l_periodo3    varchar2(100);
        l_periodo4    varchar2(100);
        l_periodo5    varchar2(100);
        l_periodo6    varchar2(100);
        l_periodo7    varchar2(100);
        l_periodo8    varchar2(100);
        l_periodo9    varchar2(100);
        l_periodo10   varchar2(100);

    BEGIN

        SELECT DISTINCT periodo,
               length(periodo)
               INTO l_cadena,
               l_longuitud
        FROM (
                      SELECT listagg( periodo )WITHIN GROUP (ORDER BY periodo) periodo
                        FROM
                        (
                            SELECT distinct sztalgo_term_code periodo
                            FROM sztalgo
                            WHERE 1 = 1
                            AND sztalgo_no_regla= P_REGLA
                         )
            );

        l_ncadena:=(l_longuitud/6);


        IF l_ncadena= 1 THEN

            DBMS_OUTPUT.PUT_LINE('Entra');

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            l_valor:=l_periodo1;

        END IF;

        IF l_ncadena = 2 THEN

            SELECT PKG_ALGORITMO.F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            l_valor:=l_periodo1||l_periodo2;


        END IF;

        IF l_ncadena = 3 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            l_valor:=l_periodo1||l_periodo2||l_periodo3;

        END IF;

        IF l_ncadena = 4 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            l_valor:=l_periodo1||l_periodo2||l_periodo3||l_periodo4;

        END IF;

        IF l_ncadena = 5 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,25,6))
            INTO l_periodo4
            FROM DUAL;

            l_valor:=l_periodo1||l_periodo2||l_periodo3||l_periodo4||l_periodo5;

        END IF;

        IF l_ncadena = 6 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,25,6))
            INTO l_periodo5
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,31,6))
            INTO l_periodo6
            FROM DUAL;

            l_valor:=l_periodo1||l_periodo2||l_periodo3||l_periodo4||l_periodo5||l_periodo6;

        END IF;

        IF l_ncadena = 7 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,25,6))
            INTO l_periodo5
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,31,6))
            INTO l_periodo6
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,37,6))
            INTO l_periodo7
            FROM DUAL;

            l_valor:=l_periodo1||l_periodo2||l_periodo3||l_periodo4||l_periodo5||l_periodo6||l_periodo7;

        END IF;

        IF l_ncadena = 8 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,25,6))
            INTO l_periodo5
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,31,6))
            INTO l_periodo6
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,37,6))
            INTO l_periodo7
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,43,6))
            INTO l_periodo8
            FROM DUAL;

            l_valor:=l_periodo1||l_periodo2||l_periodo3||l_periodo4||l_periodo5||l_periodo6||l_periodo7||l_periodo8;

        END IF;

        IF l_ncadena = 9 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,25,6))
            INTO l_periodo5
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,31,6))
            INTO l_periodo6
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,37,6))
            INTO l_periodo7
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,43,6))
            INTO l_periodo8
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,49,6))
            INTO l_periodo9
            FROM DUAL;

            l_valor:=l_periodo1||l_periodo2||l_periodo3||l_periodo4||l_periodo5||l_periodo6||l_periodo7||l_periodo8||l_periodo9;

        END IF;


         IF l_ncadena = 10 THEN

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
             INTO l_periodo1
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,7,6))
             INTO l_periodo2
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,13,6))
             INTO l_periodo3
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,19,6))
             INTO l_periodo4
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,25,6))
             INTO l_periodo5
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,31,6))
             INTO l_periodo6
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,37,6))
             INTO l_periodo7
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,43,6))
             INTO l_periodo8
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,49,6))
             INTO l_periodo9
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,55,6))
             INTO l_periodo10
             FROM DUAL;

             l_valor:=l_periodo1||l_periodo2||l_periodo3||l_periodo4||l_periodo5||l_periodo6||l_periodo7||l_periodo8||l_periodo9||l_periodo10;

         END IF;

      return l_valor;

    EXCEPTION WHEN OTHERS THEN
        return ('No existe descripción'|| sqlerrm);
    end;
--
--

FUNCTION  F_PERIDOD_ANTERIOR_COMA (P_REGLA NUMBER ) RETURN VARCHAR2
As


        l_valor varchar2(500);
        l_cadena      VARCHAR2(1000);
        l_longuitud   NUMBER;
        l_ncadena     number;
        l_periodo1    varchar2(100);
        l_periodo2    varchar2(100);
        l_periodo3    varchar2(100);
        l_periodo4    varchar2(100);
        l_periodo5    varchar2(100);
        l_periodo6    varchar2(100);
        l_periodo7    varchar2(100);
        l_periodo8    varchar2(100);
        l_periodo9    varchar2(100);
        l_periodo10   varchar2(100);

    BEGIN

        SELECT DISTINCT periodo,
               length(periodo)
               INTO l_cadena,
               l_longuitud
        FROM (
                      SELECT listagg( periodo )WITHIN GROUP (ORDER BY periodo) periodo
                        FROM
                        (
                            SELECT distinct sztalgo_term_code periodo
                            FROM sztalgo
                            WHERE 1 = 1
                            AND sztalgo_no_regla= P_REGLA
                         )
            );

        l_ncadena:=(l_longuitud/6);


        IF l_ncadena= 1 THEN

            DBMS_OUTPUT.PUT_LINE('Entra');

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            l_valor:=CHR(39)||l_periodo1||CHR(39);

        END IF;

        IF l_ncadena = 2 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT cadena
            INTO l_valor
            FROM
                (
                SELECT CHR(39)||l_periodo1||CHR(39)||','||CHR(39)||l_periodo2||CHR(39) cadena
                FROM DUAL
             );

        END IF;

        IF l_ncadena = 3 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            l_valor:=CHR(39)||l_periodo1||CHR(39)||','||CHR(39)||l_periodo2||CHR(39)||','||CHR(39)||l_periodo3||CHR(39);

        END IF;

        IF l_ncadena = 4 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            l_valor:=CHR(39)||l_periodo1||CHR(39)||','||CHR(39)||l_periodo2||CHR(39)||','||CHR(39)||l_periodo3||CHR(39)||','||CHR(39)||l_periodo4||CHR(39);

        END IF;

        IF l_ncadena = 5 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,25,6))
            INTO l_periodo4
            FROM DUAL;

            l_valor:=CHR(39)||l_periodo1||CHR(39)||','||CHR(39)||l_periodo2||CHR(39)||','||CHR(39)||l_periodo3||CHR(39)||','||CHR(39)||l_periodo4||CHR(39)||','||CHR(39)||l_periodo5||CHR(39);

        END IF;

        IF l_ncadena = 6 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,25,6))
            INTO l_periodo5
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,31,6))
            INTO l_periodo6
            FROM DUAL;

            l_valor:=CHR(39)||l_periodo1||CHR(39)||','||CHR(39)||l_periodo2||CHR(39)||','||CHR(39)||l_periodo3||CHR(39)||','||CHR(39)||l_periodo4||CHR(39)||','||CHR(39)||l_periodo5||CHR(39)||','||CHR(39)||l_periodo6||CHR(39);

        END IF;

        IF l_ncadena = 7 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,25,6))
            INTO l_periodo5
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,31,6))
            INTO l_periodo6
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,37,6))
            INTO l_periodo7
            FROM DUAL;

            l_valor:=CHR(39)||l_periodo1||CHR(39)||','||CHR(39)||l_periodo2||CHR(39)||','||CHR(39)||l_periodo3||CHR(39)||','||CHR(39)||l_periodo4||CHR(39)||','||CHR(39)||l_periodo5||CHR(39)||','||CHR(39)||l_periodo6||CHR(39)||','||CHR(39)||l_periodo7||CHR(39);

        END IF;

        IF l_ncadena = 8 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,25,6))
            INTO l_periodo5
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,31,6))
            INTO l_periodo6
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,37,6))
            INTO l_periodo7
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,43,6))
            INTO l_periodo8
            FROM DUAL;

            l_valor:=CHR(39)||l_periodo1||CHR(39)||','||CHR(39)||l_periodo2||CHR(39)||','||CHR(39)||l_periodo3||CHR(39)||','||CHR(39)||l_periodo4||CHR(39)||','||CHR(39)||l_periodo5||CHR(39)||','||CHR(39)||l_periodo6||CHR(39)||','||CHR(39)||l_periodo7||CHR(39)||','||CHR(39)||l_periodo8||CHR(39);

        END IF;

        IF l_ncadena = 9 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,25,6))
            INTO l_periodo5
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,31,6))
            INTO l_periodo6
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,37,6))
            INTO l_periodo7
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,43,6))
            INTO l_periodo8
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,49,6))
            INTO l_periodo9
            FROM DUAL;

            l_valor:=CHR(39)||l_periodo1||CHR(39)||','||CHR(39)||l_periodo2||CHR(39)||','||CHR(39)||l_periodo3||CHR(39)||','||CHR(39)||l_periodo4||CHR(39)||','||CHR(39)||l_periodo5||CHR(39)||','||CHR(39)||l_periodo6||CHR(39)||','||CHR(39)||l_periodo7||CHR(39)||','||CHR(39)||l_periodo8||CHR(39)||','||CHR(39)||l_periodo9||CHR(39);

        END IF;


         IF l_ncadena = 10 THEN

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,1,6))
             INTO l_periodo1
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,7,6))
             INTO l_periodo2
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,13,6))
             INTO l_periodo3
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,19,6))
             INTO l_periodo4
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,25,6))
             INTO l_periodo5
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,31,6))
             INTO l_periodo6
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,37,6))
             INTO l_periodo7
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,43,6))
             INTO l_periodo8
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,49,6))
             INTO l_periodo9
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(l_cadena,55,6))
             INTO l_periodo10
             FROM DUAL;

             l_valor:=CHR(39)||l_periodo1||CHR(39)||','||CHR(39)||l_periodo2||CHR(39)||','||CHR(39)||l_periodo3||CHR(39)||','||CHR(39)||l_periodo4||CHR(39)||','||CHR(39)||l_periodo5||CHR(39)||','||CHR(39)||l_periodo6||CHR(39)||','||CHR(39)||','||CHR(39)||l_periodo7||CHR(39)||','||CHR(39)||l_periodo8||CHR(39)||','||CHR(39)||l_periodo9||CHR(39)||','||CHR(39)||l_periodo10||CHR(39);

         END IF;

      return l_valor;

    EXCEPTION WHEN OTHERS THEN
        return ('No existe descripción'|| sqlerrm);
    end;
--
--
FUNCTION  F_PERIDOD_ANTERIOR_CADENA (P_CADENA VARCHAR2 ) RETURN VARCHAR2
     As

        l_valor       varchar2(500);
        l_cadena      VARCHAR2(1000);
        l_longuitud   NUMBER;
        l_ncadena     number;
        l_periodo1    varchar2(100);
        l_periodo2    varchar2(100);
        l_periodo3    varchar2(100);
        l_periodo4    varchar2(100);
        l_periodo5    varchar2(100);
        l_periodo6    varchar2(100);
        l_periodo7    varchar2(100);
        l_periodo8    varchar2(100);
        l_periodo9    varchar2(100);
        l_periodo10   varchar2(100);

    BEGIN

        l_ncadena:=(length(p_cadena)/6);

            DBMS_OUTPUT.PUT_LINE('total '||l_ncadena);

        IF l_ncadena= 1 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            l_valor:=l_periodo1;

        END IF;

        IF l_ncadena = 2 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            l_valor:=l_periodo1||l_periodo2;


        END IF;

        IF l_ncadena = 3 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            l_valor:=l_periodo1||l_periodo2||l_periodo3;

        END IF;

        IF l_ncadena = 4 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            l_valor:=l_periodo1||l_periodo2||l_periodo3||l_periodo4;

        END IF;

        IF l_ncadena = 5 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,25,6))
            INTO l_periodo4
            FROM DUAL;

            l_valor:=l_periodo1||l_periodo2||l_periodo3||l_periodo4||l_periodo5;

        END IF;

        IF l_ncadena = 6 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,25,6))
            INTO l_periodo5
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,31,6))
            INTO l_periodo6
            FROM DUAL;

            l_valor:=l_periodo1||l_periodo2||l_periodo3||l_periodo4||l_periodo5||l_periodo6;

        END IF;

        IF l_ncadena = 7 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,25,6))
            INTO l_periodo5
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,31,6))
            INTO l_periodo6
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,37,6))
            INTO l_periodo7
            FROM DUAL;

            l_valor:=l_periodo1||l_periodo2||l_periodo3||l_periodo4||l_periodo5||l_periodo6||l_periodo7;

        END IF;

        IF l_ncadena = 8 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,25,6))
            INTO l_periodo5
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,31,6))
            INTO l_periodo6
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,37,6))
            INTO l_periodo7
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,43,6))
            INTO l_periodo8
            FROM DUAL;

            l_valor:=l_periodo1||l_periodo2||l_periodo3||l_periodo4||l_periodo5||l_periodo6||l_periodo7||l_periodo8;

        END IF;

        IF l_ncadena = 9 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,25,6))
            INTO l_periodo5
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,31,6))
            INTO l_periodo6
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,37,6))
            INTO l_periodo7
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,43,6))
            INTO l_periodo8
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,49,6))
            INTO l_periodo9
            FROM DUAL;

            l_valor:=l_periodo1||l_periodo2||l_periodo3||l_periodo4||l_periodo5||l_periodo6||l_periodo7||l_periodo8||l_periodo9;

        END IF;


         IF l_ncadena = 10 THEN

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,1,6))
             INTO l_periodo1
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,7,6))
             INTO l_periodo2
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,13,6))
             INTO l_periodo3
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,19,6))
             INTO l_periodo4
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,25,6))
             INTO l_periodo5
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,31,6))
             INTO l_periodo6
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,37,6))
             INTO l_periodo7
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,43,6))
             INTO l_periodo8
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,49,6))
             INTO l_periodo9
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,55,6))
             INTO l_periodo10
             FROM DUAL;

             l_valor:=l_periodo1||l_periodo2||l_periodo3||l_periodo4||l_periodo5||l_periodo6||l_periodo7||l_periodo8||l_periodo9||l_periodo10;

         END IF;

      return l_valor;

    EXCEPTION WHEN OTHERS THEN
        return ('No existe descripción'|| sqlerrm);
    end;
--
--
    FUNCTION  F_PERIDOD_ANTERIOR_TIEMPO (P_CADENA VARCHAR2)
    RETURN VARCHAR2
    As
        l_valor VARCHAR2(2000);
        l_longuitud   NUMBER;
        l_ncadena     number;
        l_periodo1    varchar2(100);
        l_periodo2    varchar2(100);
        l_periodo3    varchar2(100);
        l_periodo4    varchar2(100);
        l_periodo5    varchar2(100);
        l_periodo6    varchar2(100);
        l_periodo7    varchar2(100);
        l_periodo8    varchar2(100);
        l_periodo9    varchar2(100);
        l_periodo10   varchar2(100);

    BEGIN

        l_ncadena:=(length(p_cadena)/6);

        dbms_output.put_line('total '||l_ncadena);

        IF l_ncadena= 1 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            l_valor:=CHR(39)||l_periodo1||CHR(39);

        END IF;

        IF l_ncadena = 2 THEN

            SELECT f_periodo_ant_sig(substr(p_cadena,1,6))
            INTO l_periodo1
            FROM dual;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT cadena
            INTO l_valor
            FROM
                (
                SELECT CHR(39)||l_periodo1||CHR(39)||','||CHR(39)||l_periodo2||CHR(39) cadena
                FROM DUAL
             );

        END IF;

        IF l_ncadena = 3 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            l_valor:=CHR(39)||l_periodo1||CHR(39)||','||CHR(39)||l_periodo2||CHR(39)||','||CHR(39)||l_periodo3||CHR(39);

        END IF;

        IF l_ncadena = 4 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            l_valor:=CHR(39)||l_periodo1||CHR(39)||','||CHR(39)||l_periodo2||CHR(39)||','||CHR(39)||l_periodo3||CHR(39)||','||CHR(39)||l_periodo4||CHR(39);

        END IF;

        IF l_ncadena = 5 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,25,6))
            INTO l_periodo4
            FROM DUAL;

            l_valor:=CHR(39)||l_periodo1||CHR(39)||','||CHR(39)||l_periodo2||CHR(39)||','||CHR(39)||l_periodo3||CHR(39)||','||CHR(39)||l_periodo4||CHR(39)||','||CHR(39)||l_periodo5||CHR(39);

        END IF;

        IF l_ncadena = 6 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,25,6))
            INTO l_periodo5
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,31,6))
            INTO l_periodo6
            FROM DUAL;

            l_valor:=CHR(39)||l_periodo1||CHR(39)||','||CHR(39)||l_periodo2||CHR(39)||','||CHR(39)||l_periodo3||CHR(39)||','||CHR(39)||l_periodo4||CHR(39)||','||CHR(39)||l_periodo5||CHR(39)||','||CHR(39)||l_periodo6||CHR(39);

        END IF;

        IF l_ncadena = 7 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,25,6))
            INTO l_periodo5
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,31,6))
            INTO l_periodo6
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,37,6))
            INTO l_periodo7
            FROM DUAL;

            l_valor:=CHR(39)||l_periodo1||CHR(39)||','||CHR(39)||l_periodo2||CHR(39)||','||CHR(39)||l_periodo3||CHR(39)||','||CHR(39)||l_periodo4||CHR(39)||','||CHR(39)||l_periodo5||CHR(39)||','||CHR(39)||l_periodo6||CHR(39)||','||CHR(39)||l_periodo7||CHR(39);

        END IF;

        IF l_ncadena = 8 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,25,6))
            INTO l_periodo5
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,31,6))
            INTO l_periodo6
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,37,6))
            INTO l_periodo7
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,43,6))
            INTO l_periodo8
            FROM DUAL;

            l_valor:=CHR(39)||l_periodo1||CHR(39)||','||CHR(39)||l_periodo2||CHR(39)||','||CHR(39)||l_periodo3||CHR(39)||','||CHR(39)||l_periodo4||CHR(39)||','||CHR(39)||l_periodo5||CHR(39)||','||CHR(39)||l_periodo6||CHR(39)||','||CHR(39)||l_periodo7||CHR(39)||','||CHR(39)||l_periodo8||CHR(39);

        END IF;

        IF l_ncadena = 9 THEN

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,1,6))
            INTO l_periodo1
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,7,6))
            INTO l_periodo2
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,13,6))
            INTO l_periodo3
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,19,6))
            INTO l_periodo4
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,25,6))
            INTO l_periodo5
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,31,6))
            INTO l_periodo6
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,37,6))
            INTO l_periodo7
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,43,6))
            INTO l_periodo8
            FROM DUAL;

            SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,49,6))
            INTO l_periodo9
            FROM DUAL;

            l_valor:=CHR(39)||l_periodo1||CHR(39)||','||CHR(39)||l_periodo2||CHR(39)||','||CHR(39)||l_periodo3||CHR(39)||','||CHR(39)||l_periodo4||CHR(39)||','||CHR(39)||l_periodo5||CHR(39)||','||CHR(39)||l_periodo6||CHR(39)||','||CHR(39)||l_periodo7||CHR(39)||','||CHR(39)||l_periodo8||CHR(39)||','||CHR(39)||l_periodo9||CHR(39);

        END IF;


         IF l_ncadena = 10 THEN

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,1,6))
             INTO l_periodo1
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,7,6))
             INTO l_periodo2
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,13,6))
             INTO l_periodo3
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,19,6))
             INTO l_periodo4
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,25,6))
             INTO l_periodo5
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,31,6))
             INTO l_periodo6
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,37,6))
             INTO l_periodo7
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,43,6))
             INTO l_periodo8
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,49,6))
             INTO l_periodo9
             FROM DUAL;

             SELECT F_PERIODO_ANT_SIG(SUBSTR(p_cadena,55,6))
             INTO l_periodo10
             FROM DUAL;

             l_valor:=CHR(39)||l_periodo1||CHR(39)||','||CHR(39)||l_periodo2||CHR(39)||','||CHR(39)||l_periodo3||CHR(39)||','||CHR(39)||l_periodo4||CHR(39)||','||CHR(39)||l_periodo5||CHR(39)||','||CHR(39)||l_periodo6||CHR(39)||','||CHR(39)||','||CHR(39)||l_periodo7||CHR(39)||','||CHR(39)||l_periodo8||CHR(39)||','||CHR(39)||l_periodo9||CHR(39)||','||CHR(39)||l_periodo10||CHR(39);

         END IF;

        return l_valor;
    EXCEPTION WHEN OTHERS THEN

        l_valor:='No existe descripcion'||sqlerrm;

    END;
--
--
    FUNCTION  f_alumnos_reingreso (p_regla NUMBER) RETURN VARCHAR2
    AS
    l_retorna VARCHAR2(100);
    l_campus  VARCHAR2(10);
    l_nivel   VARCHAR2(10);
    /*************************************************************

        proceso para nuevos ingresos se lleva acabo para materias
        que se encuentran tanto para pronostico como para materias
        que no se encuentran se divide en 2 INSERT uno para cada
        accion.

        Creado por Jesús Corona  UTEL

    ************************************************************/

    BEGIN


        DELETE sztrein
        WHERE 1 = 1
        AND sztrein_no_regla = p_regla;

         FOR c IN (SELECT sztalgo_camp_code campus,
                                  sztalgo_levl_code nivel,
                                 TO_CHAR(sztalgo_fecha_new,'DD/MM/YYYY') inicio_clases,
                                 sztalgo_no_regla regla,
                                 DECODE(sztalgo_tipo_carga,'Continuo',2,'Regular',1) periodicidad
                      FROM sztalgo
                      WHERE 1 = 1
                      AND sztalgo_no_regla = p_regla
                         )
                  loop


                            FOR d IN (SELECT x.pidm,
                                               x.matricula,
                                               x.nombre,
                                               x.campus,
                                               x.nivel,
                                               x.inicio_clases,
                                               x.programa,
                                               x.rate
                                        FROM
                                        (
                                        SELECT sorlcur_pidm pidm,
                                                      (SELECT spriden_id
                                                                    FROM spriden
                                                                    WHERE 1 = 1
                                                                    AND spriden_pidm = cur.sorlcur_pidm
                                                                    AND spriden_change_ind IS NULL) matricula ,
                                                       (SELECT  UPPER(spriden_first_name||' '||spriden_last_name)
                                                                    FROM spriden
                                                                    WHERE 1 = 1
                                                                    AND spriden_pidm = cur.sorlcur_pidm
                                                                    AND spriden_change_ind IS NULL) nombre ,
                                                            cur.sorlcur_camp_code campus ,
                                                            cur.sorlcur_levl_code nivel,
                                                            cur.sorlcur_start_date inicio_clases,
                                                            cur.sorlcur_program programa ,
                                                            cur.sorlcur_rate_code  rate
                                        FROM sorlcur cur

                                        WHERE 1 = 1
                                        AND cur.sorlcur_camp_code  = c.campus
                                        AND cur.sorlcur_levl_code  = c.nivel
                                        AND cur.sorlcur_lmod_code  ='LEARNER'
                                        AND cur.sorlcur_start_date = c.inicio_clases
                                        AND cur.sorlcur_lmod_code  ='LEARNER'
                                        AND cur.sorlcur_cact_code  ='ACTIVE'
                                        AND cur.sorlcur_roll_ind   ='Y'
                                        AND cur.sorlcur_seqno in (SELECT MAX (a1.sorlcur_seqno)
                                                                  FROM sorlcur a1
                                                                  WHERE cur.sorlcur_pidm = a1.sorlcur_pidm
                                                                  AND   cur.sorlcur_lmod_code = a1.sorlcur_lmod_code)
                                        )x,
                                        sztdtec tec
                                        WHERE 1 = 1
                                        AND  x.programa = tec.sztdtec_program
                                        AND  tec.sztdtec_periodicidad  = c.periodicidad
                                 )
                                 LOOP

                                    BEGIN

                                        INSERT INTO sztrein VALUES (d.pidm,
                                                                    d.matricula,
                                                                    d.nombre,
                                                                    d.campus,
                                                                    d.nivel,
                                                                    c.inicio_clases,
                                                                    p_regla,
                                                                    'N',
                                                                    d.programa,
                                                                    d.rate,
                                                                    NULL,
                                                                    NULL,
                                                                    NULL,
                                                                    NULL
                                                                    );

                                        l_retorna:='EXITO';

                                    EXCEPTION WHEN OTHERS THEN
                                        l_retorna:='Error al obtener alumnos de Reingreso '||sqlerrm;
                                    END;


                                 END LOOP;

                  END LOOP;

        COMMIT;

        RETURN(l_retorna);

    END;
--
--

    FUNCTION f_ningreos_algo (
                               p_regla         NUMBER,
                               p_fecha_inicio VARCHAR2
                               )RETURN VARCHAR2
   AS
        l_retorna          VARCHAR2(100);
        l_inicio_clase     VARCHAR2(100);
        l_campus           VARCHAR2(100);
        l_nivel            VARCHAR2(100);
        l_sql              VARCHAR2(5000);
        l_contar           NUMBER;
        l_numero_registros NUMBER;
        l_contar_valida    NUMBER;
        l_prof_pidm        NUMBER;
        l_prof_id          VARCHAR2(100);
        l_tipo             VARCHAR2(10);
        l_periodo          VARCHAR2(10);
        l_term_code varchar2(50);
        l_ptrm      varchar2(50);
        l_cuneta_prono number;
        l_cuenta_uve   number;

    BEGIN
        dbms_output.put_line('extra 1');

        p_track_prono(p_regla,'NI:Inicia proceso -> Nuevos Ingresos');

        BEGIN
            DELETE szttnin
            WHERE 1 = 1
            AND szttnin_no_regla = p_regla;
        EXCEPTION WHEN OTHERS THEN
            NULL;
        END;

        dbms_output.put_line('extra 2');

        BEGIN

            SELECT COUNT(*)
            INTO l_contar
            FROM sztalgo
            WHERE 1 = 1
            AND sztalgo_no_regla = p_regla;


        EXCEPTION WHEN OTHERS THEN
            l_contar:=0;
        end;


        dbms_output.put_line('extra 3');

        IF l_contar = 1 THEN

            BEGIN

                SELECT DISTINCT sztalgo_camp_code campus,
                                 sztalgo_levl_code nivel,
                                TO_CHAR(sztalgo_fecha_new,'DD/MM/YYYY') inicio_clases,
                                sztalgo_term_code_new periodo,
                                sztalgo_tipo_carga tipo
                INTO l_campus,l_nivel,l_inicio_clase,l_periodo,l_tipo
                FROM sztalgo
                WHERE 1 = 1
                AND sztalgo_no_regla = p_regla;


            EXCEPTION WHEN OTHERS THEN

                l_contar:=0;
            END;

            BEGIN


                dbms_output.put_line('extra 4');
                p_track_prono(p_regla,'NI: llamado a f_agrega_ningresos cuando es 1 campus');

                        l_retorna:=PKG_ALGORITMO_DIPLO_CURSOS.f_agrega_ningresos(
                                                                       fecha        => l_inicio_clase,
                                                                       campus       => l_campus,
                                                                       nivel        => l_nivel,
                                                                       peri         =>  l_periodo,
                                                                       tipo         =>  l_tipo,
                                                                       p_regla      =>   p_regla
                                                                    );



            EXCEPTION WHEN OTHERS THEN

               RETURN(L_RETORNA);
            END;

            dbms_output.put_line('Valor '||l_retorna||' fecha '||l_inicio_clase||' campus '||l_campus||' nivel '||l_nivel||' peri '||l_periodo||' tipo '||l_tipo||' regla '||p_regla);

        ELSIF l_contar > 1 THEN


             FOR x IN (SELECT DISTINCT sztalgo_camp_code campus,
                                       sztalgo_levl_code nivel,
                                       TO_CHAR(sztalgo_fecha_new,'DD/MM/YYYY') inicio_clases,
                                       sztalgo_no_regla regla,
                                       sztalgo_term_code_new periodo,
                                       sztalgo_tipo_carga tipo
                          FROM sztalgo
                          WHERE 1 = 1
                          AND sztalgo_no_regla = p_regla
                          order by 3
                         )
                  LOOP


                        dbms_output.put_line('extra 5');
                        p_track_prono(p_regla,'NI: llamado a f_agrega_ningresos cuando son varios campus');

                        l_retorna:=PKG_ALGORITMO_DIPLO_CURSOS.f_agrega_ningresos(
                                                                       fecha        =>  x.inicio_clases,
                                                                       campus       =>  x.campus,
                                                                       nivel        =>  x.nivel,
                                                                       peri         =>  x.periodo,
                                                                       tipo         =>  x.tipo,
                                                                       p_regla      =>  x.regla
                                                                    );
--
                    dbms_output.put_line('Rtorna '||l_retorna||' Peirodo '||x.periodo);

                  END LOOP;



        END IF;

       FOR c IN (SELECT  DISTINCT sztalgo_camp_code CAMPUS,
                                  sztalgo_levl_code nivel,
                                  to_char(sztalgo_fecha_new,'DD/MM/YYYY') inicio_clases,
                                  sztalgo_no_regla regla
               FROM sztalgo
               WHERE 1 = 1
               AND sztalgo_no_regla = p_regla
              )
       loop
                 dbms_output.put_line('extra 6 fecha inicio '||c.inicio_clases);

                     FOR d IN   (
                                  SELECT
                                   x.materia_padre,
                                   COUNT(x.pidm) total_alumnos
                            FROM(
                                   SELECT pidm,
                                           materia_padre,
                                           MATRICULA,
                                           regla
                                    FROM(
                                           SELECT  distinct inc.SZTNINC_PIDM pidm,
                                                    SZTNINC_SUBJ_CODE   materia_padre,
                                                     (SELECT SPRIDEN_ID
                                                     FROM SPRIDEN
                                                     WHERE 1 = 1
                                                     AND SPRIDEN_PIDM = inc.SZTNINC_PIDM
                                                     AND SPRIDEN_CHANGE_IND IS NULL) MATRICULA,
                                                     inc.SZTNINC_SUBJ_CODE||inc.SZTNINC_CRSE_NUMB materia_hija,
                                                     inc.SZTNINC_TERM_CODE periodo,
                                                     inc.SZTNINC_PTRM_CODE pperiodo,
                                                     inc.SZTNINC_STAR_DATE inicio_clase,
                                                     inc.SZTNINC_NO_REGLA regla
                                            FROM sztninc inc
                                            WHERE 1 = 1
                                        )x
                                    WHERE 1 = 1
                                    AND x.regla = p_regla
--                                    AND x.inicio_clase=p_fecha_inicio
                                    AND x.pidm not in (
                                                        SELECT sztprono_pidm
                                                        FROM sztprono
                                                        WHERE 1 = 1
                                                        AND sztprono_no_regla = p_regla
--                                                        AND sztprono_fecha_inicio  =p_fecha_inicio
                                                        AND sztprono_materia_legal = x.materia_padre )
                             )x
                            WHERE 1 = 1
                            AND not exists (SELECT null
                                            FROM sztprono ono
                                            WHERE 1 = 1
                                            AND ono.sztprono_no_regla = p_regla
--                                            AND ono.sztprono_fecha_inicio  =p_fecha_inicio
                                            AND ono.sztprono_materia_legal =x.materia_padre
                                        )
                            group by x.materia_padre
                            order by 1
                                 )
                             LOOP

                                 l_contar:=0;

                                 l_contar :=l_contar+1;

                                 dbms_output.put_line('extra 7');
                                 p_track_prono(p_regla,'NI: extra 7');

                                 BEGIN

                                     INSERT INTO szttnin VALUES(
                                                                d.materia_padre,
                                                                d.total_alumnos,
                                                                60,
                                                                c.regla,
                                                                'N',
                                                                 1,
                                                                'N',
                                                                null,
                                                                null
                                                                );
                                     l_retorna:='EXITO';

                                 EXCEPTION WHEN OTHERS THEN

                                     l_retorna:=' Error al INSERTar tabla de falta de materias '||SQLERRM;
                                                     p_track_prono(p_regla,'NI: Error al INSERTar tabla de falta de materias '||SQLERRM);
                                 END;

                             END LOOP;

              EXIT WHEN l_contar = 1;

       END LOOP;

       COMMIT;

       BEGIN

           DELETE szttnin
           WHERE 1 = 1
           AND szttnin_no_regla = p_regla
           AND szttnin_estatus_materia = 'S';

       EXCEPTION WHEN OTHERS THEN
           null;
       END;



       FOR c IN (SELECT DISTINCT sztalgo_camp_code campus,
                                 sztalgo_levl_code nivel,
                                 TO_CHAR(sztalgo_fecha_new,'DD/MM/YYYY') inicio_clases,
                                 sztalgo_no_regla regla
               FROM sztalgo
               WHERE 1 = 1
               AND sztalgo_no_regla = p_regla
               )
       LOOP
                  dbms_output.put_line('Entra 1');

             IF /*C.CAMPUS IN('UTL','COL','PER') AND */ C.NIVEL ='LI' THEN


                 dbms_output.put_line('extra 8');
                 p_track_prono(p_regla,'NI: extra 8');

                 FOR e IN (
                            SELECT
                                   x.materia_padre,
                                   COUNT(x.pidm) total_alumnos
                            FROM(
                                   SELECT pidm,
                                           materia_padre,
                                           MATRICULA,
                                           regla
                                    FROM(
                                           SELECT  distinct inc.SZTNINC_PIDM pidm,
                                                    SZTNINC_SUBJ_CODE  materia_padre,
                                                     (SELECT SPRIDEN_ID
                                                     FROM SPRIDEN
                                                     WHERE 1 = 1
                                                     AND SPRIDEN_PIDM = inc.SZTNINC_PIDM
                                                     AND SPRIDEN_CHANGE_IND IS NULL) MATRICULA,
                                                     inc.SZTNINC_SUBJ_CODE||inc.SZTNINC_CRSE_NUMB materia_hija,
                                                     inc.SZTNINC_TERM_CODE periodo,
                                                     inc.SZTNINC_PTRM_CODE pperiodo,
                                                     inc.SZTNINC_STAR_DATE inicio_clase,
                                                     inc.SZTNINC_NO_REGLA regla
                                            FROM sztninc inc
                                            WHERE 1 = 1
                                        )x
                                    WHERE 1 = 1
                                    AND x.regla = p_regla
                                   -- AND x.inicio_clase=p_fecha_inicio
                                    AND x.pidm not in (
                                                        SELECT sztprono_pidm
                                                        FROM sztprono
                                                        WHERE 1 = 1
                                                        AND sztprono_no_regla = p_regla
                                                        --AND sztprono_fecha_inicio  =p_fecha_inicio
                                                         )
                             )x
                            WHERE 1 = 1
                            AND  exists (SELECT null
                                        FROM sztprono ono
                                        WHERE 1 = 1
                                        AND ono.sztprono_no_regla = p_regla
                                        --AND ono.sztprono_fecha_inicio  =p_fecha_inicio
                                        AND ono.sztprono_materia_legal =x.materia_padre
                                        )
                            group by x.materia_padre
                            order by 1
                             )
                             loop

                                      l_contar:=0;
                                     l_contar :=l_contar+1;

                                     dbms_output.put_line('extra 9');

                                        p_track_prono(p_regla,'NI: extra 9');

                                     BEGIN
                                         SELECT SZTCONF_PIDM,
                                                SZTCONF_ID
                                           INTO l_prof_pidm,
                                                l_prof_id
                                         FROM sztconf
                                         WHERE 1 = 1
                                         AND SZTCONF_no_regla =c.regla
                                         AND SZTCONF_SUBJ_CODE =e.materia_padre
                                         AND rownum = 1;


                                     exception when others then
                                         null;
                                     end;


                                    BEGIN

                                        dbms_output.put_line('extra 10');
                                            p_track_prono(p_regla,'NI: extra 10');
                                        INSERT INTO SZTTNIN VALUES(
                                                                   e.materia_padre,
                                                                   e.total_alumnos,
                                                                   null,
                                                                   c.regla,
                                                                   'S',
                                                                   1,
                                                                   'N',
                                                                    l_prof_pidm,
                                                                    l_prof_id
                                                                   );
                                        l_retorna:='EXITO';

                                    exception when others then
                                        l_retorna:=' Error al INSERTar tabla de falta de materias '||sqlerrm;
                                        p_track_prono(p_regla,'Error al INSERTar tabla de falta de materias '||SQLERRM);
                                    end;


                             END LOOP;

                              exit when l_contar = 1;



             ELSE

                     dbms_output.put_line('Macana 1');
                        p_track_prono(p_regla,'NI: Macana 1');
                     for e in (
                               SELECT
                                   x.materia_padre,
                                   COUNT(x.pidm) total_alumnos
                            FROM(
                                   SELECT pidm,
                                           materia_padre,
                                           MATRICULA,
                                           regla
                                    FROM(
                                           SELECT  distinct inc.SZTNINC_PIDM pidm,
                                                    SZTNINC_SUBJ_CODE materia_padre,
                                                     (SELECT SPRIDEN_ID
                                                     FROM SPRIDEN
                                                     WHERE 1 = 1
                                                     AND SPRIDEN_PIDM = inc.SZTNINC_PIDM
                                                     AND SPRIDEN_CHANGE_IND IS NULL) MATRICULA,
                                                     inc.SZTNINC_SUBJ_CODE||inc.SZTNINC_CRSE_NUMB materia_hija,
                                                     inc.SZTNINC_TERM_CODE periodo,
                                                     inc.SZTNINC_PTRM_CODE pperiodo,
                                                     inc.SZTNINC_STAR_DATE inicio_clase,
                                                     inc.SZTNINC_NO_REGLA regla
                                            FROM sztninc inc
                                            WHERE 1 = 1
                            --                AND get_materia_padre(SZTNINC_SUBJ_CODE||SZTNINC_CRSE_NUMB)='M1DJO102'
                                        )x
                                    WHERE 1 = 1
                                    AND x.regla = p_regla
                            --        AND x.inicio_clase=p_fecha_inicio
                                    AND x.pidm not in (
                                                        SELECT sztprono_pidm
                                                        FROM sztprono
                                                        WHERE 1 = 1
                                                        AND sztprono_no_regla = p_regla
                            --                            AND sztprono_fecha_inicio  =p_fecha_inicio
                                                        AND sztprono_materia_legal = x.materia_padre
                                                        )
                             )x
                            WHERE 1 = 1
                            AND  exists (SELECT null
                                            FROM sztprono ono
                                            WHERE 1 = 1
                                            AND ono.sztprono_no_regla = p_regla
                            --                AND ono.sztprono_fecha_inicio  =p_fecha_inicio
                                            AND ono.sztprono_materia_legal =x.materia_padre
--                                            AND ono.sztprono_pidm = x.pidm
                                        )
                            group by x.materia_padre
                            order by 1

                             )
                             loop

                                      dbms_output.put_line('Entra 2');
                                       p_track_prono(p_regla,'NI: Entra 2');

                                     l_contar:=0;
                                     l_contar :=l_contar+1;


                                     BEGIN
                                         SELECT SZTCONF_PIDM,
                                                SZTCONF_ID
                                           INTO l_prof_pidm,
                                                l_prof_id
                                         FROM sztconf
                                         WHERE 1 = 1
                                         AND SZTCONF_no_regla =c.regla
                                         AND SZTCONF_SUBJ_CODE =e.materia_padre
                                         AND rownum = 1;

                                          dbms_output.put_line('Entra 3');
                                            p_track_prono(p_regla,'NI: Entra 3');
                                     exception when others then
                                          dbms_output.put_line('Entra 3'||sqlerrm);
                                          p_track_prono(p_regla,'NI: Entra 3'||sqlerrm);
                                     end;


                                    BEGIN

                                        INSERT INTO SZTTNIN VALUES(
                                                                   e.materia_padre,
                                                                   e.total_alumnos,
                                                                   null,
                                                                   c.regla,
                                                                   'S',
                                                                   1,
                                                                   'N',
                                                                    l_prof_pidm,
                                                                    l_prof_id
                                                                   );
                                        l_retorna:='EXITO';
                                        Commit;

                                         dbms_output.put_line('Entra 4.1');
                                         p_track_prono(p_regla,'NI: Entra 4.1 '||sqlerrm);
                                    exception when others then
                                        l_retorna:=' Error al INSERTar tabla de falta de materias '||sqlerrm;
                                         dbms_output.put_line('Erro 4 '||sqlerrm);
                                         p_track_prono(p_regla,'NI: Erro 4 '||sqlerrm);
                                    end;

                             END LOOP;

                 exit when l_contar = 1;

             END IF;

       END LOOP;

        p_track_prono(p_regla,'NI:Termina proceso -> Nuevos Ingresos. Salida: '||l_retorna);

                COMMIT;

        return(l_retorna);

    end f_ningreos_algo;
--
--

    function f_ningreos_prono (
                               p_regla         NUMBER,
                               p_materia       varchar2,
                               prof_pidm     varchar2,
                               p_fecha_inicio varchar2
                               )return varchar2
    as
        l_retorna varchar2(100);
        l_inicio_clase varchar2(100);
        l_campus varchar2(100);
        l_nivel  varchar2(100);
        l_sql    varchar2(5000);
        l_contar number;
        l_numero_registros number;
        l_previo varchar2(1000);
        l_programa varchar2(100);
        l_pperiodo_ni VARCHAR2(100);
        l_type    varchar2(100);
        l_tipo_ini varchar2(100);
        l_sztprono_study_path number;
        l_sztprono_rate varchar2(100);
        l_materias_activas number;
        vl_tipo_jornada varchar2(100);
        vl_qa_avance number;
        vl_fecha_ing date;
        vl_tipo_ini  varchar2(20);
        vl_tip_ini   varchar2(20);
        l_materias_confug number;
        l_sztprono_jornada varchar2(20);
        l_bim varchar2(10);
    BEGIN

           commit;

            FOR C IN (SELECT sztalgo_camp_code CAMPUS,
                                 sztalgo_levl_code nivel,
                                 to_char(sztalgo_fecha_new,'DD/MM/YYYY') inicio_clases,
                                 sztalgo_no_regla regla,
                                 SZTALGO_TERM_CODE_NEW periodo,
                                 SZTALGO_PTRM_CODE_NEW pperiodo
                      FROM sztalgo
                      WHERE 1 = 1
                      AND sztalgo_no_regla = p_regla
                         )
            loop


                    FOR D IN(
                                SELECT *
                                FROM
                                (
                                       SELECT pidm,
                                               materia_padre,
                                               MATRICULA,
                                               materia_hija,
                                               periodo,
                                               pperiodo,
                                               secuencia
                                        FROM
                                        (
                                        SELECT  x.pidm,
                                               (SELECT sztmaco_matpadre
                                                FROM sztmaco
                                                WHERE 1 = 1
                                                AND SZTMACO_CAMP_CODE =c.campus
                                                AND SZTMACO_LEVL_CODE =c.nivel
                                                AND SZTMACO_MATHIJO  =x.materia_hija) materia_padre,
                                                (SELECT SPRIDEN_ID
                                                FROM SPRIDEN
                                                WHERE 1 = 1
                                                AND SPRIDEN_PIDM = x.pidm
                                                AND SPRIDEN_CHANGE_IND IS NULL) MATRICULA,
                                                x.materia_hija,
                                                x.periodo,
                                                x.pperiodo,
                                                ROW_NUMBER() OVER (PARTITION BY x.pidm ORDER BY x.pidm) secuencia
                                        FROM
                                        (
                                         SELECT  distinct inc.SZTNINC_PIDM pidm,
                                                (SELECT SPRIDEN_ID
                                                 FROM SPRIDEN
                                                 WHERE 1 = 1
                                                 AND SPRIDEN_PIDM = inc.SZTNINC_PIDM
                                                 AND SPRIDEN_CHANGE_IND IS NULL) MATRICULA,
                                                 inc.SZTNINC_SUBJ_CODE||inc.SZTNINC_CRSE_NUMB materia_hija,
                                                 inc.SZTNINC_TERM_CODE periodo,
                                                 inc.SZTNINC_PTRM_CODE pperiodo,
                                                 inc.SZTNINC_STAR_DATE
                                         FROM SZTNINC inc
                                         WHERE 1 = 1
                                         AND SZTNINC_NO_REGLA = c.regla
                                        )X
                                        )
                                        WHERE 1 = 1
                                        AND MATERIA_PADRE IN (
                                                              SELECT
                                                                     distinct (SELECT sztmaco_matpadre
                                                                      FROM sztmaco
                                                                      WHERE 1 = 1
                                                                      AND SZTMACO_CAMP_CODE =c.campus
                                                                      AND SZTMACO_LEVL_CODE =c.nivel
                                                                      AND SZTMACO_MATHIJO  =x.materia_hija) materia_padre
                                                              FROM
                                                              (
                                                                  SELECT  distinct inc.SZTNINC_PIDM pidm,
                                                                       (SELECT SPRIDEN_ID
                                                                        FROM SPRIDEN
                                                                        WHERE 1 = 1
                                                                        AND SPRIDEN_PIDM = inc.SZTNINC_PIDM
                                                                        AND SPRIDEN_CHANGE_IND IS NULL) MATRICULA,
                                                                        inc.SZTNINC_SUBJ_CODE||inc.SZTNINC_CRSE_NUMB materia_hija,
                                                                        inc.SZTNINC_TERM_CODE periodo,
                                                                        inc.SZTNINC_PTRM_CODE pperiodo,
                                                                        inc.SZTNINC_STAR_DATE
                                                                FROM SZTNINC inc
                                                                WHERE 1 = 1
                                                                AND SZTNINC_NO_REGLA = c.regla
                                                              )X
                                                              minus
                                                              SELECT distinct SZTPRONO_MATERIA_LEGAL
                                                              FROM sztprono
                                                              WHERE 1 = 1
                                                              AND sztprono_no_regla = p_regla
                                                        )
                                )
                                WHERE 1 = 1
                                AND   materia_padre = p_materia

                                                    )loop

                                                        --raise_application_error (-20002,' Retorno pronostico '||l_retorna);



                                                        l_contar:=0;
                                                        l_contar :=l_contar+1;

                                                        BEGIN

                                                                 SELECT  f_get_program(d.pidm)
                                                                 INTO l_programa
                                                                 FROM dual;
                                                        exception when others then
                                                            l_retorna:='Error al obtener programa del pidm '||d.pidm;
                                                        end;

                                                        BEGIN

                                                          SELECT   min (x.fecha_inicio) fecha, substr (x.pperiodo, 2,1) inicio
                                                             INTO vl_fecha_ing, vl_tipo_ini
                                                             FROM (
                                                             SELECT DISTINCT
                                                                        MIN (SSBSECT_PTRM_START_DATE) fecha_inicio, SFRSTCR_pidm pidm,b.SSBSECT_TERM_CODE Periodo, SSBSECT_PTRM_CODE pperiodo
                                                                     FROM SFRSTCR a, SSBSECT b,  sorlcur c
                                                                    WHERE     a.SFRSTCR_TERM_CODE = b.SSBSECT_TERM_CODE
                                                                          AND a.SFRSTCR_CRN = b.SSBSECT_CRN
                                                                         AND a.SFRSTCR_RSTS_CODE != 'RE'
                                                                          AND b.SSBSECT_PTRM_START_DATE =
                                                                                 (SELECT MIN (b1.SSBSECT_PTRM_START_DATE)
                                                                                    FROM SSBSECT b1
                                                                                   WHERE b.SSBSECT_TERM_CODE = b1.SSBSECT_TERM_CODE
                                                                                         AND b.SSBSECT_CRN = b1.SSBSECT_CRN)
                                                                    AND  SFRSTCR_pidm =d.pidm
                                                                    AND SFRSTCR_pidm = c.sorlcur_pidm
                                                                    AND c.sorlcur_program = l_programa
                                                                    AND c.SORLCUR_LMOD_CODE = 'LEARNER'
                                                                    AND c.SORLCUR_ROLL_IND = 'Y'
                                                                    AND c.SORLCUR_CACT_CODE ='ACTIVE'
                                                                    AND c.SORLCUR_SEQNO = (SELECT max (c1.SORLCUR_SEQNO)
                                                                                                             FROM sorlcur c1
                                                                                                             WHERE c.sorlcur_pidm = c1.sorlcur_pidm
                                                                                                             AND c.SORLCUR_LMOD_CODE = c1.SORLCUR_LMOD_CODE
                                                                                                             AND c.SORLCUR_ROLL_IND = c1.SORLCUR_ROLL_IND
                                                                                                             AND c.SORLCUR_CACT_CODE = c1.SORLCUR_CACT_CODE
                                                                                                             AND c.sorlcur_program = c1.sorlcur_program)
                                                                    AND SFRSTCR_STSP_KEY_SEQUENCE =    c.SORLCUR_KEY_SEQNO
                                                                 GROUP BY SFRSTCR_pidm, b.SSBSECT_TERM_CODE , SSBSECT_PTRM_CODE
                                                                 order by 1,3 asc
                                                                 )  x
                                                                 WHERE rownum = 1
                                                                 group by x.Periodo, x.pperiodo
                                                                 order by 2 asc;



                                                        Exception
                                                             When Others then
                                                                 vl_fecha_ing := null;
                                                                 vl_tipo_ini :=0;
                                                        End;

                                                       BEGIN

                                                            SELECT distinct substr (b.STVATTS_CODE, 3, 1) dato
                                                                 INTO vl_tipo_jornada
                                                             FROM SGRSATT a, STVATTS b, sorlcur c
                                                             WHERE a.SGRSATT_ATTS_CODE = b.STVATTS_CODE
                                                             AND a.SGRSATT_TERM_CODE_EFF = (SELECT max ( a1.SGRSATT_TERM_CODE_EFF)
                                                                                                                     FROM SGRSATT a1
                                                                                                                     WHERE a.SGRSATT_PIDM = a1.SGRSATT_PIDM
                                                                                                                     AND a1.SGRSATT_ATTS_CODE = a1.SGRSATT_ATTS_CODE
                                                                                                                     AND regexp_like(a1.SGRSATT_ATTS_CODE, '^[0-9]') )
                                                             AND regexp_like(a.SGRSATT_ATTS_CODE, '^[0-9]')
                                                             AND SGRSATT_PIDM =  d.pidm
                                                             AND a.SGRSATT_PIDM = c.sorlcur_pidm
                                                             AND c.sorlcur_program = l_programa
                                                             AND c.SORLCUR_LMOD_CODE = 'LEARNER'
                                                             AND c.SORLCUR_ROLL_IND = 'Y'
                                                             AND c.SORLCUR_CACT_CODE ='ACTIVE'
                                                             AND c.SORLCUR_SEQNO = (SELECT max (c1.SORLCUR_SEQNO)
                                                                                                     FROM sorlcur c1
                                                                                                     WHERE c.sorlcur_pidm = c1.sorlcur_pidm
                                                                                                     AND c.SORLCUR_LMOD_CODE = c1.SORLCUR_LMOD_CODE
                                                                                                     AND c.SORLCUR_ROLL_IND = c1.SORLCUR_ROLL_IND
                                                                                                     AND c.SORLCUR_CACT_CODE = c1.SORLCUR_CACT_CODE
                                                                                                     AND c.sorlcur_program = c1.sorlcur_program)
                                                             AND a.SGRSATT_STSP_KEY_SEQUENCE =    c.SORLCUR_KEY_SEQNO;

                                                        exception when others then
                                                           null;
                                                        end;

                                                       IF vl_tipo_ini = 0  AND  l_programa in ('UTLLIDIFED', 'UTLLIDDFED', 'UTLLIDEFED', 'UTLLIDDESE'  ) then

                                                             vl_tip_ini := 'ANDER';

                                                         ElsIF vl_tipo_ini = 0 AND  l_programa not in ('UTLLIDIFED', 'UTLLIDDFED', 'UTLLIDEFED', 'UTLLIDDESE'  ) then
                                                             vl_tip_ini := 'AN';

                                                         ElsIF vl_tipo_ini = 1  AND  l_programa in ('UTLLIDIFED', 'UTLLIDDFED', 'UTLLIDEFED', 'UTLLIDDESE'  ) then

                                                             vl_tip_ini := 'NODER';
                                                         ElsIF vl_tipo_ini = 1  AND  l_programa not in ('UTLLIDIFED', 'UTLLIDDFED', 'UTLLIDEFED', 'UTLLIDDESE'  ) then

                                                             vl_tip_ini := 'NO';


                                                         ElsIF vl_tipo_ini  in (2,3)  AND  l_programa not in ('UTLLIDIFED', 'UTLLIDDFED', 'UTLLIDEFED', 'UTLLIDDESE'  ) then
                                                             vl_tip_ini := 'NO';

                                                        End IF;

                                                        BEGIN

                                                            SELECT MAX (T.SGRSATT_ATTS_CODE)
                                                            INTO l_sztprono_jornada
                                                            FROM SGRSATT T
                                                            WHERE 1 = 1
                                                            AND T.SGRSATT_PIDM =  d.pidm
                                                            AND T.SGRSATT_STSP_KEY_SEQUENCE =l_sztprono_study_path
                                                            AND REGEXP_LIKE  (T.SGRSATT_ATTS_CODE , '^[0-9]')
                                                            AND SUBSTR(T.SGRSATT_TERM_CODE_EFF,5,2) NOT IN (81,82,83)
                                                            AND T.SGRSATT_TERM_CODE_EFF = ( SELECT MAX(SGRSATT_TERM_CODE_EFF)
                                                                                               FROM SGRSATT TT
                                                                                               WHERE  TT.SGRSATT_PIDM =  T.SGRSATT_PIDM
                                                                                               AND  TT.SGRSATT_STSP_KEY_SEQUENCE= T.SGRSATT_STSP_KEY_SEQUENCE
                                                                                               AND SUBSTR(TT.SGRSATT_TERM_CODE_EFF,5,2) NOT IN (81,82,83)
                                                                                               AND REGEXP_LIKE  (T.SGRSATT_ATTS_CODE , '^[0-9]'))
                                                            AND T.SGRSATT_ACTIVITY_DATE = (SELECT MAX(SGRSATT_ACTIVITY_DATE)
                                                                                           FROM SGRSATT T1
                                                                                           WHERE T1.SGRSATT_PIDM = T.SGRSATT_PIDM
                                                                                           AND T1.SGRSATT_STSP_KEY_SEQUENCE = T.SGRSATT_STSP_KEY_SEQUENCE
                                                                                           AND T1.SGRSATT_TERM_CODE_EFF = T.SGRSATT_TERM_CODE_EFF
                                                                                           AND SUBSTR(T1.SGRSATT_TERM_CODE_EFF,5,2) NOT IN (81,82,83)
                                                                                           AND REGEXP_LIKE  (T.SGRSATT_ATTS_CODE , '^[0-9]'));

                                                        EXCEPTION WHEN OTHERS THEN
                                                                NULL;
                                                        END;

                                                        BEGIN

                                                           SELECT SORLCUR_KEY_SEQNO,SORLCUR_RATE_CODE
                                                           INTO l_sztprono_study_path,l_sztprono_rate
                                                           FROM SORLCUR A
                                                           WHERE A.SORLCUR_PIDM = d.pidm
                                                           AND A.SORLCUR_PROGRAM =l_programa
                                                           AND A.SORLCUR_LMOD_CODE = 'LEARNER'
                                                           AND A.SORLCUR_ROLL_IND  = 'Y'
                                                           AND A.SORLCUR_CACT_CODE = 'ACTIVE'
                                                           AND A.SORLCUR_SEQNO IN (SELECT MAX (A1.SORLCUR_SEQNO)
                                                                                  FROM SORLCUR A1
                                                                                  WHERE A1.SORLCUR_PIDM = A.SORLCUR_PIDM
                                                                                  AND A1.SORLCUR_ROLL_IND  = A.SORLCUR_ROLL_IND
                                                                                  AND A1.SORLCUR_CACT_CODE = A.SORLCUR_CACT_CODE
                                                                                  AND A1.SORLCUR_PROGRAM = A.SORLCUR_PROGRAM
                                                                                  AND A1.SORLCUR_LMOD_CODE = A.SORLCUR_LMOD_CODE);
                                                       exception when others then
                                                               null;
                                                       end;

                                                       BEGIN

                                                             SELECT a.SGBSTDN_STYP_CODE
                                                             INTO l_type
                                                             FROM sgbstdn a
                                                             WHERE a.sgbstdn_pidm = d.pidm
                                                             AND a.sgbstdn_term_code_eff = (SELECT max (a1.sgbstdn_term_code_eff)
                                                                                                             FROM sgbstdn a1
                                                                                                             WHERE a.sgbstdn_pidm = a1.sgbstdn_pidm
                                                                                                             );
                                                        Exception
                                                             When Others then
                                                                l_type := null;
                                                        End;

                                                        BEGIN



                                                            SELECT COUNT (distinct a.SFRSTCR_TERM_CODE) Periodo
                                                                INTO vl_qa_avance
                                                            FROM SFRSTCR a, SSBSECT b, sorlcur c
                                                           WHERE     a.SFRSTCR_TERM_CODE = b.SSBSECT_TERM_CODE
                                                                 AND a.SFRSTCR_CRN = b.SSBSECT_CRN
                                                                AND a.SFRSTCR_RSTS_CODE != 'RE'
                                                                 AND b.SSBSECT_PTRM_START_DATE =
                                                                        (SELECT MIN (b1.SSBSECT_PTRM_START_DATE)
                                                                           FROM SSBSECT b1
                                                                          WHERE b.SSBSECT_TERM_CODE = b1.SSBSECT_TERM_CODE
                                                                                AND b.SSBSECT_CRN = b1.SSBSECT_CRN)
                                                           AND SFRSTCR_pidm = c.sorlcur_pidm
                                                           AND c.sorlcur_program =   l_programa
                                                           AND c.SORLCUR_LMOD_CODE = 'LEARNER'
                                                           AND c.SORLCUR_ROLL_IND = 'Y'
                                                           AND c.SORLCUR_CACT_CODE ='ACTIVE'
                                                           AND c.SORLCUR_SEQNO = (SELECT max (c1.SORLCUR_SEQNO)
                                                                                                    FROM sorlcur c1
                                                                                                    WHERE c.sorlcur_pidm = c1.sorlcur_pidm
                                                                                                    AND c.SORLCUR_LMOD_CODE = c1.SORLCUR_LMOD_CODE
                                                                                                    AND c.SORLCUR_ROLL_IND = c1.SORLCUR_ROLL_IND
                                                                                                    AND c.SORLCUR_CACT_CODE = c1.SORLCUR_CACT_CODE
                                                                                                    AND c.sorlcur_program = c1.sorlcur_program)
                                                           AND SFRSTCR_STSP_KEY_SEQUENCE =    c.SORLCUR_KEY_SEQNO
                                                           AND  SFRSTCR_pidm = d.pidm
                                                           AND SFRSTCR_TERM_CODE not in (SELECT distinct SZTALGO_TERM_CODE_NEW
                                                                                                       FROM sztalgo
                                                                                                       WHERE SZTALGO_NO_REGLA = c.regla)
                                                           GROUP BY SFRSTCR_pidm;


                                                        exception
                                                        When Others then
                                                          vl_qa_avance :=0;
                                                        End;


                                                        BEGIN

                                                            SELECT nvl(max(SZTPRONO_SECUENCIA),0)+1
                                                            INTO d.secuencia
                                                            FROM sztprono
                                                            WHERE 1 = 1
                                                            AND sztprono_no_regla =c.regla
                                                            AND sztprono_pidm =d.pidm;

                                                        exception when others then
                                                                null;
                                                        end;



                                                       BEGIN
                                                             SELECT a.SGBSTDN_STYP_CODE
                                                             INTO l_type
                                                             FROM sgbstdn a
                                                             WHERE a.sgbstdn_pidm = d.pidm
                                                             AND a.sgbstdn_term_code_eff = (SELECT max (a1.sgbstdn_term_code_eff)
                                                                                                             FROM sgbstdn a1
                                                                                                             WHERE a.sgbstdn_pidm = a1.sgbstdn_pidm
                                                                                                             );
                                                        Exception
                                                             When Others then
                                                                l_type := null;
                                                        End;


                                                       IF l_type IN ('F','N') then

                                                           BEGIN

                                                               SELECT DISTINCT ZSTPARA_PARAM_VALOR
                                                               INTO d.pperiodo
                                                               FROM ZSTPARA
                                                               WHERE 1 = 1
                                                               AND ZSTPARA_MAPA_ID ='PTR_NI'
                                                               AND ZSTPARA_PARAM_DESC =d.pperiodo;

                                                           exception when others then
                                                                raise_application_error (-20002,'No existe configuracion para es esta parte de periodo '||d.pperiodo||' en el Para PTR_NI '||sqlerrm);
                                                           end;

                                                           BEGIN

                                                           SELECT distinct substr(SZTALGO_PTRM_CODE_NEW,2,1) dato
                                                               INTO l_bim
                                                               FROM sztalgo
                                                               WHERE 1 = 1
                                                               AND sztalgo_no_regla = p_regla;

                                                           exception when others then
                                                                   null;
                                                           end;

                                                           IF l_bim = '2' then


                                                              BEGIN

                                                                   SELECT PKG_FINANZAS.F_PERIODO_NEW (d.periodo )
                                                                   INTO d.periodo
                                                                   FROM dual;


                                                              exception when others then
                                                                   null;
                                                              end;


                                                           end IF;

                                                       end IF;

                                                       IF vl_qa_avance = 0 THEN

                                                            vl_qa_avance:=1;

                                                       END IF;


                                                        BEGIN

                                                            INSERT INTO SZTPRONO VALUES (
                                                                                            d.pidm,
                                                                                            d.matricula,
                                                                                            d.periodo,
                                                                                            l_programa,
                                                                                            d.materia_padre,
                                                                                            d.secuencia,
                                                                                            d.pperiodo,
                                                                                            d.materia_hija,
                                                                                            'NUEVO INGRESO',
                                                                                            c.inicio_clases,
                                                                                            null,
                                                                                            null,
                                                                                            vl_qa_avance,
                                                                                            c.regla,
                                                                                            user,
                                                                                            l_sztprono_study_path,
                                                                                            l_sztprono_rate,
                                                                                            l_sztprono_jornada,--jornada
                                                                                            SYSDATE,
                                                                                            'Q'||vl_qa_avance,
                                                                                            vl_tip_ini,
                                                                                            vl_tipo_jornada,
                                                                                            'N',
                                                                                            'N',
                                                                                            l_type,
                                                                                            'N',
                                                                                            null,
                                                                                            null
                                                                                          );

                                                            l_retorna:='EXITO';





                                                        EXCEPTION WHEN OTHERS THEN

                                                            l_retorna:='Error al INSERTar tabla de pronostico '||sqlerrm;

                                                        END;

                                                    END LOOP;
                exit when l_contar = 1;



            END LOOP;



            commit;

            BEGIN
                l_previo:=F_PREVIO(p_regla,p_materia,prof_pidm,'NUEVO INGRESO',p_fecha_inicio );
            end;

            commit;



            dbms_output.put_line('entrANDo '||l_previo);



        IF l_previo <> 'EXITO' THEN

            DELETE SZTPRONO
            WHERE 1 = 1
            AND SZTPRONO_NO_REGLA = P_REGLA
            AND SZTPRONO_MATERIA_LEGAL = P_MATERIA;

            DELETE SZTCONF
            WHERE 1 = 1
            AND SZTCONF_NO_REGLA = P_REGLA
            AND SZTCONF_SUBJ_CODE = P_MATERIA
            AND SZTCONF_USSER_INSERT ='NUEVO INGRESO';

            COMMIT;

            return(l_previo);

        ELSE

             return(l_retorna);

        END IF;

        return(l_retorna);

    END;
    --
    --
    FUNCTION  F_REINGRESO_PRONO (P_REGLA    NUMBER,
                                 p_periodo  VARCHAR2,
                                 p_materia  VARCHAR2,
                                 p_pperiodo VARCHAR2,
                                 prof_pidm   number,
                                 p_fecha_inicio varchar2
                                 ) RETURN VARCHAR2
    AS
        l_retorna varchar2(500);
        l_previo  varchar2(500);
    BEGIN

        dbms_output.put_line('Entra 2'||l_previo);

        for c in (SELECT SZTREIN_PIDM pidm,
                     SZTREIN_ID matricula ,
                     SZTREIN_NOMBRE,
                     SZTREIN_CAMPUS,
                     SZTREIN_NIVEL,
                     SZTREIN_START_DATE  inicio_clases,
                     SZTREIN_NO_REGLA,
                     SZTREIN_PROGRAMA programa,
                     SZTREIN_RATE rate
              FROM SZTREIN
              WHERE 1 = 1
              AND SZTREIN_NO_REGLA = p_regla
              AND SZTREIN_ESTATUS_ALUMNO ='S'
          )
          loop

                BEGIN

                    INSERT INTO SZTPRONO VALUES (
                                                     c.pidm,      -- NUMBER
                                                     c.matricula,
                                                     p_periodo,
                                                     c.programa,
                                                     p_materia,
                                                     1,   --NUMBER
                                                     p_pperiodo,
                                                     p_materia,
                                                     'REINGRESO',
                                                     c.inicio_clases,
                                                     null,
                                                     null,
                                                     1, --NUMBER
                                                     p_regla, --NUMBER
                                                     user,
                                                     1,   --NUMBER
                                                     c.rate,
                                                     null,
                                                     sysdate,
                                                     1,
                                                     NULL,
                                                     NULL,
                                                     'N',
                                                     'N',
                                                     'N',
                                                     'N',
                                                     null,
                                                     null
                                                );

                    l_retorna :='EXITO';

                    raise_application_error (-20002,'uno   '||l_retorna);

                EXCEPTION WHEN OTHERS THEN
                    dbms_output.put_line('Error '||sqlerrm);
                    l_retorna :='Error '||sqlerrm;

                END;

          END LOOP;

          commit;



          BEGIN
             l_previo:=F_PREVIO(p_regla,p_materia,prof_pidm,'REINGRESO',p_fecha_inicio);
          end;

          commit;


          IF l_previo <> 'EXITO' THEN

            DELETE SZTPRONO
            WHERE 1 = 1
            AND SZTPRONO_NO_REGLA = P_REGLA
            AND SZTPRONO_MATERIA_LEGAL = P_MATERIA;

            UPDATE SZTREIN SET SZTREIN_ESTATUS_ALUMNO ='N'
            WHERE 1 = 1
            AND SZTREIN_NO_REGLA = P_REGLA;

            COMMIT;

          END IF;

        dbms_output.put_line('Entra 2'||l_previo);

        --raise_application_error (-20002,'Error al obtener valores de  spriden  '||l_retorna);

        return(l_retorna);

        dbms_output.put_line('Entra 2'||l_retorna);

    END;

    --
    --
    function F_PREVIO ( p_regla        NUMBER,
                          p_materia     varchar2,
                          prof_pidm     varchar2,
                          p_proceso     varchar2,
                          p_fecha_inicio varchar2
                        )return varchar2
    as
    l_iteraciones number;
    l_monto_pago  number(10,2);
    l_resta_grupo number;
    l_residuo     number;
    l_max_grupos  number;
    l_retorna     varchar2(1000);
    l_contar      number;
    l_id_prof     varchar2(10);
    l_contar_tes  number;
    l_contador    number;
    BEGIN

          l_contador:=0;


           IF p_proceso <> 'CON MATERIA' THEN

               SELECT COUNT(*)
              INTO l_contar
              FROM sztconf
              WHERE 1 = 1
              AND sztconf_no_regla = p_regla
              AND sztconf_subj_code = p_materia;



               IF l_contar > 0 then

                     l_retorna:='Esta Materia ya se encuentra en pronostico';

                     dbms_output.put_line('sin materia salir '||l_contar);



               else



                    for c in (SELECT sum (x.no_alumnos) no_alumnos ,
                               x.clave_materia  ,
                               x.periodicidad,
                               sztmaco_camp_code campus ,
                               sztmaco_levl_code nivel,
                               50 maximo,
                               4 maximo_grupos
                        FROM (
                                SELECT COUNT(ra.sztprono_id) no_alumnos,
                                            ra.sztprono_materia_legal clave_materia,
                                            DECODE(sd.sztdtec_periodicidad,1,'B',2,'C',3,'S',4,'A') periodicidad
                                FROM sztprono ra,
                                     sztdtec  sd
                                WHERE 1 = 1
                                AND ra.SZTPRONO_MATERIA_LEGAL =p_materia
                                AND ra.sztprono_no_regla = p_regla
                                AND ra.SZTPRONO_PROGRAM = sd.sztdtec_program
                                AND sd.sztdtec_term_code ='000000'
                                group by ra.sztprono_materia_legal,sd.sztdtec_periodicidad
                        ) x,
                                sztmaco
                                WHERE 1 = 1
                               AND sztmaco_matpadre =  x.clave_materia
                                AND sztmaco_mathijo =   x.clave_materia
                                group  by x.clave_materia ,
                                          x.periodicidad,
                                          sztmaco_camp_code,
                                          sztmaco_levl_code
                          )
                          loop


                                l_iteraciones := ROUND(c.no_alumnos/c.maximo) -1;


                                BEGIN

                                    SELECT spriden_id
                                    INTO l_id_prof
                                    FROM spriden
                                    WHERE 1 = 1
                                    AND spriden_change_ind is null
                                    AND spriden_pidm = prof_pidm;

                                exception when others then
                                    null;
                                end;

                                IF l_iteraciones <= 0 THEN


                                    BEGIN

                                          SELECT sztcost_cost
                                          INTO l_monto_pago
                                          FROM sztcost
                                          WHERE 1 = 1
                                          AND sztcost_num_groups = 1
                                          AND sztcost_levl_code  =c.nivel
                                          AND sztcost_camp_code  =c.campus
                                          AND sztcost_min_cupo <= c.maximo
                                          AND sztcost_max_cupo >= c.maximo
                                          AND SZTCOST_RMT_CODE=   'C'
                                          AND sztcost_active='S';



                                    EXCEPTION WHEN OTHERS THEN
                                        l_retorna:='No se puede recuperar costo 1 '||sqlerrm;
                                    END;

                                    BEGIN

                                             INSERT INTO  SZTCONF VALUES(
                                                                             c.clave_materia,
                                                                             1,
                                                                             c.no_alumnos,
                                                                             prof_pidm,
                                                                             l_monto_pago,
                                                                             p_proceso,
                                                                             SYSDATE,
                                                                             USER,
                                                                             SYSDATE,
                                                                             p_regla,
                                                                             c.periodicidad,
                                                                             'N',
                                                                             l_id_prof,
                                                                             p_fecha_inicio,
                                                                             0,
                                                                             null,
                                                                             null, null
                                                                         );
                                        l_retorna:='EXITO';

                                    EXCEPTION WHEN OTHERS THEN
                                         l_retorna:='No se puede INSERTar en sztconf 1 '||sqlerrm;

                                    END;

                                ELSIF  l_iteraciones > 0 THEN

                                    for i in 1.. l_iteraciones loop


                                            BEGIN

                                                  SELECT sztcost_cost
                                                  INTO l_monto_pago
                                                  FROM sztcost
                                                  WHERE 1 = 1
                                                  AND sztcost_num_groups = i
                                                  AND sztcost_levl_code  =c.nivel
                                                  AND sztcost_camp_code  =c.campus
                                                  AND sztcost_min_cupo <= c.maximo
                                                  AND sztcost_max_cupo >= c.maximo
                                                  AND SZTCOST_RMT_CODE=   c.periodicidad
                                                  AND sztcost_active='S';



                                            EXCEPTION WHEN OTHERS THEN
                                                 l_retorna:=('No se ecnontro ningun dato para obtener el costo de pago 2 '||sqlerrm);

                                            END;

                                            BEGIN

                                                     INSERT INTO  SZTCONF VALUES(
                                                                                     c.clave_materia,
                                                                                     i,
                                                                                     c.maximo,
                                                                                     prof_pidm,
                                                                                     l_monto_pago,
                                                                                     p_proceso,
                                                                                     SYSDATE,
                                                                                     USER,
                                                                                     SYSDATE,
                                                                                     p_regla,
                                                                                     c.periodicidad,
                                                                                     'N',
                                                                                     prof_pidm,
                                                                                     p_fecha_inicio,
                                                                                     0,
                                                                                     null,
                                                                                     null, null
                                                                                 );
                                                l_retorna:='EXITO';

                                            EXCEPTION WHEN NO_DATA_FOUND THEN
                                                  l_retorna:='No se puede INSERTar en sztconf 2 '||sqlerrm;
                                            END;



                                    END LOOP;


                                END IF;

                                l_iteraciones:=0;
                                l_monto_pago:=0;

                                BEGIN

                                            SELECT sum(SZTCONF_STUDENT_NUMB)
                                            INTO l_resta_grupo
                                            FROM SZTCONF
                                            WHERE 1 = 1
                                            AND SZTCONF_NO_REGLA =P_REGLA
                                            AND SZTCONF_SUBJ_CODE = c.clave_materia
                                            AND SZTCONF_PIDM = prof_pidm;

                                           -- DBMS_OUTPUT.PUT_LINE('Total de alumnos empuejados '||l_resta_grupo);

                                EXCEPTION WHEN OTHERS THEN
                                     l_retorna:='No se puede iobtener la resta del grupo 1 '||sqlerrm;
                                END;

                                l_residuo:=c.no_alumnos - l_resta_grupo;

                                l_iteraciones:=round (l_residuo/c.maximo) -1;

                                 BEGIN
                                     SELECT max(SZTCONF_GROUP)+1
                                         INTO l_max_grupos
                                         FROM sztconf
                                         WHERE 1 = 1
                                         AND sztconf_subj_code = c.clave_materia
                                         AND sztconf_no_regla  = p_regla;


                                 EXCEPTION WHEN OTHERS THEN
                                      l_retorna:='No se puede obtener el maximo del grupo 1 '||sqlerrm;
                                 END;

                                 IF l_iteraciones = 0 then


                                       BEGIN

                                                 SELECT sztcost_cost
                                                 INTO l_monto_pago
                                                 FROM sztcost
                                                 WHERE 1 = 1
                                                 AND sztcost_num_groups = l_max_grupos
                                                 AND sztcost_levl_code  =c.nivel
                                                 AND sztcost_camp_code  =c.campus
                                                 AND sztcost_min_cupo <= c.maximo
                                                 AND sztcost_max_cupo >= c.maximo
                                                 AND SZTCOST_RMT_CODE=   c.periodicidad
                                                 AND sztcost_active='S';



                                       EXCEPTION WHEN OTHERS THEN
                                            l_retorna:='No se puede recuperar costo 2 '||sqlerrm;
                                       END;


                                       BEGIN

                                                INSERT INTO  SZTCONF VALUES(
                                                                                        c.clave_materia,
                                                                                        l_max_grupos,
                                                                                        l_residuo,
                                                                                        prof_pidm,
                                                                                        l_monto_pago,
                                                                                        p_proceso,
                                                                                        SYSDATE,
                                                                                        USER,
                                                                                        SYSDATE,
                                                                                        p_regla,
                                                                                        c.periodicidad,
                                                                                        'N',
                                                                                        prof_pidm,
                                                                                        p_fecha_inicio,
                                                                                        0,
                                                                                        null,
                                                                                        null, null
                                                                                    );
                                            l_retorna:='EXITO';

                                       EXCEPTION WHEN OTHERS THEN
                                             l_retorna:='No se puede INSERTar en sztconf 3 '||sqlerrm;

                                       END;

                                 end IF;

                          END LOOP;

                       commit;

               end IF;


           ELSIF p_proceso = 'CON MATERIA' THEN

                l_contador:=0;

                for d in (SELECT SZTTNIN_NO_ALUMNOS no_alumnos,
                                                 SZTTNIN_MATERIA clave_materia,
                                                 50 maximo,
                                                 4 maximo_grupos,
                                                 SZTTNIN_PROF_PIDM pidm,
                                                 SZTTNIN_PROF_ID prof_id
                                            FROM SZTTNIN ZIN
                                            WHERE 1 = 1
                                            AND SZTTNIN_no_regla = p_regla
                                            AND SZTTNIN_MATERIA = p_materia
                                            AND SZTTNIN_ESTATUS_MATERIA = 'S'
                                  )
                                  loop


                                       l_contador:=l_contador+1;

                                       l_iteraciones := ROUND(d.no_alumnos/d.maximo) -1;

                                        l_contador:=l_contador+1;



                                         BEGIN

                                             SELECT spriden_id
                                             INTO l_id_prof
                                             FROM spriden
                                             WHERE 1 = 1
                                             AND spriden_change_ind is null
                                             AND spriden_pidm = d.pidm;

                                         exception when others then
                                             null;
                                         end;

                                         IF l_iteraciones <0 then

                                            l_iteraciones:=0;

                                         end IF;

                                         IF l_iteraciones <= 0 THEN

                                            BEGIN

                                                  SELECT sztcost_cost
                                                  INTO l_monto_pago
                                                  FROM sztcost
                                                  WHERE 1 = 1
                                                  AND sztcost_num_groups = 1
                                                  AND sztcost_levl_code  ='LI'
                                                  AND sztcost_camp_code  ='UTL'
                                                  AND sztcost_min_cupo <= d.maximo
                                                  AND sztcost_max_cupo >= d.maximo
                                                  AND SZTCOST_RMT_CODE=   'C'
                                                  AND sztcost_active='S';

                                            EXCEPTION WHEN OTHERS THEN
                                                l_retorna:='No se puede recuperar costo 1 '||sqlerrm;

                                            END;

                                            BEGIN

                                                     INSERT INTO  SZTCONF VALUES(
                                                                                     d.clave_materia,
                                                                                     1,
                                                                                     d.no_alumnos,
                                                                                     d.PIDM,
                                                                                     l_monto_pago,
                                                                                     'CON MATERIA',
                                                                                     SYSDATE,
                                                                                     'CHUY',
                                                                                     SYSDATE,
                                                                                     p_regla,
                                                                                     'C',
                                                                                     'N',
                                                                                     d.prof_id,
                                                                                     p_fecha_inicio,
                                                                                     0,
                                                                                     null,
                                                                                     null, null
                                                                                 );
                                                l_retorna:='EXITO';



                                            EXCEPTION WHEN OTHERS THEN
                                                 l_retorna:='No se puede INSERTar en sztconf 1 '||sqlerrm;

                                            END;


                                         ELSIF  l_iteraciones > 0 THEN

                                            for i in 1.. l_iteraciones loop

                                                BEGIN

                                                      SELECT sztcost_cost
                                                      INTO l_monto_pago
                                                      FROM sztcost
                                                      WHERE 1 = 1
                                                      AND sztcost_num_groups = i
                                                      AND sztcost_levl_code  ='LI'
                                                      AND sztcost_camp_code  ='UTL'
                                                      AND sztcost_min_cupo <= d.maximo
                                                      AND sztcost_max_cupo >= d.maximo
                                                      AND SZTCOST_RMT_CODE=   'C'
                                                      AND sztcost_active='S';


                                                EXCEPTION WHEN OTHERS THEN
                                                     l_retorna:=('No se ecnontro ningun dato para obtener el costo de pago 2 '||sqlerrm);

                                                END;

                                                BEGIN


                                                 INSERT INTO  SZTCONF VALUES(
                                                                                 d.clave_materia,
                                                                                 i,
                                                                                 d.maximo,
                                                                                 d.pidm,
                                                                                 l_monto_pago,
                                                                                 'CON MATERIA',
                                                                                 SYSDATE,
                                                                                 'REZA',
                                                                                 SYSDATE,
                                                                                 p_regla,
                                                                                 'C',
                                                                                 'N',
                                                                                 d.prof_id,
                                                                                 p_fecha_inicio,
                                                                                 0,
                                                                                 null,
                                                                                 null, null
                                                                             );
                                                    l_retorna:='EXITO';

                                                    commit;

                                                EXCEPTION WHEN NO_DATA_FOUND THEN
                                                      l_retorna:='No se puede INSERTar en sztconf 2 '||sqlerrm;
                                                END;

                                            END LOOP;

                                         end IF;

                                          l_monto_pago:=0;

                                          BEGIN

                                               SELECT sum(SZTCONF_STUDENT_NUMB)
                                               INTO l_resta_grupo
                                               FROM SZTCONF
                                               WHERE 1 = 1
                                               AND SZTCONF_NO_REGLA =P_REGLA
                                               AND SZTCONF_SUBJ_CODE = d.clave_materia
                                               AND SZTCONF_PIDM = d.pidm;

                                                     -- DBMS_OUTPUT.PUT_LINE('Total de alumnos empuejados '||l_resta_grupo);

                                          EXCEPTION WHEN OTHERS THEN
                                               l_retorna:='No se puede iobtener la resta del grupo 1 '||sqlerrm;
                                          END;

                                          l_residuo:=d.no_alumnos - l_resta_grupo;

                                          l_iteraciones:=round (l_residuo/d.maximo) -1;

                                           BEGIN
                                               SELECT max(SZTCONF_GROUP)+1
                                                   INTO l_max_grupos
                                                   FROM sztconf
                                                   WHERE 1 = 1
                                                   AND sztconf_subj_code = d.clave_materia
                                                   AND sztconf_no_regla  = p_regla;


                                           EXCEPTION WHEN OTHERS THEN
                                                l_retorna:='No se puede obtener el maximo del grupo 1 '||sqlerrm;
                                           END;

                                           IF l_iteraciones = 0 then

                                                BEGIN

                                                          SELECT sztcost_cost
                                                          INTO l_monto_pago
                                                          FROM sztcost
                                                          WHERE 1 = 1
                                                          AND sztcost_num_groups = l_max_grupos
                                                          AND sztcost_levl_code  ='LI'
                                                          AND sztcost_camp_code  ='UTL'
                                                          AND sztcost_min_cupo <= 50
                                                          AND sztcost_max_cupo >= 50
                                                          AND SZTCOST_RMT_CODE=   'C'
                                                          AND sztcost_active='S';



                                                EXCEPTION WHEN OTHERS THEN
                                                     l_retorna:='No se puede recuperar costo 2 '||sqlerrm;
                                                END;

                                                BEGIN

                                                         INSERT INTO  SZTCONF VALUES(
                                                                                     d.clave_materia,
                                                                                     l_max_grupos,
                                                                                     l_residuo,
                                                                                     d.pidm,
                                                                                     l_monto_pago,
                                                                                     'CON MATERIA',
                                                                                     SYSDATE,
                                                                                     'KEKO',
                                                                                     SYSDATE,
                                                                                     p_regla,
                                                                                     'C',
                                                                                     'N',
                                                                                     d.prof_id,
                                                                                     p_fecha_inicio,
                                                                                     0,
                                                                                     null,
                                                                                     null, null
                                                                                     );
                                                     l_retorna:='EXITO';

                                                EXCEPTION WHEN OTHERS THEN
                                                      l_retorna:='No se puede INSERTar en sztconf 3 '||sqlerrm;

                                                END;


                                           end IF;
--
                                          exit when l_contador = 1;

                                  END LOOP;

                                  commit;

           end IF;

           RETURN(l_retorna);


    end;
--
--
     function f_materia_spronostico( p_regla  NUMBER,
                                     p_fecha_inicio varchar2 )
     return varchar2

     as
     l_tope            number;
        l_sobrecupo       number;
        l_numero_alumnos  number;
        l_total_alumnos   number;
        l_total_restante  number;
        l_sobrecupo_real  number;
        l_maximo_grupo    number;
        l_numero_grupos   number;
        l_alumnos_residuo number;
        l_previo          varchar2(100);
        l_programa        varchar2(15);
        l_rate            varchar2(15);
        l_periodicidad    varchar2(15);
        l_monto_pago      number;
        l_campus          varchar2(100);
        l_nivel            varchar2(100);
        l_contar          number;
        l_retorna         varchar2(100):='EXITO';
        l_cuenta_uve      number;
    BEGIN

        l_contar:=0;
        l_previo:=pkg_algoritmo.f_materia_sprono(p_regla);
--FRank@Modify 06.07.22 se deshabilita para borrar la información despues de pronosticar NI's
--       BEGIN
--
--           SELECT COUNT(*)
--           INTO l_cuenta_uve
--           FROM sztalgo
--           WHERE 1 = 1
--           AND sztalgo_no_regla = p_regla
--           AND SZTALGO_CAMP_CODE ='UVE';
--
--       exception when others then
--           null;
--       end;
--
--       IF l_cuenta_uve > 0 then

           BEGIN
               DELETE sztninc
               WHERE 1 = 1
               AND sztninc_no_regla = p_regla;

                delete  SZTTNIN --FRank@Modify 06.07.22 se agrega al borrado los profesores
                where SZTTNIN_no_regla=p_regla;

            commit;

           EXCEPTION WHEN OTHERS THEN
               NULL;
           END;

--       end IF;

        RETURN(l_retorna);

    end;
--
--
     function f_materia_sprono( p_regla  NUMBER)return varchar2
    as
        l_contar  number;
        l_retorna varchar2(1000):='EXITO';
        l_numero_registros number;
        l_matricula varchar2(10);
        l_programa  varchar2(10);
        l_rate varchar2(10);
        l_pperiodo_ni varchar2(10);
        l_type    varchar2(100);
        l_tipo_ini varchar2(100);
        l_sztprono_study_path number;
        l_sztprono_rate varchar2(100);
        l_materias_activas number;
        vl_tipo_jornada varchar2(100);
        vl_qa_avance number;
        vl_fecha_ing date;
        vl_tipo_ini  varchar2(20);
        vl_tip_ini   varchar2(20);
        l_materias_confug number;
        l_sztprono_jornada varchar2(20);
        l_bim varchar2(10);
        l_valida_curso number;
    BEGIN

        for e in (
                      SELECT  distinct inc.SZTNINC_PIDM pidm
                      FROM SZTNINC inc
                      WHERE 1 = 1
                      AND SZTNINC_NO_REGLA = p_regla
                      AND SZTNINC_PIDM NOT IN (SELECT DISTINCT SZTPRONO_PIDM
                                                         FROM SZTPRONO
                                                         WHERE 1=1
                                                         AND SZTPRONO_NO_REGLA=p_regla)
                      AND inc.SZTNINC_SUBJ_CODE  IN (SELECT SZTTNIN_MATERIA
                                                     FROM SZTTNIN
                                                     WHERE 1 = 1
                                                     AND SZTTNIN_NO_REGLA = p_regla
                                                     AND SZTTNIN_ESTATUS_MATERIA = 'S'
                                                     )
                   )
                      loop

                           BEGIN
                                PKG_ALGORITMO_pidm.P_MATERIAS_PIDM(p_regla,e.pidm);
                           end;

                      END LOOP;



            for c in (
                        SELECT *
                        FROM SZVALNI
                        WHERE 1 = 1
                        AND regla = p_regla
        --                AND MATRICULA ='010217965'
                     )
                     loop

                            BEGIN
                                SELECT COUNT(*)
                                INTO l_contar
                                FROM szstume
                                WHERE 1 = 1
                                AND szstume_no_regla = p_regla
                                AND szstume_subj_code = c.materia_legal
                                AND szstume_id = c.matricula;


                            exception when others then
                                null;
                            end;


                            IF l_contar > 0 then


                                update sztprono set SZTPRONO_ENVIO_MOODL='S'
                                WHERE 1 = 1
                                AND sztprono_materia_legal = c.materia_legal
                                AND sztprono_pidm = c.pidm
                                AND SZTPRONO_NO_REGLA = p_regla;


                            end IF;

                     END LOOP;

                     commit;


        return(l_retorna);

    end;


--
--
    FUNCTION f_agrega_ningresos (fecha  VARCHAR2,
                                 campus VARCHAR2,
                                 nivel  VARCHAR2,
                                 peri   VARCHAR2,
                                 tipo   VARCHAR2,
                                 p_regla NUMBER)RETURN VARCHAR2
    as
    l_retorna varchar2(1000):='EXITO';
    l_cuenta_para_campus number;
    l_existe_alumno      number;
    l_contar number:=0;
    l_cuenta_uve number;

    BEGIN

        dbms_output.put_line('Entra 1 ');

        BEGIN

        SELECT COUNT(*)
        INTO l_cuenta_para_campus
        FROM sztalgo lgo,
             zstpara ara
        WHERE 1 = 1
        AND lgo.sztalgo_no_regla = p_regla
        AND ara.zstpara_mapa_id='CAMP_PRONO'
        AND ara.zstpara_param_id = sztalgo_camp_code
        AND ara.zstpara_param_valor = sztalgo_levl_code
        AND sztalgo_levl_code ='LI';

      EXCEPTION WHEN OTHERS THEN
            NULL;
      END;

      dbms_output.put_line(' valor '||l_cuenta_para_campus);



      IF l_cuenta_para_campus > 0 THEN

            BEGIN

                SELECT COUNT(*)
                INTO l_cuenta_uve
                FROM sztalgo
                WHERE 1 = 1
                AND sztalgo_no_regla = p_regla
                AND SZTALGO_CAMP_CODE ='UVE';

            exception when others then
                null;
            end;

            IF l_cuenta_uve = 0 then

                BEGIN
                    DELETE sztninc
                    WHERE 1 = 1
                    AND sztninc_no_regla = p_regla
                    AND SZTNINC_CAMP_CODE = Campus
                    AND SZTNINC_LEVL_CODE = NIVEL;

                EXCEPTION WHEN OTHERS THEN
                    NULL;
                END;

            end IF;

            FOR c1 IN (
                        SELECT  distinct sorlcur_pidm pidm
                               FROM sorlcur a
                               join spriden b on b.spriden_pidm = a.sorlcur_pidm AND b.spriden_change_ind is null
                               join  sgbstdn d on  d.sgbstdn_pidm=spriden_pidm
                               AND d.SGBSTDN_TERM_CODE_EFF = (SELECT max (b1.SGBSTDN_TERM_CODE_EFF)
                                                                                      FROM SGBSTDN b1
                                                                                      WHERE d.sgbstdn_pidm = b1.sgbstdn_pidm)
                               AND SGBSTDN_LEVL_CODE =nivel
                               AND SGBSTDN_CAMP_CODE =campus
                               join smrpaap on smrpaap_program=sorlcur_program
                                       AND smrpaap_term_code_eff=sorlcur_term_code_ctlg
                               join smrarul on smrarul_area=smrpaap_area
                                       AND smrarul_term_code_eff=smrpaap_term_code_eff
                                      -- AND  smrarul_crse_numb_low like '%401%'
                               join scrtext on scrtext_subj_code=smrarul_subj_code
                                       AND scrtext_crse_numb=smrarul_crse_numb_low
                                       AND (substr(scrtext_text,1,4)=smrarul_subj_code or substr(scrtext_text,1,3)=smrarul_subj_code or substr(scrtext_text,1,2)=smrarul_subj_code)
                                       AND substr(smrarul_area,9,2) in ('01','02')
                               join sztdtec on sztdtec_program=sorlcur_program
                                       AND sztdtec_term_code=sorlcur_term_code_ctlg
                                         AND SZTDTEC_CAMP_CODE =  campus
                                         AND SZTDTEC_PERIODICIDAD = decode (tipo,'Regular', '1', 'Continuo','2')
                               join sztptrm on SZTPTRM_CAMP_CODE = a.sorlcur_camp_code
                                       AND  a.sorlcur_levl_code =  SZTPTRM_LEVL_CODE
                                       AND  SZTPTRM_TERM_CODE = peri
                                       AND  a.sorlcur_program =   SZTPTRM_PROGRAM
                                      -- AND SZTPTRM_PROPEDEUTICO = 1
                               join sobptrm on SOBPTRM_TERM_CODE = SZTPTRM_TERM_CODE
                                       AND SOBPTRM_PTRM_CODE = SZTPTRM_PTRM_CODE
                                       AND trunc (SOBPTRM_START_DATE) = trunc (a.sorlcur_start_date)
                               join sztalgo on SZTALGO_NO_REGLA = p_regla
                                    AND decode (SZTALGO_TIPO_CARGA,'Continuo','2', 'Regular', 1) = SZTDTEC_PERIODICIDAD
                                    AND SZTALGO_CAMP_CODE =  campus
                                    AND SZTALGO_LEVL_CODE  = nivel
                               WHERE  a.SORLCUR_LMOD_CODE = 'LEARNER'
                               AND a.SORLCUR_CACT_CODE = 'ACTIVE'
                               AND a.SORLCUR_ROLL_IND = 'Y'
                               AND not exists    (SELECT null
                                                  FROM sztprono x
                                                  WHERE 1 = 1
                                                  AND sztprono_no_regla = p_regla
                                                  AND SZTPRONO_FECHA_INICIO = fecha
                                                  AND x.sztprono_pidm = b.spriden_pidm
                                                 -- AND x.sztprono_materia_legal = get_materia_padre(scrtext_text)
                                                  )
                               AND a.sorlcur_pidm in (SELECT sorlcur_pidm
                                                                 FROM sorlcur aa
                                                                 WHERE a.sorlcur_program=aa.sorlcur_program
                                                                 AND a.sorlcur_lmod_code=aa.sorlcur_lmod_code
                                                                 AND a.sorlcur_roll_ind=aa.sorlcur_roll_ind)
                               AND a.SORLCUR_SEQNO = (SELECT max (SORLCUR_SEQNO)
                                                                       FROM SORLCUR aa1
                                                                       WHERE a.sorlcur_pidm = aa1.sorlcur_pidm
                                                                       AND a.SORLCUR_LMOD_CODE = aa1.SORLCUR_LMOD_CODE
                                                                       AND a.SORLCUR_CACT_CODE = aa1.SORLCUR_CACT_CODE
                                                                       AND a.SORLCUR_KEY_SEQNO = aa1.SORLCUR_KEY_SEQNO
                                                                       AND a.sorlcur_program=aa1.sorlcur_program
                                                                      AND trunc (a.sorlcur_start_date) =  fecha
                                                                       )
                               AND a.SORLCUR_CAMP_CODE= campus
                               AND a.SORLCUR_LEVL_CODE= nivel
                               AND d.SGBSTDN_STYP_CODE in  ('N', 'F','R')
                               AND a.SORLCUR_CAMP_CODE not in ('UIN','UVE')
                               -- Universidad Insurgentes el Codigo de materia es muy largo
                               UNION
                               SELECT  distinct sorlcur_pidm pidm
                               FROM sorlcur a
                               join spriden b on b.spriden_pidm = a.sorlcur_pidm AND b.spriden_change_ind is null
                               join  sgbstdn d on  d.sgbstdn_pidm=spriden_pidm
                               AND d.SGBSTDN_TERM_CODE_EFF = (SELECT max (b1.SGBSTDN_TERM_CODE_EFF)
                                                                                      FROM SGBSTDN b1
                                                                                      WHERE d.sgbstdn_pidm = b1.sgbstdn_pidm)
                               AND SGBSTDN_LEVL_CODE =nivel
                               AND SGBSTDN_CAMP_CODE =campus
                               join smrpaap on smrpaap_program=sorlcur_program
                                       AND smrpaap_term_code_eff=sorlcur_term_code_ctlg
                               join smrarul on smrarul_area=smrpaap_area
                                       AND smrarul_term_code_eff=smrpaap_term_code_eff
                                      -- AND  smrarul_crse_numb_low like '%401%'
                               join scrtext on scrtext_subj_code=smrarul_subj_code
                                       AND scrtext_crse_numb=smrarul_crse_numb_low
                                       --AND (substr(scrtext_text,1,4)=smrarul_subj_code or substr(scrtext_text,1,3)=smrarul_subj_code or substr(scrtext_text,1,2)=smrarul_subj_code)
                                       AND substr(smrarul_area,9,2) in ('01','02')
                               join sztdtec on sztdtec_program=sorlcur_program
                                       AND sztdtec_term_code=sorlcur_term_code_ctlg
                                         AND SZTDTEC_CAMP_CODE =  campus
                                         AND SZTDTEC_PERIODICIDAD = decode (tipo,'Regular', '1', 'Continuo','2')
                               join sztptrm on SZTPTRM_CAMP_CODE = a.sorlcur_camp_code
                                       AND  a.sorlcur_levl_code =  SZTPTRM_LEVL_CODE
                                       AND  SZTPTRM_TERM_CODE = peri
                                       AND  a.sorlcur_program =   SZTPTRM_PROGRAM
                                      -- AND SZTPTRM_PROPEDEUTICO = 1
                               join sobptrm on SOBPTRM_TERM_CODE = SZTPTRM_TERM_CODE
                                       AND SOBPTRM_PTRM_CODE = SZTPTRM_PTRM_CODE
                                       AND trunc (SOBPTRM_START_DATE) = trunc (a.sorlcur_start_date)
                               join sztalgo on SZTALGO_NO_REGLA = p_regla
                                    AND decode (SZTALGO_TIPO_CARGA,'Continuo','2', 'Regular', 1) = SZTDTEC_PERIODICIDAD
                                    AND SZTALGO_CAMP_CODE =  campus
                                    AND SZTALGO_LEVL_CODE  = nivel
                               WHERE  a.SORLCUR_LMOD_CODE = 'LEARNER'
                               AND a.SORLCUR_CACT_CODE = 'ACTIVE'
                               AND a.SORLCUR_ROLL_IND = 'Y'
                               AND not exists    (SELECT null
                                                  FROM sztprono x
                                                  WHERE 1 = 1
                                                  AND sztprono_no_regla = p_regla
                                                  AND SZTPRONO_FECHA_INICIO = fecha
                                                  AND x.sztprono_pidm = b.spriden_pidm
                                                 -- AND x.sztprono_materia_legal = get_materia_padre(scrtext_text)
                                                  )
                               AND a.sorlcur_pidm in (SELECT sorlcur_pidm
                                                                 FROM sorlcur aa
                                                                 WHERE a.sorlcur_program=aa.sorlcur_program
                                                                 AND a.sorlcur_lmod_code=aa.sorlcur_lmod_code
                                                                 AND a.sorlcur_roll_ind=aa.sorlcur_roll_ind)
                               AND a.SORLCUR_SEQNO = (SELECT max (SORLCUR_SEQNO)
                                                                       FROM SORLCUR aa1
                                                                       WHERE a.sorlcur_pidm = aa1.sorlcur_pidm
                                                                       AND a.SORLCUR_LMOD_CODE = aa1.SORLCUR_LMOD_CODE
                                                                       AND a.SORLCUR_CACT_CODE = aa1.SORLCUR_CACT_CODE
                                                                       AND a.SORLCUR_KEY_SEQNO = aa1.SORLCUR_KEY_SEQNO
                                                                       AND a.sorlcur_program=aa1.sorlcur_program
                                                                      AND trunc (a.sorlcur_start_date) =  fecha
                                                                       )
                               AND a.SORLCUR_CAMP_CODE= campus
                               AND a.SORLCUR_LEVL_CODE= nivel
                               AND d.SGBSTDN_STYP_CODE in  ('N', 'F','R')
                               AND a.SORLCUR_CAMP_CODE ='UIN'
                               UNION
                                SELECT  distinct sorlcur_pidm pidm
                               FROM sorlcur a
                               join spriden b on b.spriden_pidm = a.sorlcur_pidm AND b.spriden_change_ind is null
                               join  sgbstdn d on  d.sgbstdn_pidm=spriden_pidm
                               AND d.SGBSTDN_TERM_CODE_EFF = (SELECT max (b1.SGBSTDN_TERM_CODE_EFF)
                                                                                      FROM SGBSTDN b1
                                                                                      WHERE d.sgbstdn_pidm = b1.sgbstdn_pidm)
                               AND SGBSTDN_LEVL_CODE =nivel
                               AND SGBSTDN_CAMP_CODE =campus
                               join smrpaap on smrpaap_program=sorlcur_program
                                       AND smrpaap_term_code_eff=sorlcur_term_code_ctlg
                               join smrarul on smrarul_area=smrpaap_area
                                       AND smrarul_term_code_eff=smrpaap_term_code_eff
                                      -- AND  smrarul_crse_numb_low like '%401%'
                               join scrtext on scrtext_subj_code=smrarul_subj_code
                                       AND scrtext_crse_numb=smrarul_crse_numb_low
                                       --AND (substr(scrtext_text,1,4)=smrarul_subj_code or substr(scrtext_text,1,3)=smrarul_subj_code or substr(scrtext_text,1,2)=smrarul_subj_code)
                                       AND substr(smrarul_area,9,2) in ('01','02')
                               join sztdtec on sztdtec_program=sorlcur_program
                                       AND sztdtec_term_code=sorlcur_term_code_ctlg
                                         AND SZTDTEC_CAMP_CODE =  campus
                                         AND SZTDTEC_PERIODICIDAD = decode (tipo,'Regular', '1', 'Continuo','2')
                               join sztptrm on SZTPTRM_CAMP_CODE = a.sorlcur_camp_code
                                       AND  a.sorlcur_levl_code =  SZTPTRM_LEVL_CODE
                                       AND  SZTPTRM_TERM_CODE = peri
                                       AND  a.sorlcur_program =   SZTPTRM_PROGRAM
                                      -- AND SZTPTRM_PROPEDEUTICO = 1
                               join sobptrm on SOBPTRM_TERM_CODE = SZTPTRM_TERM_CODE
                                       AND SOBPTRM_PTRM_CODE = SZTPTRM_PTRM_CODE
                                       AND trunc (SOBPTRM_START_DATE) = trunc (a.sorlcur_start_date)
                               join sztalgo on SZTALGO_NO_REGLA = p_regla
                                    AND decode (SZTALGO_TIPO_CARGA,'Continuo','2', 'Regular', 1) = SZTDTEC_PERIODICIDAD
                                    AND SZTALGO_CAMP_CODE =  campus
                                    AND SZTALGO_LEVL_CODE  = nivel
                               WHERE  a.SORLCUR_LMOD_CODE = 'LEARNER'
                               AND a.SORLCUR_CACT_CODE = 'ACTIVE'
                               AND a.SORLCUR_ROLL_IND = 'Y'
                               AND not exists    (SELECT null
                                                  FROM sztprono x
                                                  WHERE 1 = 1
--                                                  AND sztprono_no_regla = p_regla
                                                  AND SZTPRONO_FECHA_INICIO = fecha
                                                  AND x.sztprono_pidm = b.spriden_pidm
                                                 -- AND x.sztprono_materia_legal = get_materia_padre(scrtext_text)
                                                  )
                               AND a.sorlcur_pidm in (SELECT sorlcur_pidm
                                                                 FROM sorlcur aa
                                                                 WHERE a.sorlcur_program=aa.sorlcur_program
                                                                 AND a.sorlcur_lmod_code=aa.sorlcur_lmod_code
                                                                 AND a.sorlcur_roll_ind=aa.sorlcur_roll_ind)
                               AND a.SORLCUR_SEQNO = (SELECT max (SORLCUR_SEQNO)
                                                                       FROM SORLCUR aa1
                                                                       WHERE a.sorlcur_pidm = aa1.sorlcur_pidm
                                                                       AND a.SORLCUR_LMOD_CODE = aa1.SORLCUR_LMOD_CODE
                                                                       AND a.SORLCUR_CACT_CODE = aa1.SORLCUR_CACT_CODE
                                                                       AND a.SORLCUR_KEY_SEQNO = aa1.SORLCUR_KEY_SEQNO
                                                                       AND a.sorlcur_program=aa1.sorlcur_program
                                                                      AND trunc (a.sorlcur_start_date) =  fecha
                                                                       )
                               AND a.SORLCUR_CAMP_CODE= campus
                               AND a.SORLCUR_LEVL_CODE= nivel
                               AND d.SGBSTDN_STYP_CODE in  ('N', 'F','R','C')
                               AND a.SORLCUR_CAMP_CODE ='UVE'
--                               AND b.spriden_pidm = 309640
                               --order by   perio,materia, grupo, prog,ctlg, iden

                        )loop



                                DBMS_OUTPUT.PUT_LINE('Entra al proceso'||l_existe_alumno||' pidm '||c1.pidm);
                                p_track_prono(p_regla,'NI: Alumno a procesar pidm: '||c1.pidm||' Nivel:'|| nivel||' Campus:'||campus);

                                BEGIN
                                    PKG_ALGORITMO_pidm.p_alumnos_pidm(p_regla,c1.pidm);
                                end;

                                commit;

                                BEGIN
                                    PKG_ALGORITMO_pidm.p_programa_x_pidm(p_regla,c1.pidm);
                                end;

                                commit;

                                BEGIN
                                    PKG_ALGORITMO_pidm.p_alumnos_x_pidm(p_regla,c1.pidm);
                                end;

                                commit;

                                BEGIN
                                    PKG_ALGORITMO_pidm.P_MATERIAS_PIDM_NI(p_regla,c1.pidm);
                                end;

                                commit;

                              --  sztninc


                        END LOOP;

      else


            IF campus <> 'UIN' then

                BEGIN
                    DELETE sztninc
                    WHERE 1 = 1
                    AND sztninc_no_regla = p_regla
                    AND SZTNINC_CAMP_CODE = Campus
                    AND SZTNINC_LEVL_CODE = NIVEL;

                EXCEPTION WHEN OTHERS THEN
                    NULL;
                END;

            end IF;

            commit;

                        fOR c in (
                               SELECT  distinct sorlcur_pidm pidm
                               FROM sorlcur a
                               join spriden b on b.spriden_pidm = a.sorlcur_pidm AND b.spriden_change_ind is null
                               join  sgbstdn d on  d.sgbstdn_pidm=spriden_pidm
                               AND d.SGBSTDN_TERM_CODE_EFF = (SELECT max (b1.SGBSTDN_TERM_CODE_EFF)
                                                                                      FROM SGBSTDN b1
                                                                                      WHERE d.sgbstdn_pidm = b1.sgbstdn_pidm)
                               AND SGBSTDN_LEVL_CODE =nivel
                               AND SGBSTDN_CAMP_CODE =campus
                               join smrpaap on smrpaap_program=sorlcur_program
                                       AND smrpaap_term_code_eff=sorlcur_term_code_ctlg
                               join smrarul on smrarul_area=smrpaap_area
                                       AND smrarul_term_code_eff=smrpaap_term_code_eff
                                      -- AND  smrarul_crse_numb_low like '%401%'
                               join scrtext on scrtext_subj_code=smrarul_subj_code
                                       AND scrtext_crse_numb=smrarul_crse_numb_low
                                       AND (substr(scrtext_text,1,4)=smrarul_subj_code or substr(scrtext_text,1,3)=smrarul_subj_code or substr(scrtext_text,1,2)=smrarul_subj_code)
                                       AND substr(smrarul_area,9,2) in ('01','02','09')
                               join sztdtec on sztdtec_program=sorlcur_program
                                       AND sztdtec_term_code=sorlcur_term_code_ctlg
                                         AND SZTDTEC_CAMP_CODE =  campus
                                         AND SZTDTEC_PERIODICIDAD = decode (tipo,'Regular', '1', 'Continuo','2','Anual','4')
                               join sztptrm on SZTPTRM_CAMP_CODE = a.sorlcur_camp_code
                                       AND  a.sorlcur_levl_code =  SZTPTRM_LEVL_CODE
                                       AND  SZTPTRM_TERM_CODE = peri
                                       AND  a.sorlcur_program =   SZTPTRM_PROGRAM
                                      -- AND SZTPTRM_PROPEDEUTICO = 1
                               join sobptrm on SOBPTRM_TERM_CODE = SZTPTRM_TERM_CODE
                                       AND SOBPTRM_PTRM_CODE = SZTPTRM_PTRM_CODE
                                       AND trunc (SOBPTRM_START_DATE) = trunc (a.sorlcur_start_date)
                               join sztalgo on SZTALGO_NO_REGLA = p_regla
                                    AND decode (SZTALGO_TIPO_CARGA,'Continuo','2', 'Regular', 1,'Anual','4') = SZTDTEC_PERIODICIDAD
                                    AND SZTALGO_CAMP_CODE =  campus
                                    AND SZTALGO_LEVL_CODE  = nivel
                               WHERE  a.SORLCUR_LMOD_CODE = 'LEARNER'
                               AND a.SORLCUR_CACT_CODE = 'ACTIVE'
                               AND a.SORLCUR_ROLL_IND = 'Y'
                               AND not exists    (SELECT null
                                                  FROM sztprono x
                                                  WHERE 1 = 1
                                                  AND sztprono_no_regla = p_regla
                                                  AND SZTPRONO_FECHA_INICIO = fecha
                                                  AND x.sztprono_pidm = b.spriden_pidm
                                                 -- AND x.sztprono_materia_legal = get_materia_padre(scrtext_text)
                                                  )
                               AND a.sorlcur_pidm in (SELECT sorlcur_pidm
                                                                 FROM sorlcur aa
                                                                 WHERE a.sorlcur_program=aa.sorlcur_program
                                                                 AND a.sorlcur_lmod_code=aa.sorlcur_lmod_code
                                                                 AND a.sorlcur_roll_ind=aa.sorlcur_roll_ind)
                               AND a.SORLCUR_SEQNO = (SELECT max (SORLCUR_SEQNO)
                                                                       FROM SORLCUR aa1
                                                                       WHERE a.sorlcur_pidm = aa1.sorlcur_pidm
                                                                       AND a.SORLCUR_LMOD_CODE = aa1.SORLCUR_LMOD_CODE
                                                                       AND a.SORLCUR_CACT_CODE = aa1.SORLCUR_CACT_CODE
                                                                       AND a.SORLCUR_KEY_SEQNO = aa1.SORLCUR_KEY_SEQNO
                                                                       AND a.sorlcur_program=aa1.sorlcur_program
                                                                      AND trunc (a.sorlcur_start_date) =  fecha
                                                                       )
                               AND a.SORLCUR_CAMP_CODE= campus
                               AND a.SORLCUR_LEVL_CODE= nivel
                                AND d.SGBSTDN_STYP_CODE in  ('N', 'F','R')
                                AND a.SORLCUR_CAMP_CODE != 'UIN'
                                union
                                SELECT  distinct sorlcur_pidm pidm
                               FROM sorlcur a
                               join spriden b on b.spriden_pidm = a.sorlcur_pidm AND b.spriden_change_ind is null
                               join  sgbstdn d on  d.sgbstdn_pidm=spriden_pidm
                               AND d.SGBSTDN_TERM_CODE_EFF = (SELECT max (b1.SGBSTDN_TERM_CODE_EFF)
                                                                                      FROM SGBSTDN b1
                                                                                      WHERE d.sgbstdn_pidm = b1.sgbstdn_pidm)
                               AND SGBSTDN_LEVL_CODE =nivel
                               AND SGBSTDN_CAMP_CODE =campus
                               join smrpaap on smrpaap_program=sorlcur_program
                                       AND smrpaap_term_code_eff=sorlcur_term_code_ctlg
                               join smrarul on smrarul_area=smrpaap_area
                                       AND smrarul_term_code_eff=smrpaap_term_code_eff
                                      -- AND  smrarul_crse_numb_low like '%401%'
                               join scrtext on scrtext_subj_code=smrarul_subj_code
                                       AND scrtext_crse_numb=smrarul_crse_numb_low
                                     -- AND (substr(scrtext_text,1,4)=smrarul_subj_code or substr(scrtext_text,1,3)=smrarul_subj_code or substr(scrtext_text,1,2)=smrarul_subj_code)
                                       AND substr(smrarul_area,9,2) in ('01','02')
                               join sztdtec on sztdtec_program=sorlcur_program
                                       AND sztdtec_term_code=sorlcur_term_code_ctlg
                                         AND SZTDTEC_CAMP_CODE =  campus
                                         AND SZTDTEC_PERIODICIDAD = decode (tipo,'Regular', '1', 'Continuo','2','Anual','4')
                               join sztptrm on SZTPTRM_CAMP_CODE = a.sorlcur_camp_code
                                       AND  a.sorlcur_levl_code =  SZTPTRM_LEVL_CODE
                                       AND  SZTPTRM_TERM_CODE = peri
                                       AND  a.sorlcur_program =   SZTPTRM_PROGRAM
                                      -- AND SZTPTRM_PROPEDEUTICO = 1
                               join sobptrm on SOBPTRM_TERM_CODE = SZTPTRM_TERM_CODE
                                       AND SOBPTRM_PTRM_CODE = SZTPTRM_PTRM_CODE
                                       AND trunc (SOBPTRM_START_DATE) = trunc (a.sorlcur_start_date)
                               join sztalgo on SZTALGO_NO_REGLA = p_regla
                                    AND decode (SZTALGO_TIPO_CARGA,'Continuo','2', 'Regular', 1,'Anual','4') = SZTDTEC_PERIODICIDAD
                                    AND SZTALGO_CAMP_CODE =  campus
                                    AND SZTALGO_LEVL_CODE  = nivel
                               WHERE  a.SORLCUR_LMOD_CODE = 'LEARNER'
                               AND a.SORLCUR_CACT_CODE = 'ACTIVE'
                               AND a.SORLCUR_ROLL_IND = 'Y'
                               AND not exists    (SELECT null
                                                  FROM sztprono x
                                                  WHERE 1 = 1
                                                  AND sztprono_no_regla = p_regla
                                                  AND SZTPRONO_FECHA_INICIO = fecha
                                                  AND x.sztprono_pidm = b.spriden_pidm
                                                 -- AND x.sztprono_materia_legal = get_materia_padre(scrtext_text)
                                                  )
                               AND a.sorlcur_pidm in (SELECT sorlcur_pidm
                                                                 FROM sorlcur aa
                                                                 WHERE a.sorlcur_program=aa.sorlcur_program
                                                                 AND a.sorlcur_lmod_code=aa.sorlcur_lmod_code
                                                                 AND a.sorlcur_roll_ind=aa.sorlcur_roll_ind)
                               AND a.SORLCUR_SEQNO = (SELECT max (SORLCUR_SEQNO)
                                                                       FROM SORLCUR aa1
                                                                       WHERE a.sorlcur_pidm = aa1.sorlcur_pidm
                                                                       AND a.SORLCUR_LMOD_CODE = aa1.SORLCUR_LMOD_CODE
                                                                       AND a.SORLCUR_CACT_CODE = aa1.SORLCUR_CACT_CODE
                                                                       AND a.SORLCUR_KEY_SEQNO = aa1.SORLCUR_KEY_SEQNO
                                                                       AND a.sorlcur_program=aa1.sorlcur_program
                                                                      AND trunc (a.sorlcur_start_date) =  fecha
                                                                       )
                               AND a.SORLCUR_CAMP_CODE= campus
                               AND a.SORLCUR_LEVL_CODE= nivel
                                AND d.SGBSTDN_STYP_CODE in  ('N', 'F','R')
                                AND a.SORLCUR_CAMP_CODE = 'UIN'

                              -- AND b.spriden_id = '010079636'
--                               order by   perio,materia, grupo, prog,ctlg, iden
                       ) loop


                            --raise_application_error (-20002,'Error al obtener valores de  spriden  '|| SQLCODE||' Error: '||SQLERRM);

                           -- DBMS_OUTPUT.PUT_LINE('Entra al proceso'||l_existe_alumno||' pidm '||c.pidm);
                                p_track_prono(p_regla,'NI: Alumno a procesar pidm: '||c.pidm||' Nivel:'|| nivel||' Campus:'||campus);
                                BEGIN
                                    PKG_ALGORITMO_pidm.p_alumnos_pidm(p_regla,c.pidm);
                                end;

                                commit;

                                BEGIN
                                    PKG_ALGORITMO_pidm.p_programa_x_pidm(p_regla,c.pidm);
                                end;

                                commit;

                                BEGIN
                                    pkg_algoritmo_pidm.p_alumnos_x_pidm(p_regla,c.pidm);


                                end;
--
                                commit;
--
                                BEGIN
                                    PKG_ALGORITMO_pidm.P_MATERIAS_PIDM_NI(p_regla,c.pidm);
                                end;

                                commit;


                       END LOOP;



      END IF;

     --Jpg@Create@Dic2021 procedimiento de pronostico de alumnos oyentes
        p_oyentes(p_regla,2);

        commit;

        return(l_retorna);
    end;

--
--
    function f_post_inscripcion (  p_inicio_clase varchar2,
                                    p_regla         number,
                                    p_materia       VARCHAR2,
                                    p_pidm_prof     number
                                 )return varchar2
    AS
        l_retorna varchar2(100);
        l_contar         NUMBER;
        l_conse          NUMBER;
        l_materia        VARCHAR2(15);
        l_desripcion_mat VARCHAR2(500);
        l_campus         VARCHAR2(15);
        l_nivel          VARCHAR2(15);
        l_parte_perido   VARCHAR2(15);
        l_term_code      VARCHAR2(15);
        l_regla_cerrada  VARCHAR2(1);
        l_short_name     VARCHAR2(250);
        l_grupo_moodl    VARCHAR2(15);
        l_ptrm           VARCHAR2(15);
    BEGIN

            BEGIN

                SELECT DISTINCT sztalgo_estatus_cerrado
                INTO  l_regla_cerrada
                FROM sztalgo
                WHERE 1 = 1
                AND sztalgo_no_regla = p_regla;

            EXCEPTION WHEN OTHERS THEN
                NULL;
            END;

            IF l_regla_cerrada = 'S' THEN

                FOR c IN (SELECT materia,
                               pidm,
                               matricula,
                               maximo,
                               CASE WHEN length(grupo)=2 THEN
                                grupo
                                    WHEN length(grupo)=1 THEN
                                to_char('0'||grupo)
                               END GRUPO,
                               secuencia
                        FROM
                        (
                            SELECT sztconf_subj_code materia,
                                   sztconf_pidm pidm,
                                   sztconf_id matricula,
                                   sztconf_student_numb+10 maximo,
                                   TO_CHAR(ROW_NUMBER() OVER (PARTITION BY sztconf_subj_code ORDER BY sztconf_group)) grupo ,
                                   SZTCONF_SECUENCIA secuencia
                            FROM sztconf
                            WHERE 1 = 1
                            AND sztconf_no_regla = p_regla
                            AND sztconf_subj_code = p_materia
                            ORDER BY 1,4 DESC
                        )
                    )
                LOOP

                   BEGIN
                       SELECT UPPER(scrsyln_long_course_title)
                       INTO l_desripcion_mat
                       FROM scrsyln
                       WHERE 1 = 1
                       AND scrsyln_subj_code||scrsyln_crse_numb =c.materia;

                   EXCEPTION WHEN OTHERS THEN
                       dbms_output.put_line(' Error en SCRSYLN '||SQLERRM);
                       l_retorna:=' No se econtro descripcion para materia  '||c.materia||' '||sqlerrm;

                   END;

                   BEGIN

                      SELECT DISTINCT sztalgo_camp_code,
                                       sztalgo_levl_code
                       INTO l_campus,
                            l_nivel
                       FROM sztalgo
                       WHERE 1 = 1
                       AND sztalgo_no_regla  = p_regla
                       AND ROWNUM = 1;

                       IF l_campus ='UTS' THEN

                           l_campus:='UTL';

                       END IF;

                       IF l_nivel ='MS' THEN

                           l_nivel:='MA';

                       END IF;

                       IF l_nivel ='LI' THEN

                           l_nivel:='LI';

                       END IF;

                   EXCEPTION WHEN OTHERS THEN
                        NULL;
                   END;

                   BEGIN

                          SELECT DISTINCT sztalgo_ptrm_code_new,
                                          sztalgo_term_code_new
                          INTO l_parte_perido,
                               l_term_code
                          FROM sztalgo
                          WHERE 1 = 1
                          AND sztalgo_no_regla = p_regla
                          AND sztalgo_camp_code = l_campus
                          AND sztalgo_levl_code = l_nivel;

                   EXCEPTION WHEN OTHERS THEN
                      DBMS_OUTPUT.PUT_LINE(' Error en sztgpme '||SQLERRM);
                      l_retorna:=' Error en obtener parte de periodo en  sztgpme '||sqlerrm;
                   END;

                   BEGIN
                           SELECT     concat(concat(concat(
                                         case
                                         when substr (l_parte_perido,1,2) IN ('M0', 'M1', 'M2','A0','A1','A2') then 'S'
                                         when substr (l_parte_perido,1,2) IN('M3', 'A3') then 'M'
                                         when substr  (l_parte_perido, 1,2) in ('L1', 'L0') then 'A'
                                         when substr  (l_parte_perido, 1,2) = 'L2' then 'B'
                                         when substr  (l_parte_perido, 1,2) not in ('M0', 'M1','M2', 'M3','A0','A1','A2','A3','L0', 'L1', 'L2')  then 'B'
                                         end,
                                         case
                                             when substr (l_term_code, 5,2) = '41' then  'A'
                                             when substr (l_term_code, 5,2) = '42' then 'B'
                                             when substr (l_term_code, 5,2) = '43' then 'C'
                                         end ||'0'||substr(l_term_code,3,2) ||'_'),
                                         case
                                             when substr (l_parte_perido,2,2) IN ('3A', '3B', '3C','0A','0B','0C','0D') then '0'
                                             when substr (l_parte_perido,2,2) IN ( '1A', '2A', '1B', '1C','1D', '1E', '3D')  then '1'
                                             end ||'_'), TO_CHAR(to_DATE(p_inicio_clase,'dd/mm/YYYY'),'DDMM')||'_' || c.materia
                                     )  short_name
                           INTO l_short_name
                           FROM dual;
                    EXCEPTION WHEN OTHERS THEN
                       dbms_output.put_line(' Error en sztgpme '||SQLERRM);
                       l_retorna:=' Error en sztgpme '||sqlerrm;
                   END;

                   BEGIN
                          INSERT INTO sztgpme VALUES(
                                                         c.materia||c.grupo,
                                                         c.materia,
                                                         l_desripcion_mat,
                                                         0,
                                                         NULL,
                                                         USER,
                                                         SYSDATE,
                                                         l_parte_perido,
                                                         p_inicio_clase,
                                                         NULL,
                                                         c.maximo,
                                                         l_nivel ,
                                                         l_campus,
                                                         NULL,
                                                         c.materia,
                                                         NULL,
                                                         l_term_code ,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         l_short_name,
                                                         p_regla,
                                                         c.secuencia,
                                                         null,
                                                         'S',
                                                         1, null
                                                         );

                       l_retorna:='EXITO';

                   EXCEPTION WHEN OTHERS THEN
                       dbms_output.put_line(' Error en sztgpme '||SQLERRM);
                       l_retorna:=' Error en sztgpme '||sqlerrm;
                   END;

                   for c in (SELECT grupo,
                            pidm,
                            materia,
                            pwd,
                            estatus_prof,
                            regla,
                            grupo2,
                            secuencia
                    FROM
                    (
                        SELECT
                                 onf.sztconf_subj_code||'0'||ROW_NUMBER() OVER (PARTITION BY sztconf_subj_code ORDER BY sztconf_group) grupo,
                                 onf.sztconf_pidm pidm,
                                 sztconf_subj_code materia,
                                 (SELECT GOZTPAC_PIN
                                 FROM GOZTPAC pac
                                 WHERE 1 = 1
                                 AND pac.GOZTPAC_pidm =onf.sztconf_pidm ) pwd,
                                 (SELECT nst.SIBINST_FCST_CODE
                                 FROM SIBINST nst
                                 WHERE 1 = 1
                                 AND nst.SIBINST_pidm = onf.sztconf_pidm) estatus_prof,
                                 onf.sztconf_no_regla regla,
                                 ROW_NUMBER() OVER (PARTITION BY sztconf_subj_code ORDER BY sztconf_group) grupo2,
                                 sztconf_secuencia secuencia
                        FROM sztconf onf
                        WHERE 1 = 1
                        AND onf.sztconf_no_regla = p_regla
                        AND onf.sztconf_subj_code = p_materia
                        AND onf.SZTCONF_PIDM = p_pidm_prof
                        )
                    )
                    loop

                        BEGIN

                            SELECT SZTGPME_PTRM_CODE
                            INTO l_ptrm
                            FROM sztgpme
                            WHERE 1 = 1
                            AND sztgpme_no_regla = c.regla
                            AND SZTGPME_SUBJ_CRSE = c.materia
                            AND SZTGPME_TERM_NRC = c.grupo
                            AND ROWNUM = 1;


                        EXCEPTION WHEN OTHERS THEN
                             dbms_output.put_line(' No se puede obtener el valor de ptrm '||sqlerrm);
                             l_retorna:=' No se puede obtener el valor de ptrm '||sqlerrm;
                        END;

                        BEGIN

                            INSERT INTO SZSGNME VALUES(c.grupo,
                                                            c.pidm,
                                                            sysdate,
                                                            user,
                                                            0,
                                                            null,
                                                            c.pwd,
                                                            null,
                                                            c.estatus_prof,
                                                            C.grupo2,
                                                            null,
                                                            l_ptrm,
                                                            p_inicio_clase,
                                                            c.regla,
                                                            c.secuencia,
                                                            1, null
                                                            );
                            l_retorna:='EXITO';

                        exception when others then
                            dbms_output.put_line(' Error al INSERTar tabla de profesores moodl '||sqlerrm);
                            l_retorna:= ' Error al INSERTar tabla de profesores moodl '||sqlerrm;
                        end;

                    END LOOP;



                END LOOP;

                l_contar:=0;

                for c in (SELECT Onf.Sztconf_Subj_Code||'0'||Row_Number() Over (Partition By Sztconf_Subj_Code Order By Sztconf_Group) Padre,
                          sum(onf.SZTCONF_STUDENT_NUMB) no_alumnos,
                          SZTCONF_SUBJ_CODE materia,
                          SZTCONF_GROUP grupo,
                          sztconf_no_regla regla,
                         rownum grupo2
                    FROM sztconf onf
                    WHERE 1 = 1
                    AND onf.sztconf_no_regla = p_regla
                    AND onf.sztconf_subj_code = p_materia
                    group by onf.SZTCONF_SUBJ_CODE,SZTCONF_GROUP,sztconf_no_regla,rownum
                    )
                    loop
                            for e in(SELECT COUNT(*) vueltas
                                    FROM sztconf onf
                                    WHERE 1 = 1
                                    AND onf.sztconf_no_regla = c.regla
                                    AND SZTCONF_SUBJ_CODE=c.materia
                                    )
                                    loop

                                         l_contar:=l_contar+1;

                                        for d in (
                                                    SELECT sztprono_id matricula,
                                                           SZTPRONO_PIDM pidm,
                                                            'RE'  estatus_alumno,
                                                            (SELECT GOZTPAC_PIN
                                                              FROM GOZTPAC pac
                                                              WHERE 1 = 1
                                                              AND pac.GOZTPAC_pidm =ono.SZTPRONO_PIDM ) pwd
                                                     FROM sztprono ono
                                                     WHERE 1 = 1
                                                     AND sztprono_no_regla  = c.regla
                                                     AND sztprono_materia_legal = c.materia
                                                     AND rownum <= c.no_alumnos
                                                     AND SZTPRONO_FECHA_INICIO =p_inicio_clase
                                                     AND sztprono_id not in (SELECT SZSTUME_ID
                                                                             FROM SZSTUME
                                                                             WHERE 1 = 1
                                                                             AND SZSTUME_no_regla =c.regla
                                                                             AND SZSTUME_SUBJ_CODE = c.materia)
                                                 )
                                                 loop

                                                    BEGIN

                                                        INSERT INTO SZSTUME VALUES(c.padre,
                                                                                   d.pidm,
                                                                                   d.matricula,
                                                                                   sysdate,
                                                                                   user,
                                                                                   0,
                                                                                   null,
                                                                                   d.pwd,
                                                                                   null,
                                                                                   c.grupo2,
                                                                                   d.estatus_alumno,
                                                                                   null,
                                                                                   c.materia,
                                                                                   null,-- c.nivel,
                                                                                   null,
                                                                                   null,--  c.ptrm,
                                                                                   null,
                                                                                   null,
                                                                                   null,
                                                                                   null,
                                                                                   c.materia,
                                                                                   p_inicio_clase,--  c.inicio_clases,
                                                                                   c.regla,
                                                                                   null,
                                                                                   1,
                                                                                   0,
                                                                                   null
                                                                                   );

                                                        l_retorna:='EXITO';

                                                    exception when others then
--                                                        INSERT INTO SZSTUME_RES VALUES(c.padre,
--                                                                                   d.pidm,
--                                                                                   d.matricula,
--                                                                                   sysdate,
--                                                                                   user,
--                                                                                   0,
--                                                                                   null,
--                                                                                   d.pwd,
--                                                                                   null,
--                                                                                   c.grupo2,
--                                                                                   d.estatus_alumno,
--                                                                                   null,
--                                                                                   c.materia,
--                                                                                   null,-- c.nivel,
--                                                                                   null,
--                                                                                   null,--  c.ptrm,
--                                                                                   null,
--                                                                                   null,
--                                                                                   null,
--                                                                                   null,
--                                                                                   c.materia,
--                                                                                   p_inicio_clase,--  c.inicio_clases,
--                                                                                   c.regla
--                                                                                   );
                                                        null;



                                                    end;

                                                    BEGIN
                                                        UPDATE SZTPRONO SET SZTPRONO_ENVIO_MOODL ='S'
                                                        WHERE 1 = 1
                                                        AND SZTPRONO_MATERIA_LEGAL = c.materia
                                                        AND SZTPRONO_PIDM =d.pidm
                                                        AND SZTPRONO_NO_REGLA = c.regla;

                                                    EXCEPTION WHEN OTHERS THEN
                                                        null;
                                                    END;

                                                 END LOOP;

                                        EXIT WHEN L_CONTAR = e.vueltas;

                                    END LOOP;


                    END LOOP;

                    commit;


            ELSE
                dbms_output.put_line(' Esta regla no esta cerrada '||p_regla);
                l_retorna:='Esta regla no esta cerrada ';

            END IF;

        return(l_retorna);
    END;
--
--
     function f_post_dentro  (p_regla number ,
                             p_inicio_clase varchar2
                             )return varchar2
    as
        l_retorna         varchar2(100);
        l_divide_alumnos  number;
        l_alumnos         number;
        l_previo          varchar2(100);
        l_mod             number;
        l_contar          number:=0;
        l_numero_grupos   number;
        l_valor           varchar2(100):= null;
        l_valida          number;
        l_prof_pidm       number;
        l_prof_id         varchar2(9);
        l_max_grupo       number;
        l_entra_grupo     number;
        l_alumnos_prono   number;
        l_maximo_alumnos  number;
        l_contar_alumnos  number;
    BEGIN

        -- empieza

     l_valor:= pkg_algoritmo.f_materia_sprono(p_regla);

        IF l_valor ='EXITO'then



         for c in
              (  SELECT SZTTNIN_MATERIA materia,
                        SZTTNIN_NO_REGLA regla,
                        SZTTNIN_NO_ALUMNOS nuevos_ingresos
                FROM SZTTNIN
                WHERE 1 = 1
                AND SZTTNIN_no_regla =p_regla
                AND SZTTNIN_ESTATUS_MATERIA ='S'
              )loop

                    dbms_output.put_line('Entra 1');

                    BEGIN
                            SELECT COUNT(*)
                                INTO l_numero_grupos
                            FROM sztconf
                            WHERE 1 = 1
                            AND sztconf_no_regla = p_regla
                            AND SZTCONF_SUBJ_CODE = c.materia;

                            dbms_output.put_line('Entra 2');
                    exception
                        When OThers then
                          l_numero_grupos :=0;
                    End;

                    BEGIN

                        SELECT COUNT(1)
                        INTO l_entra_grupo
                        FROM
                        (
                            SELECT SZTCONF_SUBJ_CODE materia,
                                   SZTCONF_STUDENT_NUMB no_alumnos,
                                   SZTCONF_STUDENT_NUMB + 10 tope,
                                   SZTCONF_GROUP grupo ,
                                   SZTCONF_PIDM pidm_prof
                            FROM sztconf
                            WHERE 1 = 1
                            AND sztconf_no_regla = c.regla
                            AND SZTCONF_SUBJ_CODE=c.materia
                        )
                        WHERE 1 = 1
                      --  AND TOPE < 60
                        order by no_alumnos asc;

                        dbms_output.put_line('Entra 3');

                    EXCEPTION WHEN OTHERS THEN
                        dbms_output.put_line('Error en entra grupo '||sqlerrm);
                    END;


                    IF l_entra_grupo > 0 THEN



                        dbms_output.put_line('Entra 4 ');

                                l_contar :=0;
                            for d in (SELECT *
                                        FROM
                                        (
                                           SELECT tope-no_alumnos restantes,
                                                  grupo,
                                                  pidm_prof,
                                                  no_alumnos
                                            FROM
                                            (
                                                SELECT SZTCONF_SUBJ_CODE materia,
                                                       SZTCONF_STUDENT_NUMB no_alumnos,
                                                       100 tope,
                                                       SZTCONF_GROUP grupo ,
                                                       SZTCONF_PIDM pidm_prof
                                                FROM sztconf
                                                WHERE 1 = 1
                                                AND sztconf_no_regla = c.regla
                                                AND SZTCONF_SUBJ_CODE=c.materia
                                            )
                                            WHERE 1 = 1
--                                            AND TOPE <=60
                                        )
                                        WHERE restantes > 0
                                        order by 1 desc,2
                                     )
                                     loop

                                        dbms_output.put_line('Entra 5 ');

                                        BEGIN

                                            SELECT COUNT(1)
                                            INTO l_alumnos_prono
                                            FROM sztprono
                                            WHERE 1 = 1
                                            AND sztprono_no_regla = c.regla
                                            AND sztprono_materia_legal =c.materia
                                            AND sztprono_comentario is not null
                                            AND SZTPRONO_ENVIO_MOODL ='N'
                                            AND SZTPRONO_ENVIO_HORARIOS ='N';

                                             dbms_output.put_line('Entra 6 ');

                                        EXCEPTION WHEN OTHERS THEN
                                            dbms_output.put_line('Error en entra l_alumnos_prono '||sqlerrm);
                                        END;

                                        BEGIN

                                            SELECT RESTANTES
                                            INTO l_maximo_alumnos
                                            FROM
                                            (
                                               SELECT MAX(tope-no_alumnos) restantes
                                                FROM
                                                (
                                                    SELECT SZTCONF_SUBJ_CODE materia,
                                                           SZTCONF_STUDENT_NUMB no_alumnos,
                                                           100 tope,
                                                           SZTCONF_GROUP grupo ,
                                                           SZTCONF_PIDM pidm_prof
                                                    FROM sztconf
                                                    WHERE 1 = 1
                                                    AND sztconf_no_regla = c.regla
                                                    AND SZTCONF_SUBJ_CODE=c.materia
                                                )
                                                WHERE 1 = 1
--                                                AND TOPE <=60
                                            )
                                            WHERE restantes > 0;

                                            dbms_output.put_line('Entra 7 l_alumnos_prono '||l_alumnos_prono||' l_maximo_alumnos '||l_maximo_alumnos);

                                        EXCEPTION WHEN OTHERS THEN
                                           dbms_output.put_line('Error en entra l_alumnos_prono '||sqlerrm);
                                        END;

                                        IF l_alumnos_prono<=l_maximo_alumnos then

                                            BEGIN

                                                update sztconf set SZTCONF_STUDENT_NUMB = SZTCONF_STUDENT_NUMB+l_alumnos_prono,
                                                                   SZTCONF_NI= l_alumnos_prono
                                                WHERE 1 = 1
                                                AND sztconf_no_regla = c.regla
                                                AND SZTCONF_SUBJ_CODE = C.MATERIA
                                                AND SZTCONF_GROUP =  d.grupo
                                                AND SZTCONF_PIDM = d.pidm_prof;

                                                 l_retorna :='EXITO';

                                                 commit;

                                                 dbms_output.put_line('Entra 8 l_alumnos_prono '||l_alumnos_prono||' l_maximo_alumnos '||l_maximo_alumnos);

                                            exception when others then
                                               dbms_output.put_line('Error al actualizar sztconf '||sqlerrm);
                                            end;

                                            exit when l_retorna= 'EXITO';

                                            -- cupo en grupos

                                             l_contar:=0;

                                        elsIF l_alumnos_prono > l_maximo_alumnos then

                                                     for d in (SELECT *
                                                                FROM
                                                                (
                                                                   SELECT tope-no_alumnos restantes,
                                                                          grupo,
                                                                          pidm_prof,
                                                                          no_alumnos
                                                                    FROM
                                                                    (
                                                                        SELECT SZTCONF_SUBJ_CODE materia,
                                                                               SZTCONF_STUDENT_NUMB no_alumnos,
                                                                               100 tope,
                                                                               SZTCONF_GROUP grupo ,
                                                                               SZTCONF_PIDM pidm_prof
                                                                        FROM sztconf
                                                                        WHERE 1 = 1
                                                                        AND sztconf_no_regla = c.regla
                                                                        AND SZTCONF_SUBJ_CODE=c.materia
                                                                    )
                                                                    WHERE 1 = 1
--                                                                    AND TOPE <=60
                                                                )
                                                                WHERE restantes > 0
                                                                order by 1 desc,2
                                                             )
                                                             loop

                                                                l_contar:=l_contar+1;

                                                                BEGIN
                                                                       SELECT COUNT(*)
                                                                       INTO l_numero_grupos
                                                                        FROM
                                                                        (
                                                                           SELECT tope-no_alumnos restantes,
                                                                                  grupo,
                                                                                  pidm_prof
                                                                            FROM
                                                                            (
                                                                                SELECT SZTCONF_SUBJ_CODE materia,
                                                                                       SZTCONF_STUDENT_NUMB no_alumnos,
                                                                                       100 tope,
                                                                                       SZTCONF_GROUP grupo ,
                                                                                       SZTCONF_PIDM pidm_prof
                                                                                FROM sztconf
                                                                                WHERE 1 = 1
                                                                                AND sztconf_no_regla = c.regla
                                                                                AND SZTCONF_SUBJ_CODE=c.materia
                                                                            )
                                                                            WHERE 1 = 1
                                                                            --AND TOPE <=60
                                                                        )
                                                                        WHERE restantes > 0;
                                                                exception
                                                                    When OThers then
                                                                      l_numero_grupos :=0;
                                                                End;


                                                                 l_alumnos :=round(l_alumnos_prono/l_numero_grupos);

                                                                 dbms_output.put_line('alumnos  '||l_alumnos);

                                                                 IF l_contar = 1  AND l_numero_grupos > 1 then

                                                                     BEGIN

                                                                        update sztconf set SZTCONF_STUDENT_NUMB = SZTCONF_STUDENT_NUMB+l_alumnos -1,
                                                                                       SZTCONF_NI= l_alumnos -1
                                                                        WHERE 1 = 1
                                                                        AND sztconf_no_regla = c.regla
                                                                        AND SZTCONF_SUBJ_CODE = C.MATERIA
                                                                        AND SZTCONF_GROUP =  d.grupo
                                                                        AND SZTCONF_PIDM = d.pidm_prof;

                                                                        dbms_output.put_line('Actualiza 100');

                                                                     EXCEPTION WHEN OTHERS THEN
                                                                         dbms_output.put_line('Error al actualizar sztconf 2 '||sqlerrm);
                                                                     END;

                                                                 elsIF l_contar = 1  AND l_numero_grupos = 1 then

                                                                    BEGIN

                                                                     update sztconf set SZTCONF_STUDENT_NUMB = SZTCONF_STUDENT_NUMB+l_alumnos,
                                                                                       SZTCONF_NI= l_alumnos
                                                                        WHERE 1 = 1
                                                                        AND sztconf_no_regla = c.regla
                                                                        AND SZTCONF_SUBJ_CODE = C.MATERIA
                                                                        AND SZTCONF_GROUP =  d.grupo
                                                                        AND SZTCONF_PIDM = d.pidm_prof;

                                                                        dbms_output.put_line('Actualiza 2');

                                                                     EXCEPTION WHEN OTHERS THEN
                                                                         dbms_output.put_line('Error al actualizar sztconf 2 '||sqlerrm);
                                                                     END;

                                                                 elsIF  l_contar > 1 then

                                                                     BEGIN

                                                                        update sztconf set SZTCONF_STUDENT_NUMB = SZTCONF_STUDENT_NUMB+l_alumnos,
                                                                                           SZTCONF_NI= l_alumnos
                                                                        WHERE 1 = 1
                                                                        AND sztconf_no_regla = c.regla
                                                                        AND SZTCONF_SUBJ_CODE = C.MATERIA
                                                                        AND SZTCONF_GROUP =  d.grupo
                                                                        AND SZTCONF_PIDM = d.pidm_prof;

                                                                        dbms_output.put_line('Actualiza 3');

                                                                     EXCEPTION WHEN OTHERS THEN
                                                                         dbms_output.put_line('Error al actualizar sztconf 2 '||sqlerrm);
                                                                     end;

                                                                 end IF;

                                                                l_retorna :='EXITO';

                                                            END LOOP;


                                                            exit when l_retorna= 'EXITO';

                                        end IF;


                                     END LOOP;

                    else

                              l_contar :=0;
                            for d in (SELECT *
                                        FROM
                                        (
                                           SELECT tope-no_alumnos restantes,
                                                  grupo,
                                                  pidm_prof
                                            FROM
                                            (
                                                SELECT SZTCONF_SUBJ_CODE materia,
                                                       SZTCONF_STUDENT_NUMB no_alumnos,
                                                       100 tope,
                                                       SZTCONF_GROUP grupo ,
                                                       SZTCONF_PIDM pidm_prof
                                                FROM sztconf
                                                WHERE 1 = 1
                                                AND sztconf_no_regla = c.regla
                                                AND SZTCONF_SUBJ_CODE=c.materia
                                            )
                                            WHERE 1 = 1
--                                            AND TOPE <=60
                                        )
                                        WHERE restantes > 0
                                        order by 1 desc,2
                                     )
                                     loop

                                        dbms_output.put_line('Entra 5 ');

                                        BEGIN

                                            SELECT COUNT(1)
                                            INTO l_alumnos_prono
                                            FROM sztprono
                                            WHERE 1 = 1
                                            AND sztprono_no_regla = c.regla
                                            AND sztprono_materia_legal =c.materia
                                            AND sztprono_comentario is not null
                                            AND SZTPRONO_ENVIO_MOODL ='N'
                                            AND SZTPRONO_ENVIO_HORARIOS ='N';

                                             dbms_output.put_line('Entra 6 ');

                                        EXCEPTION WHEN OTHERS THEN
                                            dbms_output.put_line('Error en entra l_alumnos_prono '||sqlerrm);
                                        END;

                                        BEGIN

                                            SELECT RESTANTES
                                            INTO l_maximo_alumnos
                                            FROM
                                            (
                                               SELECT MAX(tope-no_alumnos) restantes
                                                FROM
                                                (
                                                    SELECT SZTCONF_SUBJ_CODE materia,
                                                           SZTCONF_STUDENT_NUMB no_alumnos,
                                                           100 tope,
                                                           SZTCONF_GROUP grupo ,
                                                           SZTCONF_PIDM pidm_prof
                                                    FROM sztconf
                                                    WHERE 1 = 1
                                                    AND sztconf_no_regla = c.regla
                                                    AND SZTCONF_SUBJ_CODE=c.materia
                                                )
                                                WHERE 1 = 1
                                                --AND TOPE <=60
                                            )
                                            WHERE restantes > 0;

                                            dbms_output.put_line('Entra 7 ');

                                        EXCEPTION WHEN OTHERS THEN
                                           dbms_output.put_line('Error en entra l_alumnos_prono '||sqlerrm);
                                        END;

                                        IF l_alumnos_prono<=l_maximo_alumnos then

                                            BEGIN

                                                update sztconf set SZTCONF_STUDENT_NUMB = SZTCONF_STUDENT_NUMB+l_alumnos_prono
                                                WHERE 1 = 1
                                                AND sztconf_no_regla = c.regla
                                                AND SZTCONF_SUBJ_CODE = C.MATERIA
                                                AND SZTCONF_GROUP =  d.grupo
                                                AND SZTCONF_PIDM = d.pidm_prof;

                                                dbms_output.put_line('Actualiza 4');

                                                 l_retorna :='EXITO';

                                            exception when others then
                                               dbms_output.put_line('Error al actualizar sztconf '||sqlerrm);
                                            end;

                                            exit when l_retorna= 'EXITO';

                                            -- cupo en grupos

                                             l_contar:=0;

                                        elsIF l_alumnos_prono > l_maximo_alumnos then

                                                     for d in (SELECT *
                                                                FROM
                                                                (
                                                                   SELECT tope-no_alumnos restantes,
                                                                          grupo,
                                                                          pidm_prof
                                                                    FROM
                                                                    (
                                                                        SELECT SZTCONF_SUBJ_CODE materia,
                                                                               SZTCONF_STUDENT_NUMB no_alumnos,
                                                                               100 tope,
                                                                               SZTCONF_GROUP grupo ,
                                                                               SZTCONF_PIDM pidm_prof
                                                                        FROM sztconf
                                                                        WHERE 1 = 1
                                                                        AND sztconf_no_regla = c.regla
                                                                        AND SZTCONF_SUBJ_CODE=c.materia
                                                                    )
                                                                    WHERE 1 = 1
--                                                                    AND TOPE <=60
                                                                )
                                                                WHERE restantes > 0
                                                                order by 1 desc,2
                                                             )
                                                             loop

                                                                l_contar:=l_contar+1;

                                                                BEGIN
                                                                       SELECT COUNT(*)
                                                                       INTO l_numero_grupos
                                                                        FROM
                                                                        (
                                                                           SELECT tope-no_alumnos restantes,
                                                                                  grupo,
                                                                                  pidm_prof
                                                                            FROM
                                                                            (
                                                                                SELECT SZTCONF_SUBJ_CODE materia,
                                                                                       SZTCONF_STUDENT_NUMB no_alumnos,
                                                                                       100 tope,
                                                                                       SZTCONF_GROUP grupo ,
                                                                                       SZTCONF_PIDM pidm_prof
                                                                                FROM sztconf
                                                                                WHERE 1 = 1
                                                                                AND sztconf_no_regla = c.regla
                                                                                AND SZTCONF_SUBJ_CODE=c.materia
                                                                            )
                                                                            WHERE 1 = 1
--                                                                            AND TOPE <=60
                                                                        )
                                                                        WHERE restantes > 0;
                                                                exception
                                                                    When OThers then
                                                                      l_numero_grupos :=0;
                                                                End;


                                                                 l_alumnos :=round(l_alumnos_prono/l_numero_grupos);

                                                                 dbms_output.put_line('alumnos  '||l_alumnos);

                                                                 IF l_contar = 1 then

                                                                     BEGIN

                                                                        update sztconf set SZTCONF_STUDENT_NUMB = SZTCONF_STUDENT_NUMB+l_alumnos -1
                                                                        WHERE 1 = 1
                                                                        AND sztconf_no_regla = c.regla
                                                                        AND SZTCONF_SUBJ_CODE = C.MATERIA
                                                                        AND SZTCONF_GROUP =  d.grupo
                                                                        AND SZTCONF_PIDM = d.pidm_prof;

                                                                        dbms_output.put_line('Actualiza 5');

                                                                     EXCEPTION WHEN OTHERS THEN
                                                                         dbms_output.put_line('Error al actualizar sztconf 2 '||sqlerrm);
                                                                     END;

                                                                 elsIF  l_contar > 1 then

                                                                     BEGIN

                                                                        update sztconf set SZTCONF_STUDENT_NUMB = SZTCONF_STUDENT_NUMB+l_alumnos
                                                                        WHERE 1 = 1
                                                                        AND sztconf_no_regla = c.regla
                                                                        AND SZTCONF_SUBJ_CODE = C.MATERIA
                                                                        AND SZTCONF_GROUP =  d.grupo
                                                                        AND SZTCONF_PIDM = d.pidm_prof;

                                                                        dbms_output.put_line('Actualiza 6');

                                                                     EXCEPTION WHEN OTHERS THEN
                                                                         dbms_output.put_line('Error al actualizar sztconf 2 '||sqlerrm);
                                                                     end;

                                                                 end IF;

                                                                l_retorna :='EXITO';

                                                            END LOOP;


                                                            exit when l_retorna= 'EXITO';

                                        end IF;


                                     END LOOP;


                    END IF;

              END LOOP;




          BEGIN

             SELECT COUNT(sztprono_id) total_alumnos
             INTO l_valida
                FROM sztprono
                WHERE 1 = 1
                AND sztprono_no_regla = p_regla
                AND SZTPRONO_FECHA_INICIO =p_inicio_clase
                AND  SZTPRONO_MATERIA_LEGAL in (
                                                  SELECT SZTPRONO_MATERIA_LEGAL
                                                  FROM sztprono
                                                  WHERE 1 = 1
                                                  AND sztprono_no_regla = p_regla
                                                  AND SZTPRONO_FECHA_INICIO =p_inicio_clase
                                                  minus
                                                  SELECT sztconf_subj_code
                                                  FROM sztconf
                                                  WHERE 1 = 1
                                                  AND sztconf_no_regla = p_regla
                                               );


          exception when others then
            raise_application_error (-20002,'EEntra 1 '||l_retorna );
          end;

          IF l_valida > 0 then

              FOR C IN
                    (

                     SELECT COUNT(sztprono_id) total_alumnos,
                           SZTPRONO_MATERIA_LEGAL materia_legal,
                           SZTPRONO_no_regla regla,
                           1 grupo
                    FROM sztprono
                    WHERE 1 = 1
                    AND sztprono_no_regla = p_regla
                    AND SZTPRONO_FECHA_INICIO =p_inicio_clase
                    AND  SZTPRONO_MATERIA_LEGAL in (
                                                      SELECT SZTPRONO_MATERIA_LEGAL
                                                      FROM sztprono
                                                      WHERE 1 = 1
                                                      AND sztprono_no_regla = p_regla
                                                      AND SZTPRONO_FECHA_INICIO =p_inicio_clase
                                                      minus
                                                      SELECT sztconf_subj_code
                                                      FROM sztconf
                                                      WHERE 1 = 1
                                                      AND sztconf_no_regla = p_regla
                                                   )
                    group by SZTPRONO_MATERIA_LEGAL,SZTPRONO_no_regla
                   )loop

                        IF c.total_alumnos <= 50 then

                            BEGIN

                                SELECT SZTTNIN_PROF_ID,SZTTNIN_PROF_PIDM
                                INTO l_prof_id,l_prof_pidm
                                FROM SZTTNIN
                                WHERE 1 = 1
                                AND SZTTNIN_no_regla = c.regla
                                AND SZTTNIN_MATERIA = c.materia_legal
                                AND rownum = 1;

                            exception when others then
                                null;
                            end;

                            INSERT INTO SZTCONF VALUES(c.materia_legal,
                                                       c.grupo,
                                                       c.total_alumnos,
                                                       l_prof_pidm,
                                                       7500,
                                                       user,
                                                       sysdate,
                                                       user,
                                                       sysdate,
                                                       c.regla,
                                                       'B',
                                                       'N',
                                                       l_prof_id,
                                                       p_inicio_clase,
                                                       0,
                                                       null,
                                                       null, null);

                            l_retorna:='EXITO';
                        -- SEGUIMOS

                        elsIF c.total_alumnos > 50 then



                             l_retorna:=pkg_algoritmo.F_PREVIO(
                                                                  p_regla        =>    c.regla,
                                                                  p_materia      =>    c.materia_legal,
                                                                  prof_pidm      =>    l_prof_pidm,
                                                                  p_proceso      =>    'NUEVO INGRESO',
                                                                  p_fecha_inicio =>    p_inicio_clase
                                                               );


                        end IF;

                   END LOOP;

          end IF;

        end IF;

        IF l_retorna ='EXITO' then
         commit;
        else
            rollback;
        end IF;


        return(l_retorna);

    end;
--
--
     function f_materia_manual(p_subj varchar2,
                              p_numb varchar2,
                              p_regla number,
                              p_matricula_prof varchar2,
                              p_inicio_clases  varchar2) return varchar2
    as
        l_retorna varchar(200);
        l_grupo_max number;
        l_pidm_prof number;
        l_crn   number;
        l_periodo varchar2(100);
        l_parte_periodo varchar2(3);
        l_campus varchar2(3);
        schd varchar2(3);
        title varchar2(100);
        credit number;
        credit_bill number;
        gmod     NUMBER;
        f_inicio             DATE;
        f_fin                DATE;
        sem                  NUMBER;
        l_term_nrc  varchar2(30);
        l_nivel varchar2(3);
        l_short_name varchar2(100);
        l_pwd  varchar2(100);

    BEGIN

    P_ENA_DIS_TRG('D','SATURN.SZT_SSBSECT_POSTINSERT_ROW');
    P_ENA_DIS_TRG('D','SATURN.SZT_SIRASGN_POSTINSERT_ROW');
    P_ENA_DIS_TRG('D','SATURN.SZT_SFRSTCR_POSTINS_UDP_REGS');

         BEGIN

            SELECT COUNT(nvl(SZTCONF_GROUP,0))+1 maximo
            INTO l_grupo_max
            FROM sztconf
            WHERE 1 = 1
            AND sztconf_no_regla = p_regla
            AND SZTCONF_SUBJ_CODE =p_subj||p_numb;

        exception when others then
            l_grupo_max:=1;
        end;

        BEGIN
        SELECT SPRIDEN_PIDM
        INTO l_pidm_prof
        FROM spriden
        WHERE 1 = 1
        AND SPRIDEN_CHANGE_IND is null
        AND SPRIDEN_ID = p_matricula_prof;

        exception when others then
            l_grupo_max:=1;
        end;



        BEGIN

            INSERT INTO SZTCONF VALUES(  p_subj||p_numb,
                                         l_grupo_max,
                                         0,
                                         l_pidm_prof,
                                         7500,
                                         user,
                                         sysdate,
                                         user,
                                         sysdate,
                                         p_regla,
                                         null,
                                         null,
                                         p_matricula_prof,
                                         p_inicio_clases,
                                         0,
                                         null,
                                         null, null
                                        );
            l_retorna:='EXITO';

        EXCEPTION WHEN OTHERS THEN
            l_retorna:='Error al INSERTar sztconf '||sqlerrm;
        END;


        BEGIN

            SELECT DISTINCT SZTALGO_TERM_CODE_NEW,SZTALGO_PTRM_CODE_NEW,SZTALGO_CAMP_CODE,SZTALGO_LEVL_CODE
            INTO l_periodo,l_parte_periodo,l_campus,l_nivel
            FROM SZTALGO
            WHERE 1 = 1
            AND SZTALGO_NO_REGLA = P_REGLA;


        EXCEPTION WHEN OTHERS THEN

            SELECT DISTINCT SZTALGO_TERM_CODE_NEW,SZTALGO_PTRM_CODE_NEW,SZTALGO_CAMP_CODE,SZTALGO_LEVL_CODE
            INTO l_periodo,l_parte_periodo,l_campus,l_nivel
            FROM SZTALGO
            WHERE 1 = 1
            AND SZTALGO_NO_REGLA = P_REGLA
            AND ROWNUM = 1;


        END;

        BEGIN

            SELECT DECODE (SUBSTR(l_periodo,1,2),'02','01',SUBSTR(l_periodo,1,2))||SUBSTR(l_periodo,3,5)dato
            INTO l_periodo
            FROM dual;
        EXCEPTION WHEN OTHERS THEN
            NULL;
        END;


        BEGIN
            SELECT DECODE (SUBSTR(l_parte_periodo,1,1),'A','M',SUBSTR(l_parte_periodo,1,1))||SUBSTR(l_parte_periodo,2,4)dato
            INTO l_parte_periodo
            FROM dual;
        EXCEPTION WHEN OTHERS THEN
            NULL;
        END;

         BEGIN

            SELECT DECODE (SUBSTR(l_parte_periodo,1,2),'02','01',SUBSTR(l_parte_periodo,1,2))||SUBSTR(l_parte_periodo,3,5)dato
            INTO l_parte_periodo
            FROM dual;
        EXCEPTION WHEN OTHERS THEN
            NULL;
        END;

        BEGIN

            SELECT NVL(MAX(ssbsect_crn),1000)+1
            INTO l_crn
            FROM ssbsect
            WHERE 1 = 1
            AND ssbsect_term_code= l_periodo;

        EXCEPTION WHEN OTHERS THEN
            l_crn := NULL;
        END;


        BEGIN

            SELECT scrschd_schd_code,
                   scbcrse_title,
                   scbcrse_credit_hr_low,
                   scbcrse_bill_hr_low
              INTO schd,
                   title,
                   credit,
                   credit_bill
            FROM scbcrse,
                 scrschd
            WHERE 1 = 1
            AND scbcrse_subj_code=p_subj
            AND scbcrse_crse_numb=p_numb
            AND scbcrse_eff_term='000000'
            AND scrschd_subj_code=scbcrse_subj_code
            AND scrschd_crse_numb=scbcrse_crse_numb
            AND scrschd_eff_term=scbcrse_eff_term;

        exception when others then

           schd         := NULL;
           title        := NULL;
           credit       := NULL;
           credit_bill  := NULL;

        end;

         BEGIN

             SELECT scrgmod_gmod_code
             INTO gmod
             FROM scrgmod
             WHERE 1 = 1
             AND scrgmod_subj_code=p_subj
             AND scrgmod_crse_numb=p_numb
             AND scrgmod_default_ind='D';

         EXCEPTION WHEN OTHERS THEN
             gmod:='1';
         END;


        BEGIN

           SELECT DISTINCT sobptrm_start_date,
                           sobptrm_end_date,
                           sobptrm_weeks
           INTO f_inicio,
                f_fin,
                sem
           FROM sobptrm
           WHERE 1  = 1
           AND sobptrm_term_code=l_periodo
           AND sobptrm_ptrm_code=l_parte_periodo;

        EXCEPTION WHEN OTHERS THEN
          --  vl_error := 'No se Encontro configuracion para el Periodo= ' ||c.periodo ||' y Parte de Periodo= '||c.parte ||SQLERRM;
          null;
        END;

         BEGIN

            SELECT DISTINCT sobptrm_start_date,
                            sobptrm_end_date,
                            sobptrm_weeks
            INTO f_inicio,
                 f_fin,
                 sem
            FROM sobptrm
            WHERE 1  = 1
            AND sobptrm_term_code=l_periodo
            AND sobptrm_ptrm_code=l_parte_periodo;

         EXCEPTION WHEN OTHERS THEN
             --vl_error := 'No se Encontro configuracion para el Periodo= ' ||c.periodo ||' y Parte de Periodo= '||c.parte ||SQLERRM;
             null;
         END;


        IF l_campus ='UTS' THEN

            l_campus:='UTL';

        END IF;

        IF length(l_grupo_max)=2 then

            l_term_nrc:=p_subj||p_numb||l_grupo_max;

        elsIF length(l_grupo_max)=1 then

            l_term_nrc:=p_subj||p_numb||'0'||l_grupo_max;


        end IF;

        BEGIN

            INSERT INTO ssbsect VALUES (
                                        l_periodo,           --SSBSECT_TERM_CODE
                                        l_crn,               --SSBSECT_CRN
                                        l_parte_periodo,     --SSBSECT_PTRM_CODE
                                        p_subj,              --SSBSECT_SUBJ_CODE
                                        p_numb,              --SSBSECT_CRSE_NUMB
                                        '0'||l_grupo_max,     --SSBSECT_SEQ_NUMB
                                        'A',    --SSBSECT_SSTS_CODE
                                        schd,    --SSBSECT_SCHD_CODE
                                        l_campus,    --SSBSECT_CAMP_CODE
                                        title,   --SSBSECT_CRSE_TITLE
                                        credit,   --SSBSECT_CREDIT_HRS
                                        credit_bill,   --SSBSECT_BILL_HRS
                                        gmod,   --SSBSECT_GMOD_CODE
                                        NULL,  --SSBSECT_SAPR_CODE
                                        NULL, --SSBSECT_SESS_CODE
                                        NULL,  --SSBSECT_LINK_IDENT
                                        NULL,  --SSBSECT_PRNT_IND
                                        'Y',  --SSBSECT_GRADABLE_IND
                                        NULL,  --SSBSECT_TUIW_IND
                                        0, --SSBSECT_REG_ONEUP
                                        0, --SSBSECT_PRIOR_ENRL
                                        0, --SSBSECT_PROJ_ENRL
                                        50, --SSBSECT_MAX_ENRL
                                        0,--SSBSECT_ENRL
                                        50,--SSBSECT_SEATS_AVAIL
                                        NULL,--SSBSECT_TOT_CREDIT_HRS
                                        '0',--SSBSECT_CENSUS_ENRL
                                        f_inicio,--SSBSECT_CENSUS_ENRL_DATE
                                        SYSDATE -5,--SSBSECT_ACTIVITY_DATE
                                        p_inicio_clases,--SSBSECT_PTRM_START_DATE
                                        f_fin,--SSBSECT_PTRM_END_DATE
                                        sem,--SSBSECT_PTRM_WEEKS
                                        NULL,--SSBSECT_RESERVED_IND
                                        NULL, --SSBSECT_WAIT_CAPACITY
                                        NULL,--SSBSECT_WAIT_COUNT
                                        NULL,--SSBSECT_WAIT_AVAIL
                                        NULL,--SSBSECT_LEC_HR
                                        NULL,--SSBSECT_LAB_HR
                                        NULL,--SSBSECT_OTH_HR
                                        NULL,--SSBSECT_CONT_HR
                                        NULL,--SSBSECT_ACCT_CODE
                                        NULL,--SSBSECT_ACCL_CODE
                                        NULL,--SSBSECT_CENSUS_2_DATE
                                        NULL,--SSBSECT_ENRL_CUT_OFF_DATE
                                        NULL,--SSBSECT_ACAD_CUT_OFF_DATE
                                        NULL,--SSBSECT_DROP_CUT_OFF_DATE
                                        NULL,--SSBSECT_CENSUS_2_ENRL
                                        'Y',--SSBSECT_VOICE_AVAIL
                                        'N',--SSBSECT_CAPP_PREREQ_TEST_IND
                                        NULL,--SSBSECT_GSCH_NAME
                                        NULL,--SSBSECT_BEST_OF_COMP
                                        NULL,--SSBSECT_SUBSET_OF_COMP
                                        'NOP',--SSBSECT_INSM_CODE
                                        NULL,--SSBSECT_REG_FROM_DATE
                                        NULL,--SSBSECT_REG_TO_DATE
                                        NULL,--SSBSECT_LEARNER_REGSTART_FDATE
                                        NULL,--SSBSECT_LEARNER_REGSTART_TDATE
                                        NULL,--SSBSECT_DUNT_CODE
                                        NULL,--SSBSECT_NUMBER_OF_UNITS
                                        0,--SSBSECT_NUMBER_OF_EXTENSIONS
                                        'PRONOSTICO',--SSBSECT_DATA_ORIGIN
                                        USER,--SSBSECT_USER_ID
                                        'MOOD',--SSBSECT_INTG_CDE
                                        'B',--SSBSECT_PREREQ_CHK_METHOD_CDE
                                        USER,--SSBSECT_KEYWORD_INDEX_ID
                                        NULL,--SSBSECT_SCORE_OPEN_DATE
                                        NULL,--SSBSECT_SCORE_CUTOFF_DATE
                                        NULL,--SSBSECT_REAS_SCORE_OPEN_DATE
                                        NULL,--SSBSECT_REAS_SCORE_CTOF_DATE
                                        NULL,--SSBSECT_SURROGATE_ID
                                        NULL,--SSBSECT_VERSION
                                        NULL--SSBSECT_VPDI_CODE
                                        );
            l_retorna:='EXITO';

        EXCEPTION WHEN OTHERS THEN
            l_retorna:='Error al INSERTar ssbsect '||sqlerrm;
        END;

        BEGIN

             INSERT INTO ssrmeet VALUES(l_periodo,
                                        l_crn,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        SYSDATE,
                                        f_inicio,
                                        f_fin,
                                        '01',
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        'ENL',
                                        NULL,
                                        credit,
                                        NULL,
                                        0,
                                        NULL,
                                        NULL,
                                        NULL,
                                        'CLVI',
                                        'PRONOSTICO',
                                        USER,
                                        NULL,
                                        NULL,
                                        NULL
                                        );
            l_retorna:='EXITO';

        EXCEPTION WHEN OTHERS THEN
           l_retorna:='Error al INSERTar ssrmeet '||sqlerrm;
        END;

        BEGIN
                 INSERT INTO sirasgn VALUES(
                                            l_periodo,
                                            l_crn,
                                            l_pidm_prof,
                                            '01',
                                            100,
                                            NULL,
                                            100,
                                            'Y',
                                            NULL,
                                            NULL,
                                            SYSDATE,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            'UTEL',
                                            'PRONOSTICO',
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL
                                            );
            l_retorna:='EXITO';

        EXCEPTION WHEN OTHERS THEN
             l_retorna:='Error al INSERTar sirasgn '||sqlerrm;
        END;



        BEGIN
                SELECT     concat(concat(concat(
                              case
                              when substr (l_parte_periodo,1,2) IN ('M0', 'M1', 'M2','A0','A1','A2') then 'S'
                              when substr (l_parte_periodo,1,2) IN('M3', 'A3') then 'M'
                              when substr  (l_parte_periodo, 1,2) in ('L1', 'L0') then 'A'
                              when substr  (l_parte_periodo, 1,2) = 'L2' then 'B'
                              when substr  (l_parte_periodo, 1,2) not in ('M0', 'M1','M2', 'M3','A0','A1','A2','A3','L0', 'L1', 'L2')  then 'B'
                              end,
                              case
                                  when substr (l_periodo, 5,2) = '41' then  'A'
                                  when substr (l_periodo, 5,2) = '42' then 'B'
                                  when substr (l_periodo, 5,2) = '43' then 'C'
                              end ||'0'||substr(l_periodo,3,2) ||'_'),
                              case
                                  when substr (l_parte_periodo,2,2) IN ('3A', '3B', '3C','0A','0B','0C','0D') then '0'
                                  when substr (l_parte_periodo,2,2) IN ( '1A', '2A', '1B', '1C','1D', '1E', '3D')  then '1'
                                  end ||'_'), TO_CHAR(to_DATE(p_inicio_clases,'dd/mm/YYYY'),'DDMM')||'_' ||p_subj||p_numb
                          )  short_name
                INTO l_short_name
                FROM dual;
         EXCEPTION WHEN OTHERS THEN
            dbms_output.put_line(' Error en sztgpme '||SQLERRM);
            l_retorna:=' Error en sztgpme '||sqlerrm;
        END;

        BEGIN

            INSERT INTO sztgpme VALUES(
                                       l_term_nrc,
                                       p_subj||p_numb,
                                       title,
                                       0,
                                       NULL,
                                       USER,
                                       SYSDATE,
                                       l_parte_periodo,
                                       p_inicio_clases,
                                       NULL,
                                       50,
                                       l_nivel ,
                                       l_campus,
                                       NULL,
                                       p_subj||p_numb,
                                       NULL,
                                       l_periodo ,
                                       NULL,
                                       NULL,
                                       NULL,
                                       l_short_name,
                                       p_regla,
                                       null,
                                       null,
                                       'S',
                                       1, null
                                       );
            l_retorna:='EXITO';

        EXCEPTION WHEN OTHERS THEN
            l_retorna:='Error al INSERTar sztgpme '||sqlerrm;
        END;


        BEGIN
         SELECT GOZTPAC_PIN
         INTO l_pwd
         FROM GOZTPAC pac
         WHERE 1 = 1
         AND pac.GOZTPAC_pidm =l_pidm_prof
         AND rownum = 1;

        EXCEPTION WHEN OTHERS THEN
           NULL;
        END;

         BEGIN

             INSERT INTO SZSGNME VALUES(l_term_nrc,
                                        l_pidm_prof,
                                        sysdate,
                                        user,
                                        0,
                                        null,
                                        l_pwd,
                                        null,
                                        'AC',
                                        1,
                                        0,
                                        l_parte_periodo,
                                        p_inicio_clases,
                                        p_regla,
                                        null,
                                        1, null
                                        );
             l_retorna:='EXITO';

         exception when others then
             l_retorna:= ' Error al INSERTar tabla de profesores moodl '||sqlerrm;
         end;

         IF l_retorna ='EXITO' then
            commit;
         ELSE
                ROLLBACK;
         end IF;

        return(l_retorna);

        P_ENA_DIS_TRG('E','SATURN.SZT_SSBSECT_POSTINSERT_ROW');
        P_ENA_DIS_TRG('E','SATURN.SZT_SIRASGN_POSTINSERT_ROW');
--        P_ENA_DIS_TRG('E','SATURN.SZT_SFRSTC'
    end;
--
--
    PROCEDURE p_prereq(p_regla NUMBER)
    AS
    l_encuentra number:=0;
    l_materia_pr varchar2(100);
    l_encuentra_pr number:=0;
    lcont number:= 0;

BEGIN

     BEGIN
            DELETE /*+Parallel(4)*/ FROM rel_alumnos_x_asignar d
            where (d.svrproy_pidm, d.rel_alumnos_x_asignar_no_regla, d.CLAVE_MATERIA_AGP ) in (
                     SELECT distinct
                        svrproy_pidm pidm,
                        rel_alumnos_x_asignar_no_regla regla,
--                        SCRRTST_SUBJ_CODE_PREQ||SCRRTST_CRSE_NUMB_PREQ materia
                        CLAVE_MATERIA_AGP materia
                          FROM rel_alumnos_x_asignar a
                          join scrrtst on scrrtst_subj_code||scrrtst_crse_numb = CLAVE_MATERIA_AGP
                          AND SCRRTST_LEVL_CODE<>'EC'
                          WHERE 1 = 1
                          AND rel_alumnos_x_asignar_no_regla = p_regla
                          and exists(SELECT 1
                                        FROM rel_alumnos_x_asignar x
                                        WHERE 1 = 1
                                        AND x.rel_alumnos_x_asignar_no_regla = a.rel_alumnos_x_asignar_no_regla
                                        AND x.CLAVE_MATERIA_AGP = SCRRTST_SUBJ_CODE_PREQ||SCRRTST_CRSE_NUMB_PREQ
                                        AND x.svrproy_pidm = a.svrproy_pidm
                                     )
                    ) ;
      p_track_prono(p_regla,'Tot.Regs.Delete.PreRequisitos: '||SQL%ROWCOUNT);
            commit;

     EXCEPTION WHEN OTHERS THEN
      P_TRACK_PRONO(p_regla,'Error delete prerequisitos: '||sqlerrm);
     END;

--
--    for c in (
--            SELECT distinct svrproy_pidm, rel_alumnos_x_asignar_no_regla, clave_materia, CLAVE_MATERIA_AGP
--                  FROM rel_alumnos_x_asignar
--                  WHERE 1 = 1
--                  AND rel_alumnos_x_asignar_no_regla = p_regla
--                  and Exists(Select 1 from  scrrtst
--                          where scrrtst_subj_code||scrrtst_crse_numb = CLAVE_MATERIA_AGP)
--                  order by CLAVE_MATERIA_AGP
--                  )loop
--lcont:=lcont+1;
--if mod(lcont,1000) = 0 THEN
--    p_track_prono(p_regla,'Alumnos procesados PreRequisitos: '||lcont);
--end if;
--
--                        for d in
--                        (
--                          SELECT distinct SCRRTST_SUBJ_CODE_PREQ||SCRRTST_CRSE_NUMB_PREQ prereq
--                          FROM scrrtst
--                          WHERE 1 = 1
--                          AND scrrtst_subj_code||scrrtst_crse_numb =  c.CLAVE_MATERIA_AGP --'L1IS104'
--                          )loop
----
--                                                    l_encuentra_pr:=0;
--
--                                                        BEGIN
--
--                                                            SELECT COUNT(*)
--                                                            INTO l_encuentra_pr
--                                                            FROM rel_alumnos_x_asignar
--                                                            WHERE 1 = 1
--                                                            AND rel_alumnos_x_asignar_no_regla = c.rel_alumnos_x_asignar_no_regla
--                                                            AND CLAVE_MATERIA_AGP = d.prereq
--                                                            AND svrproy_pidm = c.svrproy_pidm;
--
--                                                        exception when others then
--                                                            null;
--                                                        end;
--
--                                                      --  dbms_output.put_line(' alumno  entra c:'||c.id_alumno||'*'||d.prereq);
--
--                                                        IF l_encuentra_pr > 0 then
--
--                                                            Begin
--
--                                                                    DELETE FROM rel_alumnos_x_asignar
--                                                                    WHERE 1 = 1
--                                                                    AND rel_alumnos_x_asignar_no_regla = c.rel_alumnos_x_asignar_no_regla
--                                                                    AND CLAVE_MATERIA_AGP =c.CLAVE_MATERIA_AGP
--                                                                    AND svrproy_pidm =c.svrproy_pidm;
--                                                            Exception
--                                                                When Others then
--                                                                    null;
--                                                            End;
--
--                                                        --  dbms_output.put_line(' alumno '||c.id_alumno||' Encontro '||l_encuentra||'Matria Origen '||c.CLAVE_MATERIA_AGP||' Materia encontro '||d.prereq||' Encuentra '||l_encuentra_pr);
--
--                                                        end IF;
--
--                          END LOOP;
--                  END LOOP;

                  commit;
        -- Exception
            -- When Others then
                -- null;


end;


PROCEDURE p_ajuste_130 (p_regla number)
is

BEGIN
       for c in (

                    SELECT COUNT(*), SZTPRONO_ID, SZTPRONO_NO_REGLA
                    FROM SZTPRONO
                    WHERE SZTPRONO_NO_REGLA = p_regla
                  --  AND SZTPRONO_TERM_CODE = '012043'
                    AND SZTPRONO_CUATRI ='Q2'
                    AND SZTPRONO_JORNADA_DOS ='I'
                    --AND    SZTPRONO_ID = '010007257'
                    group by SZTPRONO_ID, SZTPRONO_NO_REGLA
                    having COUNT(*) >2

        ) loop


    BEGIN
        DELETE SZTPRONO
                    WHERE SZTPRONO_NO_REGLA = c.SZTPRONO_NO_REGLA
                   -- AND SZTPRONO_TERM_CODE = '012043'
                    AND SZTPRONO_CUATRI ='Q2'
                    AND SZTPRONO_JORNADA_DOS ='I'
                    AND    SZTPRONO_ID =  c.SZTPRONO_ID
                    AND SZTPRONO_NO_REGLA = c.SZTPRONO_NO_REGLA
                    AND SZTPRONO_SECUENCIA >=3;
    Exception
        When Others then
            null;
    End;

    Commit;

END LOOP;

End p_ajuste_130;

    PROCEDURE p_quita_derecho (p_regla number)
    is
        l_cuenta number;
        l_contador number:=0;
        l_resta    number:=0;

    BEGIN
    --       for c in (
    --
    --                        SELECT distinct MATRICULA, APROBADAS_CURR, CURSO_CURR, nvl (APROBADAS_CURR,0) + nvl (CURSO_CURR,0) cursadas, programa
    --                        FROM tmp_valida_faltantes
    --                        WHERE REGLA = p_regla
    --                        AND programa in ('UTLLIDDFED',
    --                        'UTLLIDIFED',
    --                        'UTLLIDEFED')
    --                        AND nvl (APROBADAS_CURR,0) + nvl (CURSO_CURR,0) >= 49
    --
    --        ) loop
    --
    --
    --            BEGIN
    --                    DELETE   rel_alumnos_x_asignar
    --                     WHERE REL_ALUMNOS_X_ASIGNAR_NO_REGLA = p_regla
    --                     AND ID_ALUMNO = c.MATRICULA
    --                     AND ID_PROGRAMA = c.programa;
    --            Exception
    --                When Others then
    --                    null;
    --            End;
    --
    --    Commit;
    --
    --END LOOP;

        l_contador:=0;

        for c in
                (
                SELECT distinct MATRICULA,
                                APROBADAS_CURR,
                                CURSO_CURR,
                                nvl (APROBADAS_CURR,0) + nvl (CURSO_CURR,0) cursadas,
                                programa,
                                to_number(TOTAL_CURR) total,
                                to_number(TOTAL_CURR) - (nvl (APROBADAS_CURR,0) + nvl (CURSO_CURR,0)) faltan,
                                REGLA,
                                pidm
                            FROM tmp_valida_faltantes fal
--                            FROM tmp_faltantes fal   --Jpg@Modify@Feb22
                WHERE REGLA = p_regla
    --            AND matricula ='010570193'
                AND programa in ('UTLLIDDFED',
                                 'UTLLIDIFED',
                                 'UTLLIDEFED')
                AND to_number(TOTAL_CURR) - (nvl (APROBADAS_CURR,0) + nvl (CURSO_CURR,0)) <4
                )loop

                    BEGIN

                        SELECT COUNT(*)
                        INTO l_cuenta
                        FROM rel_alumnos_x_asignar
                        WHERE 1 = 1
                        AND SVRPROY_PIDM = c.pidm
                        AND REL_ALUMNOS_X_ASIGNAR_NO_REGLA = c.REGLA;

                    exception when others then
                        null;
                    end;


                    IF c.faltan < 4 then

                        for d in (SELECT *
                                  FROM rel_alumnos_x_asignar
                                  WHERE 1 = 1
                                  AND REL_ALUMNOS_X_ASIGNAR_NO_REGLA = c.regla
                                  AND SVRPROY_PIDM =c.pidm
                                  order by SVRPROY_PIDM,secuencia desc
                                  )
                                  loop

                                    l_contador:=l_contador+1;

                                    l_resta:=l_cuenta-to_number(c.faltan);


                                    dbms_output.put_line('Matricula '||c.matricula||' total '||c.total||' cursadas '||c.cursadas||' faltan '||c.faltan||' total en tabla  '||l_cuenta||' Materia '||d.clave_materia_agp||' Contador '||l_contador||' Secuencia '||d.secuencia||' resta '||l_resta);


                                    BEGIN

                                        DELETE rel_alumnos_x_asignar
                                        WHERE 1 = 1
                                        AND SVRPROY_PIDM = c.pidm
                                        AND REL_ALUMNOS_X_ASIGNAR_NO_REGLA = c.REGLA
                                        AND CLAVE_MATERIA_AGP = d.clave_materia_agp;

                                    exception when others then
                                        null;
                                    end;


                                    exit when l_contador = l_resta;


                                  END LOOP;

                                 l_contador:=0;

                    end IF;

                END LOOP;

                commit;

    End p_quita_derecho;

    PROCEDURE p_quita_derecho_M (p_regla number)
    is
        l_cuenta number;
        l_contador number:=0;
        l_resta    number:=0;

    BEGIN
    --       for c in (
    --
    --                        SELECT distinct MATRICULA, APROBADAS_CURR, CURSO_CURR, nvl (APROBADAS_CURR,0) + nvl (CURSO_CURR,0) cursadas, programa
    --                        FROM tmp_valida_faltantes
    --                        WHERE REGLA = p_regla
    --                        AND programa in ('UTLLIDDFED',
    --                        'UTLLIDIFED',
    --                        'UTLLIDEFED')
    --                        AND nvl (APROBADAS_CURR,0) + nvl (CURSO_CURR,0) >= 49
    --
    --        ) loop
    --
    --
    --            BEGIN
    --                    DELETE   rel_alumnos_x_asignar
    --                     WHERE REL_ALUMNOS_X_ASIGNAR_NO_REGLA = p_regla
    --                     AND ID_ALUMNO = c.MATRICULA
    --                     AND ID_PROGRAMA = c.programa;
    --            Exception
    --                When Others then
    --                    null;
    --            End;
    --
    --    Commit;
    --
    --END LOOP;

        l_contador:=0;

        for c in
                (
                SELECT distinct MATRICULA,
                                APROBADAS_CURR,
                                CURSO_CURR,
                                nvl (APROBADAS_CURR,0) + nvl (CURSO_CURR,0) cursadas,
                                programa,
                                to_number(TOTAL_CURR) total,
                                to_number(TOTAL_CURR) - (nvl (APROBADAS_CURR,0) + nvl (CURSO_CURR,0)) faltan,
                                REGLA,
                                pidm
--                            FROM tmp_valida_faltantes fal
                            FROM tmp_faltantes fal   --Jpg@Modify@Feb22
                WHERE REGLA = p_regla
    --            AND matricula ='010570193'
                AND programa in ('UTLLIDDFED',
                                 'UTLLIDIFED',
                                 'UTLLIDEFED')
                AND to_number(TOTAL_CURR) - (nvl (APROBADAS_CURR,0) + nvl (CURSO_CURR,0)) <4
                )loop

                    BEGIN

                        SELECT COUNT(*)
                        INTO l_cuenta
                        FROM rel_alumnos_x_asignar
                        WHERE 1 = 1
                        AND SVRPROY_PIDM = c.pidm
                        AND REL_ALUMNOS_X_ASIGNAR_NO_REGLA = c.REGLA;

                    exception when others then
                        null;
                    end;


                    IF c.faltan < 4 then

                        for d in (SELECT *
                                  FROM rel_alumnos_x_asignar
                                  WHERE 1 = 1
                                  AND REL_ALUMNOS_X_ASIGNAR_NO_REGLA = c.regla
                                  AND SVRPROY_PIDM =c.pidm
                                  order by SVRPROY_PIDM,secuencia desc
                                  )
                                  loop

                                    l_contador:=l_contador+1;

                                    l_resta:=l_cuenta-to_number(c.faltan);


                                    dbms_output.put_line('Matricula '||c.matricula||' total '||c.total||' cursadas '||c.cursadas||' faltan '||c.faltan||' total en tabla  '||l_cuenta||' Materia '||d.clave_materia_agp||' Contador '||l_contador||' Secuencia '||d.secuencia||' resta '||l_resta);


                                    BEGIN

                                        DELETE rel_alumnos_x_asignar
                                        WHERE 1 = 1
                                        AND SVRPROY_PIDM = c.pidm
                                        AND REL_ALUMNOS_X_ASIGNAR_NO_REGLA = c.REGLA
                                        AND CLAVE_MATERIA_AGP = d.clave_materia_agp;

                                    exception when others then
                                        null;
                                    end;


                                    exit when l_contador = l_resta;


                                  END LOOP;

                                 l_contador:=0;

                    end IF;

                END LOOP;

                commit;

    End p_quita_derecho_M;
--
--
    procedure p_extra_pronostico (p_regla number)
    as

        l_feha_inicio           DATE;
        l_cuenta_extra          NUMBER;
        l_materia_ssbsect       VARCHAR2(30);
        l_cuenta_materia_prono  NUMBER;
        l_numero_materias       NUMBER;
        l_existe_grupo          NUMBER;
        l_cuenta_pas            NUMBER;
        l_numero_extra          NUMBER;
        l_materias_cambio       NUMBER;
        l_contador              NUMBER:=0;
        l_sec                   NUMBER;
        l_secu_prono            number;
        l_text                  number;
        l_cuenta_INSERT         number:=0;
        l_fecha_inicio          date;
        l_acredita              varchar2(1);
        l_grupo_menor           number;
        l_grupo_tume            varchar2(3);
        l_pwd                   varchar2(200);
        l_prender               varchar2(1);
        l_existe_prono          number;
    BEGIN

        DELETE sztprext
        WHERE 1 = 1
        AND sztprext_no_regla = p_regla;

       -- l_grupo_menor:=NULL;

        commit;

        BEGIN

            SELECT DISTINCT ZSTPARA_PARAM_VALOR
            INTO l_prender
            FROM ZSTPARA
            WHERE 1 = 1
            AND ZSTPARA_MAPA_ID ='PRONO_EXTRA';


        exception when others then
            l_prender:='N';
        end;


        BEGIN

            SELECT distinct SZTALGO_FECHA_INSERTO
            INTO l_feha_inicio
            FROM sztalgo lgo
            WHERE 1 = 1
            AND sztalgo_no_regla = p_regla
            AND SZTALGO_FECHA_INSERTO = (SELECT min(SZTALGO_FECHA_INSERTO)
                                         FROM sztalgo lgo2
                                         WHERE 1 = 1
                                         AND lgo.sztalgo_no_regla=lgo2.sztalgo_no_regla
                                         );


        exception when others then

            SELECT distinct SZTALGO_FECHA_INSERTO
            INTO l_feha_inicio
            FROM sztalgo lgo
            WHERE 1 = 1
            AND sztalgo_no_regla = p_regla
            AND rownum = 1;

        end;


    for c in (
                SELECT distinct
                                sztprono_pidm,
                                sztprono_id,
                                SZTPRONO_STUDY_PATH sp,
                                sztprono_no_regla regla,
                                sztprono_program programa
                FROM sztprono
                WHERE 1 = 1
                AND sztprono_no_regla = p_regla
                AND sztprono_estatus_error ='N'
--AND SZTPRONO_USUARIO = 'VMRL'   --TEMPORAL QUITAR LUEGO
--                AND sztprono_id ='010451205'
--                AND rownum <= 100
                order by 1
             )loop

                BEGIN

                    SELECT COUNT(distinct sztprono_materia_legal)
                    INTO l_numero_materias
                    FROM sztprono
                    WHERE 1 = 1
                    AND sztprono_no_regla = c.regla
                    AND sztprono_pidm = c.sztprono_pidm;

                exception when others then
                    null;
                end;

                BEGIN
                -- SOLO MATERIAS QUE ESTEN REPROBADAS Y QUE ESTEN EN CURSO
                    SELECT COUNT(*)
                    INTO l_cuenta_extra
                    FROM sfrstcr
                    WHERE 1 = 1
                    AND sfrstcr_pidm = c.sztprono_pidm
                    AND SFRSTCR_ACTIVITY_DATE >= l_feha_inicio
                    AND substr(SFRSTCR_TERM_CODE,5,1)in ('8','9')
                    AND SFRSTCR_STSP_KEY_SEQUENCE = c.sp
                    AND SFRSTCR_RSTS_CODE ='RE';

                exception when others then
                    null;
                end;

                 dbms_output.put_line('Existe '||l_cuenta_extra);

                IF l_cuenta_extra > 0 then


                    for d in (SELECT *
                              FROM sfrstcr
                              WHERE 1 = 1
                              AND sfrstcr_pidm = c.sztprono_pidm
                              AND SFRSTCR_ACTIVITY_DATE >= l_feha_inicio
                              AND SFRSTCR_RSTS_CODE='RE'
                              AND substr(SFRSTCR_TERM_CODE,5,1)in ('8','9')
                              AND SFRSTCR_STSP_KEY_SEQUENCE = c.sp
                              AND SFRSTCR_RSTS_CODE ='RE'
                              AND not exists (SELECT null
                                              FROM sztprext
                                              WHERE 1 = 1
                                              AND sfrstcr_pidm =sztprext_pidm
                                              AND sfrstcr_term_code= SZTPREXT_TERM_CODE
                                              AND sfrstcr_crn= SZTPREXT_CRN_EXTRA
                                              AND sztprext_no_regla = c.regla
                                              )
                            )loop

                                dbms_output.put_line('Existe 2 --> '||l_cuenta_extra);

                                BEGIN
                                    SELECT distinct get_materia_padre(SSBSECT_SUBJ_CODE||SSBSECT_CRSE_NUMB)
                                    INTO l_materia_ssbsect
                                    FROM ssbsect
                                    WHERE 1 = 1
                                    AND ssbsect_term_code = d.sfrstcr_term_code
                                    AND SSBSECT_PTRM_CODE = d.sfrstcr_ptrm_code
                                    AND ssbsect_crn = d.sfrstcr_crn;
                                exception when others then
                                    null;
                                end;


                                BEGIN
                                    SELECT distinct SSBSECT_PTRM_START_DATE
                                    INTO l_fecha_inicio
                                    FROM ssbsect
                                    WHERE 1 = 1
                                    AND ssbsect_term_code = d.sfrstcr_term_code
                                    AND SSBSECT_PTRM_CODE = d.sfrstcr_ptrm_code
                                    AND ssbsect_crn = d.sfrstcr_crn;
                                exception when others then
                                    null;
                                end;




                                BEGIN
                                    SELECT get_materia_padre(SSBSECT_SUBJ_CODE||SSBSECT_CRSE_NUMB)
                                    INTO l_materia_ssbsect
                                    FROM ssbsect
                                    WHERE 1 = 1
                                    AND ssbsect_term_code = d.sfrstcr_term_code
                                    AND SSBSECT_PTRM_CODE = d.sfrstcr_ptrm_code
                                    AND ssbsect_crn = d.sfrstcr_crn;
                                exception when others then
                                    null;
                                end;



                                BEGIN

                                    SELECT COUNT(*)
                                    INTO l_cuenta_materia_prono
                                    FROM sztprono
                                    WHERE 1 = 1
                                    AND sztprono_no_regla = c.regla
                                    AND sztprono_pidm = c.sztprono_pidm
                                    AND sztprono_materia_legal = l_materia_ssbsect;

                                exception when others then
                                    null;
                                end;


                                dbms_output.put_line('Existe 2 --> '||l_cuenta_extra||' Cuenta prono '||l_cuenta_materia_prono||c.sztprono_id);

                                IF l_cuenta_materia_prono > 0 THEN

                                    BEGIN
                                        SELECT SHRGRDE_PASSED_IND
                                        INTO l_acredita
                                        FROM shrgrde
                                        WHERE 1 = 1
                                        AND SHRGRDE_LEVL_CODE= d.SFRSTCR_LEVL_CODE
                                        AND SHRGRDE_CODE = d.SFRSTCR_GRDE_CODE;
                                    exception when others then
                                        null;
                                    end;

                                    BEGIN

                                        SELECT nvl(max(sztprext_secuencia),0)+1
                                        INTO l_sec
                                        FROM sztprext
                                        WHERE 1 = 1
                                        AND sztprext_no_regla=c.regla
                                        AND sztprext_pidm =c.sztprono_pidm;



                                    exception when others then
                                        null;
                                    end;

                                    dbms_output.put_line(' Matricula '||c.sztprono_id||' Materia ssbsect '||l_materia_ssbsect||' secuencia  '||l_sec||' Acredita '||l_acredita||' Grade '||d.SFRSTCR_GRDE_CODE);

                                    IF l_acredita ='Y'  then


                                        BEGIN

                                            INSERT INTO sztprext VALUES(c.sztprono_pidm,
                                                                        c.sztprono_id,
                                                                        c.programa,
                                                                        l_sec,
                                                                        c.regla,
                                                                        l_materia_ssbsect,
                                                                        null,
                                                                        d.sfrstcr_term_code,
                                                                        d.sfrstcr_ptrm_code,
                                                                        d.sfrstcr_crn,
                                                                        'N',
                                                                        null,
                                                                        null,
                                                                        l_fecha_inicio,
                                                                        d.SFRSTCR_GRDE_CODE,
                                                                        d.sfrstcr_activity_date,
                                                                        d.sfrstcr_user,
                                                                        d.sfrstcr_data_origin,
                                                                        SYSDATE,
                                                                        USER
                                                                        );

                                            dbms_output.put_line(' Matricula 1 '||c.sztprono_id||' Materia ssbsect '||l_materia_ssbsect||' error '||sqlerrm);

                                        exception when others then
                                            -- raise_application_error (-20002,'error '||sqlerrm);
                                            dbms_output.put_line(' Matricula '||c.sztprono_id||' Materia ssbsect '||l_materia_ssbsect||' error '||sqlerrm);
                                        end;

                                    end IF;

                                    IF d.SFRSTCR_GRDE_CODE is null then

                                        BEGIN

                                            INSERT INTO sztprext VALUES(c.sztprono_pidm,
                                                                        c.sztprono_id,
                                                                        c.programa,
                                                                        l_sec,
                                                                        c.regla,
                                                                        l_materia_ssbsect,
                                                                        null,
                                                                        d.sfrstcr_term_code,
                                                                        d.sfrstcr_ptrm_code,
                                                                        d.sfrstcr_crn,
                                                                        'N',
                                                                        null,
                                                                        null,
                                                                        l_fecha_inicio,
                                                                        d.SFRSTCR_GRDE_CODE,
                                                                        d.sfrstcr_activity_date,
                                                                        d.sfrstcr_user,
                                                                        d.sfrstcr_data_origin,
                                                                        SYSDATE,
                                                                        USER
                                                                        );
                                            dbms_output.put_line(' Matricula 2 '||c.sztprono_id||' Materia ssbsect '||l_materia_ssbsect||' error '||sqlerrm);


                                        exception when others then
                                            -- raise_application_error (-20002,'error '||sqlerrm);
                                            dbms_output.put_line(' Matricula '||c.sztprono_id||' Materia ssbsect '||l_materia_ssbsect||' error '||sqlerrm);
                                        end;



                                    end IF;

                                END IF;



                            END LOOP;


                end IF;

             END LOOP;

             for c in (
                        SELECT  distinct
                                        sztprono_pidm,
                                        sztprono_id,
                                        SZTPRONO_STUDY_PATH sp,
                                        sztprono_no_regla regla,
                                        sztprono_program programa
                        FROM sztprono
                        WHERE 1 = 1
                        AND sztprono_no_regla = p_regla
                        AND sztprono_estatus_error ='N'
                        AND exists (SELECT null
                                    FROM sztprext
                                    WHERE 1 = 1
                                    AND sztprext_no_regla = sztprono_no_regla
                                    AND sztprext_pidm = sztprono_pidm )
                        order by 2
                       )loop

                                            dbms_output.put_line(' Matricula 3'||c.sztprono_id);

                            --raise_application_error (-20002,'Valor  1');

                            BEGIN

                                SELECT COUNT(distinct sztprext_materia_legal)
                                INTO l_numero_extra
                                FROM sztprext
                                WHERE 1 = 1
                                AND sztprext_no_regla = c.regla
                                AND sztprext_pidm = c.sztprono_pidm;


                            exception when others then
                                null;
                            end;
--
                            BEGIN

                                pkg_algoritmo_pidm.p_alumnos_x_pidm(c.regla,c.sztprono_pidm);

                            end;

                            BEGIN

                                SELECT COUNT(*)
                                INTO l_cuenta_pas
                                FROM REL_ALUMNOS_X_ASIGNAR
                                WHERE 1 = 1
                                AND REL_ALUMNOS_X_ASIGNAR_no_regla = c.regla
                                AND SVRPROY_PIDM = c.sztprono_pidm
                                AND exists (SELECT null
                                            FROM sztprext
                                            WHERE 1 = 1
                                            AND REL_ALUMNOS_X_ASIGNAR_NO_REGLA = sztprext_no_regla
                                            AND SVRPROY_PIDM = sztprext_pidm )
                                AND not exists (SELECT null
                                                FROM sztprext
                                                WHERE 1 = 1
                                                AND REL_ALUMNOS_X_ASIGNAR_NO_REGLA = sztprext_no_regla
                                                AND SVRPROY_PIDM = sztprext_pidm
                                                AND  CLAVE_MATERIA_AGP =sztprext_materia_legal);


                            exception when others then
                                null;
                            end;

                            IF l_cuenta_pas > 0 then

                               -- raise_application_error (-20002,'Valor  2');

                                l_contador:=0;

                                for x in (SELECT distinct CLAVE_MATERIA_AGP,
                                                           SVRPROY_PIDM,
                                                           ID_ALUMNO,
                                                           SECUENCIA,
                                                           REL_ALUMNOS_X_ASIGNAR_no_regla,
                                                           CLAVE_MATERIA
                                            FROM REL_ALUMNOS_X_ASIGNAR
                                            WHERE 1 = 1
                                            AND REL_ALUMNOS_X_ASIGNAR_no_regla = c.regla
                                            AND SVRPROY_PIDM = c.sztprono_pidm
                                            AND exists (SELECT null
                                                        FROM sztprext
                                                        WHERE 1 = 1
                                                        AND REL_ALUMNOS_X_ASIGNAR_NO_REGLA = sztprext_no_regla
                                                        AND SVRPROY_PIDM = sztprext_pidm )
                                            AND not exists(SELECT null
                                                           FROM sztprono
                                                           WHERE 1 = 1
                                                           AND REL_ALUMNOS_X_ASIGNAR_NO_REGLA =sztprono_no_regla
                                                           AND CLAVE_MATERIA_AGP = sztprono_materia_legal
                                                           AND SVRPROY_PIDM= sztprono_pidm  )
                                            AND not exists (SELECT null
                                                            FROM sztprext
                                                            WHERE 1 = 1
                                                            AND REL_ALUMNOS_X_ASIGNAR_NO_REGLA = sztprext_no_regla
                                                            AND SVRPROY_PIDM = sztprext_pidm
                                                            AND  CLAVE_MATERIA_AGP =sztprext_materia_legal
                                                            )
                                            order by ID_ALUMNO, SECUENCIA
                                          )loop

                                                --raise_application_error (-20002,'Valor  3');

                                                BEGIN

                                                    SELECT COUNT(*)
                                                    INTO l_existe_grupo
                                                    FROM sztgpme
                                                    WHERE 1 = 1
                                                    AND sztgpme_no_regla = c.regla
                                                    AND SZTGPME_SUBJ_CRSE =x.CLAVE_MATERIA_AGP;

                                                exception when others then
                                                    null;
                                                end;

                                                IF l_existe_grupo > 0 then

                                                   l_contador:=l_contador+1;


                                                   for i in (SELECT *
                                                              FROM sztprext
                                                              WHERE 1 = 1
                                                              AND sztprext_no_regla = x.REL_ALUMNOS_X_ASIGNAR_no_regla
                                                              AND sztprext_pidm = x.SVRPROY_PIDM
                                                              order by sztprext_matricula,
                                                                       sztprext_secuencia
                                                               )loop

                                                                   -- raise_application_error (-20002,'Error al obtener valores de  spriden  '|| SQLCODE||' Error: '||SQLERRM);


                                                                    IF i.sztprext_secuencia = l_contador then

                                                                       -- dbms_output.put_line('Matricula '||i.sztprext_matricula||' Materia '||i.SZTPREXT_MATERIA_LEGAL||' Secuencia '||i.sztprext_secuencia||' Contador '||l_contador||' Materia new '||x.CLAVE_MATERIA_AGP);

                                                                        BEGIN

                                                                            update sztprext set SZTPREXT_MATERIA_CAMBIO = x.CLAVE_MATERIA_AGP,
                                                                                                SZTPREXT_CON_GRUPO='S',
                                                                                                SZTPREXT_OBSERVACIONES ='Encontro grupo'
                                                                            WHERE 1 = 1
                                                                            AND sztprext_no_regla =i.sztprext_no_regla
                                                                            AND sztprext_pidm = i.sztprext_pidm
                                                                            AND sztprext_secuencia =l_contador;

                                                                        exception when others then
                                                                            null;
                                                                        end;

                                                                        IF l_prender ='S' then

                                                                            BEGIN

                                                                                UPDATE sztprono set SZTPRONO_ESTATUS_ERROR='S',
                                                                                                    SZTPRONO_ENVIO_HORARIOS='N',
                                                                                                    SZTPRONO_ENVIO_MOODL='N',
                                                                                                    SZTPRONO_DESCRIPCION_ERROR='Encontro grupo '||x.CLAVE_MATERIA_AGP,
                                                                                                    SZTPRONO_COMENTARIO='Baja desde extra'
                                                                                WHERE 1 = 1
                                                                                AND sztprono_pidm =c.sztprono_pidm
                                                                                AND sztprono_no_regla = c.regla
                                                                                AND sztprono_materia_legal =  i.SZTPREXT_MATERIA_LEGAL;
                                                                            exception when others then
                                                                                null;
                                                                            end;

                                                                            l_cuenta_INSERT:=0;

                                                                            for n in (SELECT *
                                                                                      FROM sztprono
                                                                                      WHERE 1 = 1
                                                                                      AND sztprono_no_regla =i.sztprext_no_regla
                                                                                      AND sztprono_pidm =i.sztprext_pidm
                                                                                      AND sztprono_secuencia = 1
                                                                                      )loop


                                                                                            BEGIN

                                                                                                SELECT nvl(max(sztprono_secuencia),0)+1
                                                                                                INTO l_secu_prono
                                                                                                FROM sztprono
                                                                                                WHERE 1 = 1
                                                                                                AND sztprono_no_regla = n.sztprono_no_regla
                                                                                                AND sztprono_pidm =n.SZTPRONO_PIDM;


                                                                                            exception when others then
                                                                                                l_secu_prono:=1;
                                                                                            end;

                                                                                            dbms_output.put_line('Matricula '||i.sztprext_matricula||' Materia '||i.SZTPREXT_MATERIA_LEGAL||' Secuencia '||i.sztprext_secuencia||' Contador '||l_contador||' Materia new '||x.CLAVE_MATERIA_AGP||' Cuenta INSERT '||l_cuenta_INSERT);



                                                                                            BEGIN

                                                                                                INSERT INTO sztprono VALUES ( n.SZTPRONO_PIDM,
                                                                                                                              n.SZTPRONO_ID,
                                                                                                                              n.SZTPRONO_TERM_CODE,
                                                                                                                              n.SZTPRONO_PROGRAM,
                                                                                                                              x.CLAVE_MATERIA_AGP,
                                                                                                                              l_secu_prono,
                                                                                                                              n.SZTPRONO_PTRM_CODE,
                                                                                                                              x.CLAVE_MATERIA,
                                                                                                                              'alta desde extra',
                                                                                                                              n.SZTPRONO_FECHA_INICIO,
                                                                                                                              n.SZTPRONO_PTRM_CODE_NW,
                                                                                                                              n.SZTPRONO_FECHA_INICIO_NW,
                                                                                                                              n.SZTPRONO_AVANCE,
                                                                                                                              n.SZTPRONO_NO_REGLA,
                                                                                                                              n.SZTPRONO_USUARIO,
                                                                                                                              n.SZTPRONO_STUDY_PATH,
                                                                                                                              n.SZTPRONO_RATE,
                                                                                                                              n.SZTPRONO_JORNADA,
                                                                                                                              n.SZTPRONO_ACTIVITY_DATE,
                                                                                                                              n.SZTPRONO_CUATRI,
                                                                                                                              n.SZTPRONO_TIPO_INICIO,
                                                                                                                              n.SZTPRONO_JORNADA_DOS,
                                                                                                                              'S',
                                                                                                                              'N',
                                                                                                                              n.SZTPRONO_ESTATUS,
                                                                                                                              'N',
                                                                                                                              null,
                                                                                                                              n.SZTPRONO_GRUPO_ASIG
                                                                                                                              );


                                                                                            exception when others then
                                                                                                null;
                                                                                            end;


                                                                                            -- obtner el grupo menor de alumnos
                                                                                            BEGIN

                                                                                                SELECT min(to_number(onf.SZTCONF_GROUP))
                                                                                                INTO l_grupo_menor
                                                                                                FROM sztconf onf
                                                                                                WHERE 1 = 1
                                                                                                AND onf.sztconf_no_regla =n.SZTPRONO_NO_REGLA
                                                                                                AND onf.sztconf_subj_code = x.CLAVE_MATERIA_AGP
                                                                                                AND onf.sztconf_student_numb = (SELECT min(onf1.SZTCONF_STUDENT_NUMB)
                                                                                                                                FROM sztconf onf1
                                                                                                                                WHERE 1 = 1
                                                                                                                                AND onf1.sztconf_no_regla =onf.sztconf_no_regla
                                                                                                                                AND onf1.sztconf_subj_code = onf.sztconf_subj_code );

                                                                                            exception when others then

                                                                                                BEGIN

                                                                                                    SELECT min(to_number(onf.SZTCONF_GROUP))
                                                                                                    INTO l_grupo_menor
                                                                                                    FROM sztconf onf
                                                                                                    WHERE 1 = 1
                                                                                                    AND onf.sztconf_no_regla =n.SZTPRONO_NO_REGLA
                                                                                                    AND onf.sztconf_subj_code = x.CLAVE_MATERIA_AGP
                                                                                                    AND onf.sztconf_student_numb = (SELECT min(onf1.SZTCONF_STUDENT_NUMB)
                                                                                                                                    FROM sztconf onf1
                                                                                                                                    WHERE 1 = 1
                                                                                                                                    AND onf1.sztconf_no_regla =onf.sztconf_no_regla
                                                                                                                                    AND onf1.sztconf_subj_code = onf.sztconf_subj_code )
                                                                                                     AND to_number(SZTCONF_GROUP) = (SELECT min(to_number(onf1.SZTCONF_GROUP))
                                                                                                                                    FROM sztconf onf1
                                                                                                                                    WHERE 1 = 1
                                                                                                                                    AND onf1.sztconf_no_regla = onf.sztconf_no_regla
                                                                                                                                    AND onf1.sztconf_subj_code = onf.sztconf_subj_code
                                                                                                                                    );

                                                                                                exception when others then

                                                                                                    BEGIN

                                                                                                        SELECT min(to_number(onf.SZTCONF_GROUP))
                                                                                                        INTO l_grupo_menor
                                                                                                        FROM sztconf onf
                                                                                                        WHERE 1 = 1
                                                                                                        AND onf.sztconf_no_regla =n.SZTPRONO_NO_REGLA
                                                                                                        AND onf.sztconf_subj_code = x.CLAVE_MATERIA_AGP
                                                                                                        AND onf.sztconf_student_numb = (SELECT min(onf1.SZTCONF_STUDENT_NUMB)
                                                                                                                                        FROM sztconf onf1
                                                                                                                                        WHERE 1 = 1
                                                                                                                                        AND onf1.sztconf_no_regla =onf.sztconf_no_regla
                                                                                                                                        AND onf1.sztconf_subj_code = onf.sztconf_subj_code )
                                                                                                         AND to_number(SZTCONF_GROUP) = (SELECT min(to_number(onf1.SZTCONF_GROUP))
                                                                                                                                        FROM sztconf onf1
                                                                                                                                        WHERE 1 = 1
                                                                                                                                        AND onf1.sztconf_no_regla = onf.sztconf_no_regla
                                                                                                                                        AND onf1.sztconf_subj_code = onf.sztconf_subj_code
                                                                                                                                        )
                                                                                                        AND rownum = 1;

                                                                                                    exception when others then
                                                                                                        l_grupo_menor:=1;
                                                                                                    end;

                                                                                                end;

                                                                                                --l_grupo_menor:=to_char(l_grupo_menor);

                                                                                            end;

                                                                                            IF length(l_grupo_menor)>1 THEN

                                                                                                l_grupo_tume:=l_grupo_menor;

                                                                                            elsIF length(l_grupo_menor)=1 THEN

                                                                                                l_grupo_tume:='0'||l_grupo_menor;

                                                                                            else
                                                                                                l_grupo_tume:='01';

                                                                                            end IF;

                                                                                            BEGIN

                                                                                                SELECT GOZTPAC_PIN
                                                                                                INTO l_pwd
                                                                                                FROM GOZTPAC pac
                                                                                                WHERE 1 = 1
                                                                                                AND pac.GOZTPAC_pidm =n.SZTPRONO_PIDM
                                                                                                AND rownum = 1
                                                                                                AND GOZTPAC_PIN is not null;

                                                                                            exception when others then
                                                                                                l_pwd:=null;
                                                                                                --l_retorna:=('No se pudo INSERTar tabla de paso '|| sqlerrm||' pidm '||p_pidm);
                                                                                                null;
                                                                                            end;

                                                                                            BEGIN


                                                                                                INSERT INTO SZSTUME VALUES(x.CLAVE_MATERIA_AGP||l_grupo_tume,
                                                                                                                           n.SZTPRONO_PIDM,
                                                                                                                           n.SZTPRONO_ID,
                                                                                                                           SYSDATE,
                                                                                                                           USER,
                                                                                                                           '5',
                                                                                                                           NULL,
                                                                                                                           l_pwd,
                                                                                                                           NULL,
                                                                                                                           1,
                                                                                                                           'RE',
                                                                                                                           NULL,
                                                                                                                           x.CLAVE_MATERIA_AGP,
                                                                                                                           NULL,
                                                                                                                           NULL,
                                                                                                                           NULL,
                                                                                                                           NULL,
                                                                                                                           NULL,
                                                                                                                           NULL,
                                                                                                                           NULL,
                                                                                                                           x.CLAVE_MATERIA_AGP,
                                                                                                                           n.SZTPRONO_FECHA_INICIO,
                                                                                                                           n.SZTPRONO_NO_REGLA,
                                                                                                                           null,
                                                                                                                           1,
                                                                                                                           0,
                                                                                                                           null
                                                                                                                           );
                                                                                            exception when others then
                                                                                                null;
                                                                                            end;


                                                                                      END LOOP;

                                                                        end IF;

                                                                    end IF;


                                                               END LOOP;


                                                else

                                                    l_contador:=l_contador+1;

                                                    for i in (SELECT *
                                                              FROM sztprext
                                                              WHERE 1 = 1
                                                              AND sztprext_no_regla = x.REL_ALUMNOS_X_ASIGNAR_no_regla
                                                              AND sztprext_pidm = x.SVRPROY_PIDM
                                                              order by sztprext_matricula,
                                                                       sztprext_secuencia
                                                               )loop


                                                                    IF i.sztprext_secuencia = l_contador then

                                                                        dbms_output.put_line('Matricula '||i.sztprext_matricula||' Materia '||i.SZTPREXT_MATERIA_LEGAL||' Secuencia '||i.sztprext_secuencia||' Contador '||l_contador||' Materia new '||x.CLAVE_MATERIA_AGP);

                                                                        BEGIN
                                                                             update sztprext set SZTPREXT_MATERIA_CAMBIO = x.CLAVE_MATERIA_AGP,
                                                                                                 SZTPREXT_CON_GRUPO='N',
                                                                                                 SZTPREXT_OBSERVACIONES ='No encontro grupo'
                                                                             WHERE 1 = 1
                                                                             AND sztprext_no_regla =i.sztprext_no_regla
                                                                             AND sztprext_pidm = i.sztprext_pidm
                                                                             AND sztprext_secuencia = l_contador;
                                                                        exception when others then
                                                                            null;
                                                                        end;


                                                                        IF l_prender ='S' then

                                                                            BEGIN

                                                                                UPDATE sztprono set SZTPRONO_ESTATUS_ERROR='S',
                                                                                                    SZTPRONO_ENVIO_HORARIOS='N',
                                                                                                    SZTPRONO_ENVIO_MOODL='N',
                                                                                                    SZTPRONO_COMENTARIO='Baja desde extra',
                                                                                                    SZTPRONO_DESCRIPCION_ERROR='No encontro grupo'
                                                                                WHERE 1 = 1
                                                                                AND sztprono_pidm =c.sztprono_pidm
                                                                                AND sztprono_no_regla = c.regla
                                                                                AND sztprono_materia_legal =  i.SZTPREXT_MATERIA_LEGAL;

                                                                            exception when others then
                                                                                null;
                                                                            end;

                                                                        end IF;

                                                                    end IF;

                                                                    l_cuenta_INSERT:=0;

                                                                        for n in (SELECT *
                                                                                  FROM sztprono
                                                                                  WHERE 1 = 1
                                                                                  AND sztprono_no_regla =i.sztprext_no_regla
                                                                                  AND sztprono_pidm =i.sztprext_pidm
                                                                                  AND sztprono_secuencia = 1
                                                                                  )loop


                                                                                        BEGIN

                                                                                            SELECT nvl(max(sztprono_secuencia),0)+1
                                                                                            INTO l_secu_prono
                                                                                            FROM sztprono
                                                                                            WHERE 1 = 1
                                                                                            AND sztprono_no_regla = n.sztprono_no_regla
                                                                                            AND sztprono_pidm =n.SZTPRONO_PIDM;


                                                                                        exception when others then
                                                                                            l_secu_prono:=1;
                                                                                        end;

                                                                                        dbms_output.put_line('Matricula '||i.sztprext_matricula||' Materia '||i.SZTPREXT_MATERIA_LEGAL||' Secuencia '||i.sztprext_secuencia||' Contador '||l_contador||' Materia new '||x.CLAVE_MATERIA_AGP||' Cuenta INSERT '||l_cuenta_INSERT);

                                                                                        IF l_prender ='S' then

                                                                                            BEGIN

                                                                                                INSERT INTO sztprono VALUES ( n.SZTPRONO_PIDM,
                                                                                                                              n.SZTPRONO_ID,
                                                                                                                              n.SZTPRONO_TERM_CODE,
                                                                                                                              n.SZTPRONO_PROGRAM,
                                                                                                                              x.CLAVE_MATERIA_AGP,
                                                                                                                              l_secu_prono,
                                                                                                                              n.SZTPRONO_PTRM_CODE,
                                                                                                                              x.CLAVE_MATERIA,
                                                                                                                              'alta desde extra',
                                                                                                                              n.SZTPRONO_FECHA_INICIO,
                                                                                                                              n.SZTPRONO_PTRM_CODE_NW,
                                                                                                                              n.SZTPRONO_FECHA_INICIO_NW,
                                                                                                                              n.SZTPRONO_AVANCE,
                                                                                                                              n.SZTPRONO_NO_REGLA,
                                                                                                                              n.SZTPRONO_USUARIO,
                                                                                                                              n.SZTPRONO_STUDY_PATH,
                                                                                                                              n.SZTPRONO_RATE,
                                                                                                                              n.SZTPRONO_JORNADA,
                                                                                                                              n.SZTPRONO_ACTIVITY_DATE,
                                                                                                                              n.SZTPRONO_CUATRI,
                                                                                                                              n.SZTPRONO_TIPO_INICIO,
                                                                                                                              n.SZTPRONO_JORNADA_DOS,
                                                                                                                              'N',
                                                                                                                              'N',
                                                                                                                              n.SZTPRONO_ESTATUS,
                                                                                                                              'N',
                                                                                                                              null,
                                                                                                                              n.SZTPRONO_GRUPO_ASIG
                                                                                                                              );


                                                                                            exception when others then
                                                                                                null;
                                                                                            end;


                                                                                        END IF;

                                                                                  END LOOP;


                                                               END LOOP;


                                                end IF;


                                                exit when l_contador= l_numero_extra;


                                          END LOOP;

                            else

                                 -- actualizamos sin grupo en pronostico
                                update sztprext set
                                                    SZTPREXT_CON_GRUPO='N',
                                                    SZTPREXT_OBSERVACIONES ='No tiene materias por asignar'
                                WHERE 1 = 1
                                AND sztprext_no_regla =c.regla
                                AND sztprext_pidm = c.sztprono_pidm;

                                IF l_prender ='S' then

                                    BEGIN

                                        UPDATE sztprono set SZTPRONO_ESTATUS_ERROR='S',
                                                            SZTPRONO_ENVIO_HORARIOS='N',
                                                            SZTPRONO_ENVIO_MOODL='N',
                                                            SZTPRONO_COMENTARIO='Baja desde extra',
                                                            SZTPRONO_DESCRIPCION_ERROR='No tiene materias por asignar'
                                        WHERE 1 = 1
                                        AND sztprono_pidm =c.sztprono_pidm
                                        AND sztprono_no_regla = c.regla;

                                    exception when others then
                                        null;
                                    end;

                                end IF;


                            end IF;




                       END LOOP;

             commit;


    end;
--
--
PROCEDURE P_GRUPOS_EJECUTIVOS( p_regla   NUMBER)
     IS
        l_contar            number;
        l_cuneta_semi       number;
        l_contador          number:=0;
        l_dIFerencia_grupo  number;
        l_short_name        varchar2(30);
        l_prof              varchar2(20);
        l_pidm              number;
        l_pwd               varchar2(100);
        l_pwd_alumno        varchar2(100);
        l_cuenta_grupo      number;
        l_cuenta_grupo_alia number;
        l_cuenta_nivel      number;
        l_nivel             varchar2(2);
        l_cuenta_alol       number;
        l_cuenta_prono      number;
     BEGIN



        for c in
                (
                SELECT *
                FROM sztgpme
                WHERE 1 = 1
                AND sztgpme_no_regla = p_regla
                AND exists (select null
                           FROM SZTALMT
                           WHERE 1 = 1
                           AND SZTALMT_ALIANZA ='EJEC'
                           AND SZTALMT_NIVEL =l_nivel
                           AND SZTALMT_MATERIA = SZTGPME_SUBJ_CRSE
                           )
                union
                SELECT *
                FROM sztgpme
                WHERE 1 = 1
                AND sztgpme_no_regla = p_regla
                AND exists (select null
                           FROM SZTALMT
                           WHERE 1 = 1
                           AND SZTALMT_ALIANZA ='CESA'
                           AND SZTALMT_NIVEL =l_nivel
                           AND SZTALMT_MATERIA = SZTGPME_SUBJ_CRSE
                           )
                )loop


                    DELETE sztgpme
                    WHERE 1 = 1
                    AND sztgpme_no_regla = c.sztgpme_no_regla
                    AND SZTGPME_TERM_NRC =c.SZTGPME_TERM_NRC;

                    DELETE
                    FROM SZSGNME
                    WHERE 1 = 1
                    AND SZSGNME_no_regla = c.sztgpme_no_regla
                    AND SZSGNME_TERM_NRC = c.SZTGPME_TERM_NRC;


                    DELETE szstume
                    WHERE 1 = 1
                    AND szstume_no_regla = c.sztgpme_no_regla
                    AND szstume_TERM_NRC = c.SZTGPME_TERM_NRC;

                END LOOP;

        dbms_output.put_line('entra 1');

        DELETE sztsemi
        WHERE 1 = 1
        AND sztsemi_NO_REGLA = P_REGLA;

        COMMIT;

        BEGIN

            SELECT COUNT(*)
            INTO l_cuenta_nivel
            FROM sztalgo
            WHERE 1 = 1
            AND sztalgo_no_regla = p_regla
            AND SZTALGO_LEVL_CODE ='LI';

        exception when others then
            l_cuenta_nivel:=0;
        end;


        IF l_cuenta_nivel > 0 THEN

            l_nivel :='LI';
        ELSE

            l_nivel :='MA';
        END IF;



        for c in (SELECT distinct szstume_id matricula,
                              szstume_pidm pidm,
                              SZTPRONO_PROGRAM programa,
                              SZTPRONO_FECHA_INICIO fecha_inicio
              FROM szstume
              join sztprono on szstume_pidm = sztprono_pidm
                           AND szstume_no_regla = sztprono_no_regla
              WHERE 1 = 1
              AND szstume_no_regla = p_regla
              order by 1
              )loop

                 update sztalol set sztalol_fecha_inicio = c.fecha_inicio,
                                    SZTALOL_FECHA_INSERTO  = SYSDATE,
                                    sztalol_NO_REGLA = p_regla
                 WHERE 1 = 1
                 AND sztalol_pidm = c.pidm
                 AND SZTALOL_ESTATUS ='A';


                  BEGIN
                      SELECT COUNT(*)
                      INTO l_cuneta_semi
                      FROM sztdtec
                      WHERE 1 = 1
                      AND SZTDTEC_PROGRAM = C.programa
                      AND SZTDTEC_MOD_TYPE ='S';
                  EXCEPTION WHEN OTHERS THEN
                      NULL;
                  END;

                  --dbms_output.put_line('antes de  semi '||l_cuneta_semi||' Matricula '||c.matricula);


                  IF l_cuneta_semi > 0 THEN

                    -- dbms_output.put_line('entra semi '||l_cuneta_semi);

                      l_contador:=l_contador+1;

                      BEGIN

                          INSERT INTO sztsemi VALUES(
                                                      C.PIDM,
                                                      C.MATRICULA,
                                                      c.programa,
                                                      l_contador,
                                                      p_regla,
                                                      sysdate,
                                                      user
                                                    );
                      EXCEPTION WHEN OTHERS THEN
                          dbms_output.put_line('Error '||sqlerrm);
                      END;

                  END IF;

                  BEGIN

                    SELECT COUNT(*)
                    INTO l_cuenta_alol
                    FROM sztalol
                    WHERE 1 = 1
                    AND sztalol_pidm = C.PIDM
                    AND sztalol_fecha_inicio =c.fecha_inicio
                    AND sztalol_no_regla is null
                    AND SZTALOL_ESTATUS ='A';

                  exception when others then
                    null;
                  end;

                  BEGIN

                    SELECT COUNT(*)
                    INTO l_cuenta_prono
                    FROM sztprono
                    WHERE 1 = 1
                    AND sztprono_pidm = C.PIDM
                    AND sztprono_no_regla = p_regla;

                  exception when others then
                    null;
                  end;

                 -- dbms_output.put_line('Matricula '||c.matricula||' alumnos online '||l_cuenta_alol||);

                  IF l_cuenta_alol > 0 AND l_cuenta_prono> 0 then

                    update sztalol set sztalol_no_regla = p_regla
                    WHERE 1 = 1
                    AND sztalol_pidm = c.pidm
                    AND sztalol_fecha_inicio = c.fecha_inicio
                    AND SZTALOL_ESTATUS ='A';

                  end IF;


              END LOOP;

              BEGIN

                SELECT COUNT(*)
                INTO l_contar
                FROM sztsemi
                WHERE 1 = 1
                AND sztsemi_no_regla = p_regla;


              exception when others then
                null;
              end;

              l_contador:=0;

               for c in (SELECT SZTALMT_SECUENCIA secuencia,
                               SZTALMT_MATERIA materia,
                               SZTALMT_NIVEL descripcion,
                               '01' grupo
                        FROM SZTALMT
                        WHERE 1 = 1
                        AND SZTALMT_ALIANZA ='EJEC'
                        AND SZTALMT_NIVEL =l_nivel
                        )loop

                                dbms_output.put_line('entra a materias');


                                for d in (SELECT *
                                          FROM sztgpme
                                          WHERE 1 = 1
                                          AND sztgpme_no_regla = p_regla
                                          AND SZTGPME_LEVL_CODE not in ('EC','DO','ID')
                                          )loop

                                             l_contador:=l_contador+1;


                                             dbms_output.put_line('Materia '||d.SZTGPME_SUBJ_CRSE||' Contador '||l_contador);

                                             l_short_name:=f_get_short_name(d.SZTGPME_PTRM_CODE,d.SZTGPME_TERM_NRC_COMP,c.materia,d.SZTGPME_START_DATE);

                                              BEGIN
                                                     INSERT INTO sztgpme VALUES(
                                                                                    c.materia||c.grupo, --1
                                                                                    c.materia,--2
                                                                                    c.descripcion,--3
                                                                                    5,--4
                                                                                    NULL,--5
                                                                                    USER,--6
                                                                                    SYSDATE,--7
                                                                                    d.SZTGPME_PTRM_CODE,--8
                                                                                    d.SZTGPME_START_DATE,--8
                                                                                    NULL,--10
                                                                                    d.SZTGPME_MAX_ENRL,--11
                                                                                    d.SZTGPME_LEVL_CODE ,--12
                                                                                    'UTL',--13
                                                                                    NULL,--14
                                                                                    c.materia,--15
                                                                                    NULL,--16
                                                                                    d.SZTGPME_TERM_NRC_COMP ,--17
                                                                                    NULL,--18
                                                                                    NULL,--19
                                                                                    NULL,--20
                                                                                    l_short_name,--21
                                                                                    p_regla,--22
                                                                                    1,--23
                                                                                    c.grupo,--24
                                                                                    'S',--25
                                                                                    1, null
                                                                                    );
                                              EXCEPTION WHEN OTHERS THEN
                                                  dbms_output.put_line(' Error en al INSERTar gpme  grupo '||c.materia||c.grupo||' error '||SQLERRM);
                                              END;

                                              BEGIN

                                                SELECT distinct ZSTPARA_PARAM_VALOR
                                                INTO l_prof
                                                FROM ZSTPARA
                                                WHERE 1 = 1
                                                AND ZSTPARA_MAPA_ID = 'DOCENTE_DUMMY';

                                              exception when others then
                                                null;
                                              end;

                                              BEGIN

                                                SELECT spriden_pidm
                                                INTO l_pidm
                                                FROM spriden
                                                WHERE 1 = 1
                                                AND spriden_change_ind is null
                                                AND spriden_id = l_prof;

                                              exception when others then
                                                null;
                                              end;

                                              BEGIN

                                                   SELECT GOZTPAC_PIN
                                                   INTO l_pwd
                                                   FROM GOZTPAC pac
                                                   WHERE 1 = 1
                                                   AND pac.GOZTPAC_pidm  =l_pidm
                                                   AND GOZTPAC_PIN is not null
                                                   AND rownum = 1;

                                              exception when others then
                                                  dbms_output.put_line(' Error al obtener pwd '||sqlerrm||' pidm '||l_pidm);
                                              end;


                                              dbms_output.put_line('Entra a szstume');

                                              BEGIN

                                                    INSERT INTO SZSGNME VALUES(c.materia||c.grupo,
                                                                               l_pidm,
                                                                               sysdate,
                                                                               user,
                                                                               '5',
                                                                               null,
                                                                               l_pwd,
                                                                               null,
                                                                               'AC',
                                                                               1,
                                                                               null,
                                                                               d.SZTGPME_PTRM_CODE,
                                                                               d.SZTGPME_START_DATE,
                                                                               p_regla,
                                                                               1,
                                                                               1, null
                                                                               );

                                              exception when others then
                                                  dbms_output.put_line(' Error al INSERTar tabla de profesores moodl '||sqlerrm);
                                              end;


                                              dbms_output.put_line('entra a materias semi');

                                              for x in (SELECT distinct sztsemi_pidm pidm,
                                                                        SZTSEMI_ID matricula,
                                                                        (SELECT DISTINCT c.sztprono_ptrm_code
                                                                         FROM sztprono c
                                                                         WHERE     1 = 1
                                                                         AND c.sztprono_no_regla = a.sztsemi_no_regla
                                                                         AND c.sztprono_pidm = a.sztsemi_pidm
                                                                         AND ROWNUM = 1) ptrm
                                                        FROM sztsemi a
                                                        WHERE 1 = 1
                                                        AND sztsemi_no_regla = p_regla
                                                        )loop


                                                                BEGIN

                                                                    SELECT GOZTPAC_PIN
                                                                    INTO l_pwd_alumno
                                                                    FROM GOZTPAC pac
                                                                    WHERE 1 = 1
                                                                    AND pac.GOZTPAC_pidm =x.pidm
                                                                    AND rownum = 1;

                                                                exception when others then
                                                                    null;
                                                                end;


                                                                BEGIN

                                                                       INSERT INTO SZSTUME VALUES(c.materia||c.grupo,
                                                                                                  x.pidm,
                                                                                                  x.matricula,
                                                                                                  sysdate,
                                                                                                  user,
                                                                                                  5,
                                                                                                  null,
                                                                                                  l_pwd_alumno,
                                                                                                  null,
                                                                                                  1,
                                                                                                  'RE',
                                                                                                  0,
                                                                                                  c.materia,
                                                                                                  null,-- c.nivel,
                                                                                                  null,
                                                                                                  null,--  c.ptrm,
                                                                                                  null,
                                                                                                  null,
                                                                                                  null,
                                                                                                  null,
                                                                                                  c.materia,
                                                                                                  d.SZTGPME_START_DATE,--  c.inicio_clases,
                                                                                                  P_REGLA,
                                                                                                  1,
                                                                                                  1,
                                                                                                  0,
                                                                                                  null
                                                                                                  );



                                                                exception when others then
                                                                     dbms_output.put_line(' Error al INSERTar '||sqlerrm);
                                                                end;

                                                        END LOOP;


                                              exit when  l_contador= c.secuencia;

                                          END LOOP;


                        END LOOP;


              for c in (SELECT SZTALMT_SECUENCIA secuencia,
                                SZTALMT_MATERIA materia,
                                SZTALMT_NIVEL descripcion,
                                '01' grupo
                         FROM SZTALMT
                         WHERE 1 = 1
                         AND SZTALMT_ALIANZA ='CESA'
                         AND SZTALMT_NIVEL = l_nivel
                        )loop

                                dbms_output.put_line('entra a materias cesa');


                                for d in (SELECT *
                                          FROM sztgpme
                                          WHERE 1 = 1
                                          AND sztgpme_no_regla = p_regla
                                          AND SZTGPME_LEVL_CODE not in ('EC','DO','ID')
                                          )loop

                                             l_contador:=l_contador+1;


                                             dbms_output.put_line('Materia '||d.SZTGPME_SUBJ_CRSE||' Contador '||l_contador);

                                              l_short_name:=f_get_short_name(d.SZTGPME_PTRM_CODE,d.SZTGPME_TERM_NRC_COMP,c.materia,d.SZTGPME_START_DATE);

                                              BEGIN
                                                     INSERT INTO sztgpme VALUES(
                                                                                    c.materia||c.grupo, --1
                                                                                    c.materia,--2
                                                                                    c.descripcion,--3
                                                                                    5,--4
                                                                                    NULL,--5
                                                                                    USER,--6
                                                                                    SYSDATE,--7
                                                                                    d.SZTGPME_PTRM_CODE,--8
                                                                                    d.SZTGPME_START_DATE,--8
                                                                                    NULL,--10
                                                                                    d.SZTGPME_MAX_ENRL,--11
                                                                                    d.SZTGPME_LEVL_CODE ,--12
                                                                                    'UTL',--13
                                                                                    NULL,--14
                                                                                    c.materia,--15
                                                                                    NULL,--16
                                                                                    d.SZTGPME_TERM_NRC_COMP ,--17
                                                                                    NULL,--18
                                                                                    NULL,--19
                                                                                    NULL,--20
                                                                                    l_short_name,--21
                                                                                    p_regla,--22
                                                                                    1,--23
                                                                                    c.grupo,--24
                                                                                    'S',--25
                                                                                    1, null
                                                                                    );
                                              EXCEPTION WHEN OTHERS THEN
                                                  dbms_output.put_line(' Error en al INSERTar gpme  grupo '||c.materia||c.grupo||' error '||SQLERRM);
                                              END;

                                              BEGIN

                                                SELECT distinct ZSTPARA_PARAM_VALOR
                                                INTO l_prof
                                                FROM ZSTPARA
                                                WHERE 1 = 1
                                                AND ZSTPARA_MAPA_ID = 'DOCENTE_DUMMY';

                                              exception when others then
                                                null;
                                              end;

                                              BEGIN

                                                SELECT spriden_pidm
                                                INTO l_pidm
                                                FROM spriden
                                                WHERE 1 = 1
                                                AND spriden_change_ind is null
                                                AND spriden_id = l_prof;

                                              exception when others then
                                                null;
                                              end;

                                              BEGIN

                                                   SELECT GOZTPAC_PIN
                                                   INTO l_pwd
                                                   FROM GOZTPAC pac
                                                   WHERE 1 = 1
                                                   AND pac.GOZTPAC_pidm  =l_pidm
                                                   AND GOZTPAC_PIN is not null
                                                   AND rownum = 1;

                                              exception when others then
                                                  dbms_output.put_line(' Error al obtener pwd '||sqlerrm||' pidm '||l_pidm);
                                              end;


                                              dbms_output.put_line('Entra a szstume');

                                              BEGIN

                                                    INSERT INTO SZSGNME VALUES(c.materia||c.grupo,
                                                                               l_pidm,
                                                                               sysdate,
                                                                               user,
                                                                               '5',
                                                                               null,
                                                                               l_pwd,
                                                                               null,
                                                                               'AC',
                                                                               1,
                                                                               null,
                                                                               d.SZTGPME_PTRM_CODE,
                                                                               d.SZTGPME_START_DATE,
                                                                               p_regla,
                                                                               1,
                                                                               1, null
                                                                               );

                                              exception when others then
                                                  dbms_output.put_line(' Error al INSERTar tabla de profesores moodl '||sqlerrm);
                                              end;


                                              dbms_output.put_line('entra a materias semi y cesa');

                                              for x in (

                                                        SELECT distinct sztalol_pidm pidm,
                                                                        sztalol_id matricula,
                                                                        (SELECT DISTINCT c.sztprono_ptrm_code
                                                                         FROM sztprono c
                                                                         WHERE     1 = 1
                                                                         AND c.sztprono_no_regla = a.sztalol_no_regla
                                                                         AND c.sztprono_pidm = a.sztalol_pidm
                                                                         AND ROWNUM = 1) ptrm
                                                        FROM sztalol a
                                                        WHERE 1 = 1
                                                        AND sztalol_no_regla = p_regla
                                                        AND SZTALOL_ESTATUS ='A'
                                                        AND  EXISTS (SELECT null
                                                                        FROM goradid
                                                                        WHERE 1 = 1
                                                                        AND goradid_pidm = sztalol_pidm
                                                                        AND GORADID_ADID_CODE ='CESA')
                                                        )loop

                                                            IF x.ptrm in ('L1E','L1A','L2A','M0A','M1A','A0A','A1A','L0A') then

                                                                BEGIN

                                                                    SELECT GOZTPAC_PIN
                                                                    INTO l_pwd_alumno
                                                                    FROM GOZTPAC pac
                                                                    WHERE 1 = 1
                                                                    AND pac.GOZTPAC_pidm =x.pidm
                                                                    AND rownum = 1;

                                                                exception when others then
                                                                    null;
                                                                end;


                                                                BEGIN

                                                                       INSERT INTO SZSTUME VALUES(c.materia||c.grupo,
                                                                                                  x.pidm,
                                                                                                  x.matricula,
                                                                                                  sysdate,
                                                                                                  user,
                                                                                                  5,
                                                                                                  null,
                                                                                                  l_pwd_alumno,
                                                                                                  null,
                                                                                                  1,
                                                                                                  'RE',
                                                                                                  0,
                                                                                                  c.materia,
                                                                                                  null,-- c.nivel,
                                                                                                  null,
                                                                                                  null,--  c.ptrm,
                                                                                                  null,
                                                                                                  null,
                                                                                                  null,
                                                                                                  null,
                                                                                                  c.materia,
                                                                                                  d.SZTGPME_START_DATE,--  c.inicio_clases,
                                                                                                  P_REGLA,
                                                                                                  1,
                                                                                                  1,
                                                                                                  0,
                                                                                                  null
                                                                                                  );



                                                                exception when others then
                                                                     dbms_output.put_line(' Error al INSERTar '||sqlerrm);
                                                                end;

                                                            end IF;

                                                        END LOOP;


                                              exit when  l_contador= c.secuencia;

                                          END LOOP;


                        END LOOP;


                        for x in (SELECT a.*,
                                         (select distinct sztprono_ptrm_code
                                          from sztprono
                                          where 1 = 1
                                          and sztprono_no_regla = a.szstume_no_regla
                                          and sztprono_pidm = a.szstume_pidm
                                          and rownum = 1) ptrm
                                  FROM szstume a
                                  WHERE 1 = 1
                                  AND szstume_no_regla = p_regla
                                  AND exists (SELECT NULL
                                              FROM SZTALMT
                                              WHERE 1 = 1
                                              AND SZTALMT_ALIANZA ='EJEC'
                                              AND SZTALMT_NIVEL =l_nivel
                                              AND SZTALMT_MATERIA = szstume_subj_code
                                              )
                                  )loop
                                        dbms_output.put_line('entra a semis 1');

                                        BEGIN

                                            SELECT COUNT(*)
                                            INTO l_cuenta_grupo
                                            FROM sztprono
                                            WHERE 1 = 1
                                            AND sztprono_no_regla = x.szstume_no_regla
                                            AND sztprono_materia_legal ='M1HB401'
                                            AND sztprono_pidm = x.szstume_pidm;

                                        exception when others then
                                            null;
                                        end;

                                        BEGIN

                                            SELECT COUNT(*)
                                            INTO l_cuenta_grupo_alia
                                            FROM sztprono
                                            WHERE 1 = 1
                                            AND sztprono_no_regla =x.szstume_no_regla
                                            AND sztprono_pidm = x.szstume_pidm
                                            AND EXISTS (SELECT NULL
                                                        FROM SZTALMT
                                                        WHERE 1 = 1
                                                        AND SZTALMT_NIVEL =l_nivel
                                                        AND sztprono_materia_legal = SZTALMT_MATERIA
                                                        );

                                        exception when others then
                                            null;
                                        end;

                                        dbms_output.put_line('cuenta grupo '||l_cuenta_grupo||' cuenta ieps '||l_cuenta_grupo_alia);

                                        -- quitamos materia de introductorio

                                        IF l_cuenta_grupo >  0 then

                                            DELETE
                                            FROM szstume
                                            WHERE 1 = 1
                                            AND szstume_no_regla = X.szstume_no_regla
                                            AND SZSTUME_PIDM = X.szstume_pidm
                                            AND exists (SELECT null
                                                        FROM SZTALMT
                                                        WHERE 1 = 1
                                                        AND SZTALMT_ALIANZA ='EJEC'
                                                        AND SZTALMT_NIVEL =l_nivel
                                                        AND SZTALMT_SECUENCIA = 2
                                                        AND SZTALMT_MATERIA = SZSTUME_SUBJ_CODE);
                                        end IF;

                                        if x.ptrm in ('L0C') then


                                            DELETE
                                            FROM szstume
                                            WHERE 1 = 1
                                            AND szstume_no_regla = X.szstume_no_regla
                                            AND SZSTUME_PIDM = X.szstume_pidm
                                            AND exists (SELECT null
                                                        FROM SZTALMT
                                                        WHERE 1 = 1
                                                        AND SZTALMT_ALIANZA ='EJEC'
                                                        AND SZTALMT_NIVEL =l_nivel
                                                        AND SZTALMT_SECUENCIA = 2
                                                        AND SZTALMT_MATERIA = SZSTUME_SUBJ_CODE
                                                        );
--
                                            delete sztgpme
                                            where 1 = 1
                                            and sztgpme_no_regla = X.szstume_no_regla
                                            AND exists (SELECT null
                                                        FROM SZTALMT
                                                        WHERE 1 = 1
                                                        AND SZTALMT_ALIANZA ='EJEC'
                                                        AND SZTALMT_NIVEL =l_nivel
                                                        AND SZTALMT_SECUENCIA = 2
                                                        AND SZTALMT_MATERIA = SZTGPME_SUBJ_CRSE
                                                        );
--
                                           delete SZSGNME
                                           where 1 = 1
                                           and SZSGNME_no_regla = X.szstume_no_regla
                                           AND exists (SELECT null
                                                        FROM SZTALMT
                                                        WHERE 1 = 1
                                                        AND SZTALMT_ALIANZA ='EJEC'
                                                        AND SZTALMT_NIVEL =l_nivel
                                                        AND SZTALMT_SECUENCIA = 2
                                                        AND SZSGNME_TERM_NRC LIKE 'SEL002%'
                                                        );
--
                                        end if;


                                        --quitamos grupos  de acuerdo al número de materias si es 1 solo la materia de secuencia 2 si es > a 1 entonces se lleva las 2 sesiones

                                        IF l_cuenta_grupo_alia = 1 then


                                            DELETE
                                            FROM szstume
                                            WHERE 1 = 1
                                            AND szstume_no_regla = X.szstume_no_regla
                                            AND SZSTUME_PIDM = X.szstume_pidm
                                            AND exists (SELECT null
                                                        FROM SZTALMT
                                                        WHERE 1 = 1
                                                        AND SZTALMT_ALIANZA ='EJEC'
                                                        AND SZTALMT_NIVEL =l_nivel
                                                        AND SZTALMT_SECUENCIA = 2
                                                        AND SZTALMT_MATERIA = SZSTUME_SUBJ_CODE
                                                        );

                                        elsIF l_cuenta_grupo_alia > 1 then

                                            DELETE
                                            FROM szstume
                                            WHERE 1 = 1
                                            AND szstume_no_regla = X.szstume_no_regla
                                            AND SZSTUME_PIDM = X.szstume_pidm
                                            AND exists (SELECT null
                                                        FROM SZTALMT
                                                        WHERE 1 = 1
                                                        AND SZTALMT_ALIANZA ='EJEC'
                                                        AND SZTALMT_NIVEL =l_nivel
                                                        AND SZTALMT_MATERIA = SZSTUME_SUBJ_CODE
                                                        );

                                        end IF;


                                  END LOOP;


                     for x in (SELECT *
                                  FROM szstume
                                  WHERE 1 = 1
                                  AND szstume_no_regla = p_regla
                                  AND exists (SELECT null
                                              FROM ZSTPARA
                                              WHERE 1 = 1
                                              AND ZSTPARA_MAPA_ID = 'MATERIAS_CESA'
                                              AND ZSTPARA_PARAM_ID = szstume_subj_code
                                              AND ZSTPARA_PARAM_DESC = l_nivel
                                              )
                                  )loop
                                        dbms_output.put_line('entra a semis 1');

                                        BEGIN

                                            SELECT COUNT(*)
                                            INTO l_cuenta_grupo
                                            FROM szstume
                                            WHERE 1 = 1
                                            AND szstume_no_regla = x.szstume_no_regla
                                            AND szstume_subj_code ='M1HB401'
                                            AND szstume_pidm = x.szstume_pidm;

                                        exception when others then
                                            null;
                                        end;

                                        BEGIN

                                            SELECT COUNT(*)
                                            INTO l_cuenta_grupo_alia
                                            FROM szstume
                                            WHERE 1 = 1
                                            AND szstume_no_regla = x.szstume_no_regla
                                            AND szstume_subj_code in (SELECT distinct ZSTPARA_PARAM_ID
                                                                      FROM ZSTPARA
                                                                      WHERE 1 = 1
                                                                      AND ZSTPARA_MAPA_ID = 'MATERIAS_CESA')
                                            AND szstume_pidm = x.szstume_pidm;

                                        exception when others then
                                            null;
                                        end;

                                        dbms_output.put_line('cuenta grupo '||l_cuenta_grupo||' cuenta ieps '||l_cuenta_grupo_alia);

                                        IF l_cuenta_grupo > 0 or l_cuenta_grupo_alia > 0 then

                                            DELETE szstume
                                            WHERE 1 = 1
                                            AND szstume_no_regla = X.szstume_no_regla
                                            AND SZSTUME_PIDM = X.szstume_pidm
                                            AND szstume_subj_code in (SELECT  distinct ZSTPARA_PARAM_ID materia
                                                                      FROM ZSTPARA
                                                                      WHERE 1 = 1
                                                                      AND ZSTPARA_MAPA_ID = 'EJECUTIVAS_INTR');
                                        end IF;


                                  END LOOP;
              --end IF;

        commit;

     END;
--
--
    procedure p_alianzas_pronostico( p_regla   NUMBER)
    as
    BEGIN
        -- ejecutamos el paquete por alianza
        --Jpg@Modify@Feb22 Cambio de estrategia en la ejecución de alianzas
        --
        Begin
            --Jpg@Modify@Ago22: Se agrega elimina etiquetas para alumnos que terminaron su alianza
           -- pkg_alianzas.p_elimina_etiqueta(p_regla,1);
            commit;

            pkg_alianzas.p_carrusel(p_regla,'CIFA');
            pkg_alianzas.p_carrusel(p_regla,'MUBA');
            pkg_alianzas.p_carrusel(p_regla,'UNIC');
            pkg_alianzas.p_carrusel(p_regla,'IEBS');
            pkg_alianzas.p_carrusel(p_regla,'MONU');
            pkg_alianzas.p_carrusel(p_regla,'FCBK');
            pkg_alianzas.p_carrusel(p_regla,'LEGA'); --Jpg@Modify@Nov22 Add New Alian


            pkg_alianzas.p_no_carrusel(p_regla,'EJEC');
            pkg_alianzas.p_no_carrusel(p_regla,'SENI');
--            pkg_alianzas.p_no_carrusel(p_regla,'FCBK');
            pkg_alianzas.p_no_carrusel(p_regla,'GADS');
            pkg_alianzas.p_no_carrusel(p_regla,'MICR');
            pkg_alianzas.p_no_carrusel(p_regla,'TABL');
            pkg_alianzas.p_no_carrusel(p_regla,'CLOU');
--            pkg_alianzas.p_no_carrusel(p_regla,'CESA');
            pkg_alianzas.p_no_carrusel(p_regla,'COUR');
            pkg_alianzas.p_no_carrusel(p_regla,'COLL');
            pkg_alianzas.p_no_carrusel(p_regla,'CAMB'); --Add130922@Frank
            pkg_alianzas.p_no_carrusel(p_regla,'DUOL'); --Jpg@Modify@Nov22 Add New Alian
            pkg_alianzas.p_no_carrusel(p_regla,'CTNU'); --Jpg@Modify@Nov22 Add New Alian


            pkg_alianzas.p_prioridad_alianzas(p_regla);

            Commit;
        End;

        /*
        BEGIN pkg_alianzas.p_iebs_regla( p_regla); END;
        COMMIT;
        BEGIN pkg_alianzas.p_unic_regla( p_regla); END;
        COMMIT;
        BEGIN pkg_alianzas.p_monu_regla( p_regla); END;
        COMMIT;
        BEGIN pkg_alianzas.p_muba_regla( p_regla); END;
        COMMIT;
        BEGIN pkg_alianzas.p_fcbk_regla( p_regla); END;
        COMMIT;
        BEGIN pkg_alianzas.p_coll_regla( p_regla); END;
        COMMIT;
        BEGIN pkg_alianzas.p_ssen_regla( p_regla); END;
        COMMIT;
        BEGIN pkg_alianzas.p_cesa_regla( p_regla); END;
        COMMIT;
        BEGIN pkg_alianzas.p_cour_regla( p_regla); END;
        */

        COMMIT;
    end;

--Jpg@Create@Dic2021 procedimiento de pronostico de alumnos oyentes
--Los alumnos son pronosticados en base a su nivel 'LI'
--Campus 41-SEN tabla sztsenr
    procedure p_oyentes( p_regla   NUMBER, p_tipo number)
    as

    l_pidm_ant INTEGER;
    l_secuencia INTEGER;
    BEGIN

        for o IN (
                    Select s.sztsenr_pidm pidm,
                            s.sztsenr_id id,
                            s.sztsenr_term_code term,
                            sorlcur_program program,
                            s.sztsenr_matpadre materia_legal,
                            s.sztsenr_ptrm_code ptrm,
                            s.sztsenr_fecha_inicio fecha_inicio,
                            sorlcur_key_seqno sp,
                            sorlcur_rate_code rate,
                            (Select Count(j.sztsenr_matpadre)
                                from sztsenr j
                               where j.sztsenr_pidm=s.sztsenr_pidm
                            ) jornada
                    FROM SZTSENR s
                    JOIN SORLCUR ON SORLCUR_PIDM = s.SZTSENR_PIDM
                    AND SORLCUR_LMOD_CODE='LEARNER'
                    WHERE SORLCUR_CAMP_CODE = 'SEN'
                    and SZTSENR_FECHA_INICIO IN (select Distinct SZTALGO_FECHA_NEW
                                                    from sztalgo
                                                    where sztalgo_no_regla= P_REGLA
                                                    and sztalgo_camp_code=SORLCUR_CAMP_CODE  --Jpg@Modify@Nov22
                                                )
                    and Not Exists(SElect 1 from sztprono where sztprono_pidm =s.SZTSENR_PIDM
                            and sztprono_no_regla=P_REGLA)
                    Order by s.sztsenr_pidm
        )LOOP
            if l_pidm_ant <> o.pidm THEN
                l_pidm_ant  := o.pidm;
                l_secuencia := 0;
            end if;

           BEGIN
                l_secuencia := l_secuencia+1;

                INSERT INTO sztprono VALUES ( o.PIDM,
                                              o.ID,
                                              o.term,
                                              o.program,
                                              o.materia_legal,
                                              l_secuencia,
                                              o.ptrm,
                                              o.materia_legal,
                                              Decode(p_tipo,1,null,'x'), -- comentario null,
                                              o.FECHA_INICIO,
                                              o.ptrm,
                                              o.fecha_inicio,
                                              0,
                                              P_REGLA,
                                              USER,
                                              o.sp,
                                              o.RATE,
                                              o.jornada,
                                              sysdate,
                                              'Q1',
                                              'NO',
                                              o.jornada,
                                              'N',
                                              'N',
                                              'N',
                                              'N',
                                              null,
                                              0
                                               );
                commit;

            EXCEPTION WHEN OTHERS THEN
                dbms_output.put_line('Error insert Sztprono..:'||sqlerrm);
            END;
        END LOOP;
    end;

--
--Consulta Materias Activas en Stume por regla o pidm
function f_consulta_activos(p_no_regla  number, p_pidm  number) return number
as
    l_retorna number:=0;

begin

    begin

       SELECT NVL(SUM(activos),0) activos
        into l_retorna
        from
        (
            select decode(ume.SZSTUME_RSTS_CODE,'RE',1,0) activos
            from szstume ume
            where 1 =1
            and ume.SZSTUME_no_regla = Case When p_no_regla = 0 Then
                                                ume.SZSTUME_no_regla
                                            else p_no_regla
                                       end
            and ume.szstume_pidm = p_pidm
            AND UME.SZSTUME_SUBJ_CODE NOT in (select SZTALMT_MATERIA
                                                from SZTALMT
                                                where 1=1
                                                )
--            AND UME.SZSTUME_SUBJ_CODE NOT IN (SELECT A.SZSTUME_SUBJ_CODE
--                                               FROM SZSTUME A
--                                               WHERE 1=1
--                                               AND A.SZSTUME_RSTS_CODE='DD'
--                                               AND A.szstume_pidm=ume.szstume_pidm
--                                               and A.SZSTUME_no_regla=ume.SZSTUME_no_regla)
    --        and ume.SZSTUME_START_DATE ='31/08/2020'
    --        and ume.szstume_id ='020275117'
            AND ume.SZSTUME_RSTS_CODE='RE'
            and ume.SZSTUME_SEQ_NO =(select max(ume1.SZSTUME_SEQ_NO)
                                     from szstume ume1
                                     where 1 = 1
                                     and ume1.SZSTUME_SUBJ_CODE = ume.SZSTUME_SUBJ_CODE
                                     and ume1.szstume_no_regla = ume.szstume_no_regla
                                     and ume1.szstume_pidm = ume.szstume_pidm
                                    )
        );

    exception when others then
           l_retorna:=0;
    end;

    return(l_retorna);


end;

end PKG_ALGORITMO_DIPLO_CURSOS;
/

DROP PUBLIC SYNONYM PKG_ALGORITMO_DIPLO_CURSOS;

CREATE OR REPLACE PUBLIC SYNONYM PKG_ALGORITMO_DIPLO_CURSOS FOR BANINST1.PKG_ALGORITMO_DIPLO_CURSOS;
